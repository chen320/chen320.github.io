<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>python-重点工具(Numpy)</title>
    <link href="/2022/07/15/python%E9%87%8D%E7%82%B9%E5%B7%A5%E5%85%B7%E6%8E%8C%E6%8F%A1%EF%BC%88numpy%EF%BC%89/"/>
    <url>/2022/07/15/python%E9%87%8D%E7%82%B9%E5%B7%A5%E5%85%B7%E6%8E%8C%E6%8F%A1%EF%BC%88numpy%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="Numpy基础数据结构"><a href="#Numpy基础数据结构" class="headerlink" title="Numpy基础数据结构"></a>Numpy基础数据结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy  <span class="hljs-keyword">as</span> np<br><br>ar = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]])    <span class="hljs-comment">#数组没有逗号</span><br><span class="hljs-built_in">print</span>(ar)<br><br><span class="hljs-built_in">print</span>(ar.ndim)     <span class="hljs-comment">#几维数组</span><br><br><span class="hljs-built_in">print</span>(ar.shape)<br><br><span class="hljs-built_in">print</span>(ar.size)  <span class="hljs-comment">#总共元素的个数</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(ar),ar.dtype)<br><br><span class="hljs-built_in">print</span>(ar.itemsize)   <span class="hljs-comment">#字节大小、</span><br><br><span class="hljs-built_in">print</span>(ar.data)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  如何创建数组</span><br><br>ar1 = np.array(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))<br>ar2 = np.arange(<span class="hljs-number">10</span>)<br>ar3 = np.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])<br><span class="hljs-built_in">print</span>(ar1)<br><span class="hljs-built_in">print</span>(ar2)<br><span class="hljs-built_in">print</span>(ar3)<br><br><span class="hljs-built_in">print</span>(np.random.rand(<span class="hljs-number">10</span>).reshape(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#linspace():创建num个均匀间隔的样本</span><br><br><span class="hljs-built_in">print</span>(np.linspace(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,num = <span class="hljs-number">21</span>))<br><br><span class="hljs-built_in">print</span>(np.linspace(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,num = <span class="hljs-number">21</span>,endpoint = <span class="hljs-literal">True</span>))   <span class="hljs-comment">#最后是否被包含</span><br><br><span class="hljs-built_in">print</span>(np.linspace(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,num = <span class="hljs-number">21</span>,retstep = <span class="hljs-literal">True</span>))   <span class="hljs-comment">#元素本身和步长</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#   zeros()   zeros_like()      ///  ones()    ones_like()-----和前边一样，只不过是用“1”来填充</span><br><br><span class="hljs-built_in">print</span>(np.zeros((<span class="hljs-number">3</span>,<span class="hljs-number">5</span>)), )  <span class="hljs-comment">#用“0”来填充</span><br><br>ar = np.array([<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)),<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>))])<br><span class="hljs-built_in">print</span>(ar)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(ar))<br><span class="hljs-built_in">print</span>(np.zeros_like(ar))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#eye()</span><br><br><span class="hljs-built_in">print</span>(np.eye(<span class="hljs-number">5</span>))  <span class="hljs-comment">#矩阵的数组</span><br></code></pre></td></tr></table></figure><h3 id="Numpy通用函数"><a href="#Numpy通用函数" class="headerlink" title="Numpy通用函数"></a>Numpy通用函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">ar1 = np.arange(<span class="hljs-number">10</span>)<br>ar2 = np.ones((<span class="hljs-number">5</span>,<span class="hljs-number">2</span>))<br><br><span class="hljs-built_in">print</span>(ar1)<br><span class="hljs-built_in">print</span>(ar1.T)<br><span class="hljs-built_in">print</span>(ar2)<br><span class="hljs-built_in">print</span>(ar2.T)<br><br>ar3 = ar1.reshape(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>)<br>ar4 = np.zeros((<span class="hljs-number">4</span>,<span class="hljs-number">6</span>)).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">8</span>)<br>ar5 = np.reshape(np.arange(<span class="hljs-number">12</span>),(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><br><span class="hljs-built_in">print</span>(ar3)<br><span class="hljs-built_in">print</span>(ar4)<br><span class="hljs-built_in">print</span>(ar5)<br><br>ar6 = np.resize(np.arange(<span class="hljs-number">5</span>),(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(ar6)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#数组的复制</span><br>ar1 = np.arange(<span class="hljs-number">10</span>)<br>ar2 = ar1<br><span class="hljs-built_in">print</span>(ar1 <span class="hljs-keyword">is</span> ar2)<br>ar1[<span class="hljs-number">2</span>] = <span class="hljs-number">100</span><br><span class="hljs-built_in">print</span>(ar1,ar2)<br><br>s = (np.arange(<span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(np.resize(s,(<span class="hljs-number">2</span>,<span class="hljs-number">6</span>)))    <span class="hljs-comment">#形成了新的数组</span><br><span class="hljs-built_in">print</span>(s.resize(<span class="hljs-number">2</span>,<span class="hljs-number">6</span>))    <span class="hljs-comment">#改变了原来的数组</span><br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#数组类型转变  ：  astype()</span><br><br>ar1 = np.arange(<span class="hljs-number">10</span>,dtype = <span class="hljs-built_in">float</span>)<br>ar2 = ar1.astype(np.int64)<br><span class="hljs-built_in">print</span>(ar1,ar1.dtype)<br><span class="hljs-built_in">print</span>(ar2,ar2.dtype)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#数组的堆叠</span><br>a = np.arange(<span class="hljs-number">5</span>)<br>b = np.arange(<span class="hljs-number">5</span>,<span class="hljs-number">10</span>)<br><br><span class="hljs-built_in">print</span>(np.hstack((a,b)))     <span class="hljs-comment">#横向连接</span><br><span class="hljs-built_in">print</span>(np.vstack((a,b)))     <span class="hljs-comment">#纵向连接</span><br><br><span class="hljs-built_in">print</span>(np.stack((a,b)))  <span class="hljs-comment">#默认是纵向连接</span><br><span class="hljs-built_in">print</span>(np.stack((a,b),axis=<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#数组的拆分</span><br>ar = np.arange(<span class="hljs-number">16</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(np.hsplit(ar,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>])  <span class="hljs-comment">#横向拆分 </span><br><span class="hljs-built_in">print</span>(np.vsplit(ar,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>])   <span class="hljs-comment">#纵向拆分</span><br></code></pre></td></tr></table></figure><h3 id="Numpy的索引及切片"><a href="#Numpy的索引及切片" class="headerlink" title="Numpy的索引及切片"></a>Numpy的索引及切片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">ar = np.arange(<span class="hljs-number">20</span>)<br><span class="hljs-built_in">print</span>(ar)<br><span class="hljs-built_in">print</span>(ar[<span class="hljs-number">4</span>])<br><span class="hljs-built_in">print</span>(ar[<span class="hljs-number">3</span>:<span class="hljs-number">6</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----&#x27;</span>)<br><br>ar = np.arange(<span class="hljs-number">16</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(ar,<span class="hljs-string">&#x27;数组的轴数是%i&#x27;</span>%ar.ndim)<br><span class="hljs-built_in">print</span>(ar[<span class="hljs-number">2</span>],<span class="hljs-string">&#x27;数组轴数为%i&#x27;</span>%ar[<span class="hljs-number">2</span>].ndim)<br><span class="hljs-built_in">print</span>(ar[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(ar[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(ar[<span class="hljs-number">2</span>,<span class="hljs-number">2</span>])<br><span class="hljs-built_in">print</span>(ar[:<span class="hljs-number">2</span>,<span class="hljs-number">1</span>:])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-------&#x27;</span>)<br><br>ar1 = np.arange(<span class="hljs-number">8</span>).reshape(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(ar1,<span class="hljs-string">&#x27;数组的轴数是%i&#x27;</span>%ar1.ndim)<br><span class="hljs-built_in">print</span>(ar1[<span class="hljs-number">0</span>],<span class="hljs-string">&#x27;数组轴数为%i&#x27;</span>%ar1[<span class="hljs-number">0</span>].ndim)<br><span class="hljs-built_in">print</span>(ar1[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],<span class="hljs-string">&#x27;数组轴数为%i&#x27;</span>%ar1[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>].ndim)<br><span class="hljs-built_in">print</span>(ar1[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>],<span class="hljs-string">&#x27;数组轴数为%i&#x27;</span>%ar1[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>].ndim)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#布尔型索引及切片(只保留True的值)</span><br>ar = np.arange(<span class="hljs-number">12</span>).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(ar)<br>i = np.array([<span class="hljs-literal">True</span>,<span class="hljs-literal">False</span>,<span class="hljs-literal">True</span>])<br>j = np.array([<span class="hljs-literal">True</span>,<span class="hljs-literal">True</span>,<span class="hljs-literal">False</span>,<span class="hljs-literal">False</span>])<br><span class="hljs-built_in">print</span>(i)<br><span class="hljs-built_in">print</span>(j)<br><span class="hljs-built_in">print</span>(ar[i])<br><span class="hljs-built_in">print</span>(ar[ar&gt;<span class="hljs-number">5</span>])<br></code></pre></td></tr></table></figure><h3 id="Numpy随机数"><a href="#Numpy随机数" class="headerlink" title="Numpy随机数"></a>Numpy随机数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#随机数生成</span><br>samples = np.random.normal(size=(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>))*<span class="hljs-number">100</span>     <span class="hljs-comment">#0-1之间的数字，在后面*100就会变成0-100之间的随机数</span><br><span class="hljs-built_in">print</span>(samples)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.random.rand()<br><span class="hljs-built_in">print</span>(a)<br><br><span class="hljs-built_in">print</span>( np.random.rand(<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>( np.random.rand(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>))<br><br>data1 = ( np.random.rand(<span class="hljs-number">500</span>))<br>data2 = ( np.random.rand(<span class="hljs-number">500</span>))   <span class="hljs-comment">#rand后边加一个n就会生成一个正态分布的图形</span><br><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt   <span class="hljs-comment">#  会生成一个均匀分布的散点图</span><br>% matplotlip inline<br>plt.scatter(data1,data2)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#随机整数</span><br><span class="hljs-built_in">print</span>(np.random.randint(<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(np.random.randint(<span class="hljs-number">2</span>,<span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(np.random.randint(<span class="hljs-number">2</span>,size=<span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(np.random.randint(<span class="hljs-number">2</span>,size=(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>)))<br></code></pre></td></tr></table></figure><h3 id="Numpy数据的输入和输出"><a href="#Numpy数据的输入和输出" class="headerlink" title="Numpy数据的输入和输出"></a>Numpy数据的输入和输出</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  存储数组数据 .npy文件</span><br><span class="hljs-keyword">import</span> os<br>os.chdir(<span class="hljs-string">&#x27;C:\\Users\\86155\\Desktop\\&#x27;</span>)<br><br>ar = np.random.rand(<span class="hljs-number">5</span>,<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(ar)<br>np.save(<span class="hljs-string">&#x27;arraydata.npy&#x27;</span>,ar)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#读取数组数据 .npy文件</span><br><br>ar_load = np.load(<span class="hljs-string">&#x27;arraydata.npy&#x27;</span>)<br><span class="hljs-built_in">print</span>(ar_load)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python+机器学习+数据分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python-重点工具(Matplotlib)</title>
    <link href="/2022/07/15/python%E9%87%8D%E7%82%B9%E5%B7%A5%E5%85%B7%E6%8E%8C%E6%8F%A1/"/>
    <url>/2022/07/15/python%E9%87%8D%E7%82%B9%E5%B7%A5%E5%85%B7%E6%8E%8C%E6%8F%A1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="下面这些代码均是在学习的过程中做的笔记和练习"><a href="#下面这些代码均是在学习的过程中做的笔记和练习" class="headerlink" title="下面这些代码均是在学习的过程中做的笔记和练习"></a>下面这些代码均是在学习的过程中做的笔记和练习</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#   图标窗口1      plt.show()</span><br>plt.plot(np.random.rand(<span class="hljs-number">10</span>))<br>plt.show()<br><span class="hljs-comment">#直接生成图表</span><br></code></pre></td></tr></table></figure><p><a href="https://postimg.cc/LnCvyCZs"><img src="https://i.postimg.cc/4xZMxjfp/1.png" alt="1.png"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  图标窗口2  魔法函数，嵌入图表   ######</span><br>%matplotlib inline<br><br>x = np.random.randn(<span class="hljs-number">1000</span>)<br>y = np.random.randn(<span class="hljs-number">1000</span>)<br>plt.scatter(x,y)<br><span class="hljs-comment">#直接嵌入图表</span><br></code></pre></td></tr></table></figure><br><a href="https://postimg.cc/G8LynRWn"><img src="https://i.postimg.cc/4dtbtNwy/2.png" alt="2.png"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  图标窗口3  魔法函数,弹出可交互的matplotlib窗口</span><br><br>%matplotlib notebook<br>s = pd.Series(np.random.randn(<span class="hljs-number">100</span>))<br>s.plot(style = <span class="hljs-string">&#x27;k-o&#x27;</span>,figsize=(<span class="hljs-number">10</span>,<span class="hljs-number">5</span>))<br><span class="hljs-comment">#可做一定调整</span><br></code></pre></td></tr></table></figure><br><a href="https://postimg.cc/9R0QBf30"><img src="https://i.postimg.cc/DZd4nWBr/3.png" alt="3.png"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  图标窗口4  魔法函数,弹出matplotlib控制台</span><br><br>%matplotlib qt5<br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">50</span>,<span class="hljs-number">2</span>),columns=[<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>])<br>df.hist(figsize=(<span class="hljs-number">12</span>,<span class="hljs-number">5</span>),color=<span class="hljs-string">&#x27;r&#x27;</span>,alpha=<span class="hljs-number">0.8</span>)<br><span class="hljs-comment">#网页嵌入的交互性窗口  和  控制台，  只能显示一个</span><br><span class="hljs-comment">#如果已经设置了显示方式，要重启一下再运行</span><br><br><span class="hljs-comment">#plt.close() 关闭窗口</span><br><span class="hljs-comment">#plt.gcf().clear()  清空</span><br></code></pre></td></tr></table></figure></p><h4 id="图表的基本元素"><a href="#图表的基本元素" class="headerlink" title="图表的基本元素"></a>图表的基本元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 图名 ，图例 ， 轴标签 ， 轴边界 ， 轴刻度 ， 轴刻度标签。。。。。</span><br><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>),columns=[<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>])<br>f = plt.figure(figsize=(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>))<br>fig = df.plot(figsize=(<span class="hljs-number">6</span>,<span class="hljs-number">4</span>))<br><br><span class="hljs-comment">#figsize  设置窗口大小</span><br><br><span class="hljs-built_in">print</span>(fig,<span class="hljs-built_in">type</span>(fig))<br><span class="hljs-built_in">print</span>(f,<span class="hljs-built_in">type</span>(f))<br><br><br>plt.title(<span class="hljs-string">&#x27;aa&#x27;</span>)   <span class="hljs-comment">#名字</span><br>plt.xlabel(<span class="hljs-string">&#x27;x&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;y&#x27;</span>)<br><br>plt.xlim([<span class="hljs-number">0</span>,<span class="hljs-number">12</span>])<span class="hljs-comment"># x轴边界</span><br>plt.ylim([<span class="hljs-number">0</span>,<span class="hljs-number">1.5</span>])<br>plt.xticks(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))  <span class="hljs-comment">#x刻度</span><br>plt.yticks([<span class="hljs-number">0</span>,<span class="hljs-number">0.2</span>,<span class="hljs-number">0.4</span>,<span class="hljs-number">0.6</span>,<span class="hljs-number">0.8</span>,<span class="hljs-number">1.0</span>,<span class="hljs-number">1.2</span>])<br><br>fig.set_xticklabels(<span class="hljs-string">&quot;%.1f&quot;</span>%i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))   <span class="hljs-comment">#x轴刻度标签</span><br>fig.set_yticklabels(<span class="hljs-string">&quot;%.2f&quot;</span>%i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">0.2</span>,<span class="hljs-number">0.4</span>,<span class="hljs-number">0.6</span>,<span class="hljs-number">0.8</span>,<span class="hljs-number">1.0</span>,<span class="hljs-number">1.2</span>])<br></code></pre></td></tr></table></figure><p><a href="https://postimg.cc/D8gR7P4V"><img src="https://i.postimg.cc/htWnbCSG/4.png" alt="4.png"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 其他元素可视性</span><br><br>x = np.linspace(-np.pi,np.pi,<span class="hljs-number">256</span>,endpoint = <span class="hljs-literal">True</span>)<br>c,  s = np.cos(x),np.sin(x)<br>plt.plot(x,c)<br>plt.plot(x,s)<br><span class="hljs-comment">#  通过ndarry创建图表</span><br><br>plt.grid()  <span class="hljs-comment">#设置图网</span><br><br><span class="hljs-keyword">import</span> matplotlib<br>frame = plt.gca()<br><br>frame.axes.get_xaxis().set_visible(<span class="hljs-literal">False</span>)  <span class="hljs-comment"># x轴不见</span><br>frame.axes.get_yaxis().set_visible(<span class="hljs-literal">False</span>)  <span class="hljs-comment">#y轴不见</span><br></code></pre></td></tr></table></figure><br><a href="https://postimg.cc/WhBSLDXR"><img src="https://i.postimg.cc/vZBKnfnm/5.png" alt="5.png"></a></p><h4 id="图表的样式参数"><a href="#图表的样式参数" class="headerlink" title="图表的样式参数"></a>图表的样式参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># linestyle参数</span><br><br>plt.plot([i**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>)],<br>        linestyle = <span class="hljs-string">&#x27;--&#x27;</span>)<br></code></pre></td></tr></table></figure><p><a href="https://postimg.cc/zyDvf7dT"><img src="https://i.postimg.cc/0yDwcHDX/6.png" alt="6.png"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  marker参数</span><br><br>s = pd.Series(np.random.rand(<span class="hljs-number">10</span>).cumsum())<br>s.plot(linestyle = <span class="hljs-string">&#x27;--&#x27;</span>,<br>      marker = <span class="hljs-string">&#x27;x&#x27;</span>)   <span class="hljs-comment">#   * o</span><br></code></pre></td></tr></table></figure><br><a href="https://postimg.cc/sQ3snDt7"><img src="https://i.postimg.cc/sXhxgMm6/7.png" alt="7.png"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># color参数</span><br><br>plt.hist(np.random.rand(<span class="hljs-number">30</span>),<br>        color = <span class="hljs-string">&#x27;r&#x27;</span>,alpha=<span class="hljs-number">0.8</span>)<br><span class="hljs-comment">#alpha:  0-1 透明度</span><br><span class="hljs-comment">#常用颜色简写： red-r, green-g , black--b , yellow--y</span><br><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">30</span>,<span class="hljs-number">4</span>),columns = <span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;ABCD&#x27;</span>))<br>df = df.cumsum()<br>df.plot(style = <span class="hljs-string">&#x27;--.&#x27;</span>,alpha = <span class="hljs-number">0.8</span>,colormap = <span class="hljs-string">&#x27;GnBu&#x27;</span>)<br><span class="hljs-comment">#colormap:  颜色板</span><br></code></pre></td></tr></table></figure><br><a href="https://postimg.cc/hz8bBMyN"><img src="https://i.postimg.cc/4dq8pSz4/8.png" alt="8.png"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  style 参数，可以包含linestyle,marker , color</span><br><br>ts = pd.Series(np.random.rand(<span class="hljs-number">1000</span>).cumsum(),index = pd.date_range(<span class="hljs-string">&#x27;1/1/2021&#x27;</span>,periods = <span class="hljs-number">1000</span>))<br>ts.plot(style = <span class="hljs-string">&#x27;--g.&#x27;</span>,grid = <span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><br><a href="https://postimg.cc/8sJNt3Yy"><img src="https://i.postimg.cc/9X10FHYj/9.png" alt="9.png"></a></p><h3 id="此后仅仅展示代码，效果可以自行尝试"><a href="#此后仅仅展示代码，效果可以自行尝试" class="headerlink" title="此后仅仅展示代码，效果可以自行尝试"></a>此后仅仅展示代码，效果可以自行尝试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  整体风格样式</span><br><br><span class="hljs-keyword">import</span> matplotlib.style <span class="hljs-keyword">as</span> ps1<br><span class="hljs-built_in">print</span>(plt.style.available)<br><span class="hljs-comment">#查看样式列表</span><br><br>ps1.use(<span class="hljs-string">&#x27;ggplot&#x27;</span>)<br>ts = pd.Series(np.random.rand(<span class="hljs-number">10</span>).cumsum(),index = pd.date_range(<span class="hljs-string">&#x27;1/1/2021&#x27;</span>,periods = <span class="hljs-number">10</span>))<br>ts.plot(style = <span class="hljs-string">&#x27;--g.&#x27;</span>,grid = <span class="hljs-literal">True</span>,figsize=(<span class="hljs-number">10</span>,<span class="hljs-number">6</span>))<br></code></pre></td></tr></table></figure><h3 id="刻度、注释、图表输出"><a href="#刻度、注释、图表输出" class="headerlink" title="刻度、注释、图表输出"></a>刻度、注释、图表输出</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  刻度</span><br><br><span class="hljs-keyword">from</span> matplotlib.ticker <span class="hljs-keyword">import</span> MultipleLocator,FormatStrFormatter<br><br>t = np.arange(<span class="hljs-number">0.0</span>,<span class="hljs-number">100.0</span>,<span class="hljs-number">1</span>)<br>s = np.sin(<span class="hljs-number">0.1</span>*np.pi*t)*np.exp(-t*<span class="hljs-number">0.01</span>)<br>ax = plt.subplot(<span class="hljs-number">111</span>)<br>plt.plot(t,s,<span class="hljs-string">&#x27;--*&#x27;</span>)<br>plt.grid(<span class="hljs-literal">True</span>,linestyle = <span class="hljs-string">&quot;--&quot;</span>,color = <span class="hljs-string">&quot;gray&quot;</span>,linewidth = <span class="hljs-string">&quot;0.5&quot;</span>,axis = <span class="hljs-string">&quot;both&quot;</span>)<br><span class="hljs-comment">#网格</span><br><span class="hljs-comment">#plt.legend()  图例</span><br><br>xmajorLocator = MultipleLocator(<span class="hljs-number">10</span>)   <span class="hljs-comment">#将x的主标签设置为10的倍数</span><br>amajorFormatter = FormatStrFormatter(<span class="hljs-string">&#x27;%.0f&#x27;</span>)<br>xminorLocator = MultipleLocator(<span class="hljs-number">5</span>)  <span class="hljs-comment">#将想的次标签设置为5的倍数</span><br><br>ax.xaxis.set_major_locator(xmajorLocator)   <span class="hljs-comment">#设置x轴主刻度</span><br>ax.xaxis.set_major_formatter(xmajorFormatter)  <span class="hljs-comment">#设置x轴标签文本格式</span><br>ax.xaxis.set_minor_locator(xminorLocator)<span class="hljs-comment"># 设置x轴次刻度</span><br><br>ax.xaxis.grid(<span class="hljs-literal">True</span>,which =<span class="hljs-string">&#x27;both&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 注释</span><br><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>))<br>df.plot(style = <span class="hljs-string">&#x27;--o&#x27;</span>)<br>plt.text(<span class="hljs-number">5</span>,<span class="hljs-number">0.5</span>,<span class="hljs-string">&#x27;hshhhh&#x27;</span>,fontsize=<span class="hljs-number">10</span>)<br><span class="hljs-comment">#注释  （横坐标，纵坐标，注释字符串）</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#   图表输出</span><br><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">100</span>,<span class="hljs-number">4</span>),columns = <span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;ABCD&#x27;</span>))<br>df = df.cumsum()<br>df.plot(style = <span class="hljs-string">&#x27;--.&#x27;</span>,alpha = <span class="hljs-number">0.5</span>)<br>plt.legend(loc = <span class="hljs-string">&#x27;upper left&#x27;</span>)<br>plt.savefig(<span class="hljs-string">&#x27;&#x27;</span>,<br>           dpi=<span class="hljs-number">400</span>,                  <span class="hljs-comment">#分辨率</span><br>           facecolor = <span class="hljs-string">&#x27;g&#x27;</span>,  <br>           bbox_inches = <span class="hljs-string">&#x27;tight&#x27;</span>,     <span class="hljs-comment">#图表需要保存的地方，如果设置成‘tight’，则尝试剪除图标周围的空白部分</span><br>           edgecolor = <span class="hljs-string">&#x27;b&#x27;</span>)   <span class="hljs-comment">#图像的背景图，默认为；w  白色</span><br></code></pre></td></tr></table></figure><h3 id="子图"><a href="#子图" class="headerlink" title="子图"></a>子图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">fig1 = plt.figure(num =<span class="hljs-number">1</span>,figsize=(<span class="hljs-number">4</span>,<span class="hljs-number">2</span>))<br>plt.plot(np.random.rand(<span class="hljs-number">50</span>).cumsum(),<span class="hljs-string">&#x27;k--&#x27;</span>)<br>fig2 = plt.figure(num =<span class="hljs-number">2</span>,figsize=(<span class="hljs-number">4</span>,<span class="hljs-number">2</span>))<br>plt.plot(<span class="hljs-number">50</span>-np.random.rand(<span class="hljs-number">50</span>).cumsum(),<span class="hljs-string">&#x27;k--&#x27;</span>)<br><br><span class="hljs-comment"># figsize设置图标大小</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  子图创建1  - 先建立子图然后填充图表</span><br>fig = plt.figure(figsize=(<span class="hljs-number">10</span>,<span class="hljs-number">6</span>),facecolor = <span class="hljs-string">&#x27;g&#x27;</span>)<br><br>ax1 = fig.add_subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br>plt.plot(np.random.rand(<span class="hljs-number">50</span>).cumsum(),<span class="hljs-string">&#x27;k--&#x27;</span>)<br>plt.plot(np.random.rand(<span class="hljs-number">50</span>).cumsum(),<span class="hljs-string">&#x27;b--&#x27;</span>)<br><br>ax2  = fig.add_subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br>ax2.hist(np.random.rand(<span class="hljs-number">50</span>),alpha=<span class="hljs-number">0.5</span>)<br><br>ax4  = fig.add_subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>)<br>df2 = pd.DataFrame(np.random.rand(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>),columns = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br>ax4.plot(df2,alpha=<span class="hljs-number">0.5</span>,linestyle=<span class="hljs-string">&#x27;--&#x27;</span>,marker=<span class="hljs-string">&#x27;.&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  子图创建2 - 创建一个新的figure ， 并返回一个subplot对象的numpy数组 --plt.subplot#######</span><br><br>fig,axes = plt.subplots(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,figsize=(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>))<br>ts = pd.Series(np.random.rand(<span class="hljs-number">100</span>).cumsum())<br><span class="hljs-built_in">print</span>(axes,axes.shape,<span class="hljs-built_in">type</span>(axes))<br><span class="hljs-comment">#生成图表对象的数组</span><br><br>ax1 = axes[<span class="hljs-number">0</span>,<span class="hljs-number">2</span>]<br>ax1.plot(ts)<br>axes[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>].plot(np.random.rand(<span class="hljs-number">100</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  plt.subplot  参数调整</span><br>fig,axes = plt.subplots(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,sharex=<span class="hljs-literal">True</span>,sharey=<span class="hljs-literal">True</span>)  <span class="hljs-comment">#是否共享x，y刻度</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>        axes[i,j].hist(np.random.rand(<span class="hljs-number">50</span>),color=<span class="hljs-string">&#x27;k&#x27;</span>,alpha=<span class="hljs-number">0.5</span>)<br>plt.subplots_adjust(wspace=<span class="hljs-number">0</span>,hspace=<span class="hljs-number">0</span>)<br><span class="hljs-comment">#控制宽度和高度的百分比</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建图表3 - 多系列图，分别绘画</span><br><br>df = pd.DataFrame(np.random.randn(<span class="hljs-number">100</span>,<span class="hljs-number">4</span>),index =ts.index,columns=<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;ABCD&#x27;</span>))<br>df = df.cumsum()<br>df.plot(style = <span class="hljs-string">&#x27;--.&#x27;</span>,alpha = <span class="hljs-number">0.4</span>,grid = <span class="hljs-literal">True</span> ,figsize = (<span class="hljs-number">8</span>,<span class="hljs-number">8</span>),<br>       subplots=  <span class="hljs-literal">True</span>,<br>       layout = (<span class="hljs-number">2</span>,<span class="hljs-number">3</span>),<br>      sharex = <span class="hljs-literal">False</span>)<br>plt.subplots_adjust(wspace=<span class="hljs-number">0</span>,hspace=<span class="hljs-number">0.2</span>)<br></code></pre></td></tr></table></figure><h3 id="基本图表绘制"><a href="#基本图表绘制" class="headerlink" title="基本图表绘制"></a>基本图表绘制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  Series  直接生成图表</span><br><br>ts = pd.Series(np.random.rand(<span class="hljs-number">20</span>),index = pd.date_range(<span class="hljs-string">&#x27;1/1/2021&#x27;</span>,periods=<span class="hljs-number">20</span>))<br>ts = ts.cumsum()<br>ts.plot(kind=<span class="hljs-string">&#x27;kde&#x27;</span>,      <span class="hljs-comment">#  line,bar,barth.....(折线图 ， 柱状图 ， 柱状图-横)</span><br>       label =<span class="hljs-string">&#x27;hehe&#x27;</span>,<br>       style =<span class="hljs-string">&#x27;--g.&#x27;</span>,<br>       alpha = <span class="hljs-number">0.4</span>,     <span class="hljs-comment">#透明度  0--1</span><br>        use_index = <span class="hljs-literal">True</span>,<br>       rot = <span class="hljs-number">45</span>,            <span class="hljs-comment">#旋转刻度标签</span><br>       grid = <span class="hljs-literal">True</span>,<br>       <span class="hljs-comment">#ylim = [-50,50],</span><br>       <span class="hljs-comment">#yticks = list(range(-50,50,10)),</span><br>       figsize = (<span class="hljs-number">8</span>,<span class="hljs-number">4</span>),<br>       title = <span class="hljs-string">&#x27;test&#x27;</span>,<br>       legend = <span class="hljs-literal">True</span>)    <span class="hljs-comment">#是否显示图例，一般直接用plt.legend(),也可以用    plt.plot()</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  DataFrame直接生成图表</span><br><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">100</span>,<span class="hljs-number">4</span>),index=ts.index,columns=<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;ABCD&#x27;</span>))<br>df = df.cumsum()<br>df.plot(kind=<span class="hljs-string">&#x27;line&#x27;</span>,<br>       style =<span class="hljs-string">&#x27;--&#x27;</span>,<br>       alpha = <span class="hljs-number">0.4</span>,<br>       use_index = <span class="hljs-literal">True</span>,<br>       rot = <span class="hljs-number">45</span>,<br>       grid = <span class="hljs-literal">True</span>,<br>       yticks = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(-<span class="hljs-number">50</span>,<span class="hljs-number">50</span>,<span class="hljs-number">10</span>)),<br>       figsize = (<span class="hljs-number">12</span>,<span class="hljs-number">8</span>),<br>       title = <span class="hljs-string">&#x27;test&#x27;</span>,<br>       legend = <span class="hljs-literal">True</span>,   <br>       subplots = <span class="hljs-literal">True</span>,   <span class="hljs-comment">#####   这个会分开多个图表，而且颜色会越来越浅</span><br>       colormap = <span class="hljs-string">&#x27;Greens&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="柱状图、堆叠图"><a href="#柱状图、堆叠图" class="headerlink" title="柱状图、堆叠图"></a>柱状图、堆叠图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 柱状图、 堆叠图</span><br>fig,axes = plt.subplots(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,figsize = (<span class="hljs-number">10</span>,<span class="hljs-number">10</span>))<br>s = pd.Series(np.random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">16</span>),index = <span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;abcdefghijklmnop&#x27;</span>))<br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">10</span>,<span class="hljs-number">3</span>),columns=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>])<br><span class="hljs-comment">#print(s)</span><br><span class="hljs-comment">#print(df)</span><br><br><span class="hljs-comment">#单系列柱状图</span><br>s.plot(kind=<span class="hljs-string">&#x27;bar&#x27;</span>,ax=axes[<span class="hljs-number">0</span>])<br><br><span class="hljs-comment">#多系列柱状图</span><br>df.plot(kind=<span class="hljs-string">&#x27;bar&#x27;</span>,ax=axes[<span class="hljs-number">1</span>])<br><br><span class="hljs-comment">#多系列堆叠图</span><br>df.plot(kind=<span class="hljs-string">&#x27;bar&#x27;</span>,stacked=<span class="hljs-literal">True</span>,ax=axes[<span class="hljs-number">2</span>])<br><br>df.plot.barh(ax = axes[<span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.figure(figsize=(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>))<br>x = np.arange(<span class="hljs-number">10</span>)<br>y1 = np.random.rand(<span class="hljs-number">10</span>)<br>y2 = -np.random.rand(<span class="hljs-number">10</span>)<br><br>plt.bar(x,y1,width = <span class="hljs-number">1</span>,facecolor = <span class="hljs-string">&#x27;yellowgreen&#x27;</span>,edgecolor =<span class="hljs-string">&#x27;white&#x27;</span>,yerr = y1*<span class="hljs-number">0.1</span>)<br>plt.bar(x,y2,width = <span class="hljs-number">1</span>,facecolor = <span class="hljs-string">&#x27;lightskyblue&#x27;</span>,edgecolor =<span class="hljs-string">&#x27;white&#x27;</span>,yerr = y1*<span class="hljs-number">0.1</span>)<br><br><span class="hljs-comment">#  width  宽度比例</span><br><span class="hljs-comment">#xerrr/yerr   :  x/y方向的error</span><br><br> <br><span class="hljs-keyword">for</span> i,j <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(x,y1):<br>        plt.text(i+<span class="hljs-number">0.09</span>,j-<span class="hljs-number">0.4</span>,<span class="hljs-string">&#x27;%.2f&#x27;</span> %j, color = <span class="hljs-string">&#x27;white&#x27;</span>)<br><span class="hljs-keyword">for</span> i,j <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(x,y1):<br>        plt.text(i+<span class="hljs-number">0.1</span>,j+<span class="hljs-number">0.5</span>,<span class="hljs-string">&#x27;%.2f&#x27;</span> %-j, color = <span class="hljs-string">&#x27;white&#x27;</span>)<br>        <br><span class="hljs-comment">#给图添加text（）</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 外联图表plt.table()</span><br>data = [[<span class="hljs-number">5555</span>,<span class="hljs-number">23143</span>,<span class="hljs-number">44234</span>,<span class="hljs-number">3424</span>,<span class="hljs-number">44243</span>],<br>       [<span class="hljs-number">5555</span>,<span class="hljs-number">23143</span>,<span class="hljs-number">44234</span>,<span class="hljs-number">3424</span>,<span class="hljs-number">44243</span>],<br>       [<span class="hljs-number">5555</span>,<span class="hljs-number">23143</span>,<span class="hljs-number">44234</span>,<span class="hljs-number">3424</span>,<span class="hljs-number">44243</span>],<br>       [<span class="hljs-number">5555</span>,<span class="hljs-number">23143</span>,<span class="hljs-number">44234</span>,<span class="hljs-number">3424</span>,<span class="hljs-number">44243</span>],<br>       [<span class="hljs-number">5555</span>,<span class="hljs-number">23143</span>,<span class="hljs-number">44234</span>,<span class="hljs-number">3424</span>,<span class="hljs-number">44243</span>],]<br>columns = (<span class="hljs-string">&#x27;Freeze&#x27;</span>,<span class="hljs-string">&#x27;wind&#x27;</span>,<span class="hljs-string">&#x27;flood&#x27;</span>,<span class="hljs-string">&#x27;quake&#x27;</span>,<span class="hljs-string">&#x27;hail&#x27;</span>)<br>rows = [<span class="hljs-string">&#x27;%d year&#x27;</span> %x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> (<span class="hljs-number">100</span>,<span class="hljs-number">50</span>,<span class="hljs-number">20</span>,<span class="hljs-number">10</span>,<span class="hljs-number">5</span>)]<br>df = pd.DataFrame(data,columns= (<span class="hljs-string">&#x27;Freeze&#x27;</span>,<span class="hljs-string">&#x27;wind&#x27;</span>,<span class="hljs-string">&#x27;flood&#x27;</span>,<span class="hljs-string">&#x27;quake&#x27;</span>,<span class="hljs-string">&#x27;hail&#x27;</span>),<br>                 index =[<span class="hljs-string">&#x27;%d year&#x27;</span> % x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> (<span class="hljs-number">100</span>,<span class="hljs-number">50</span>,<span class="hljs-number">20</span>,<span class="hljs-number">10</span>,<span class="hljs-number">5</span>)])<br><span class="hljs-comment">#df</span><br><br>df.plot(kind =<span class="hljs-string">&#x27;bar&#x27;</span>,grid = <span class="hljs-literal">True</span>,colormap=<span class="hljs-string">&#x27;Blues_r&#x27;</span>,stacked = <span class="hljs-literal">True</span>,figsize=(<span class="hljs-number">8</span>,<span class="hljs-number">3</span>))<br><span class="hljs-comment">#创建堆叠图</span><br><br>plt.table(cellText = data,          <span class="hljs-comment">#表格文本</span><br>         cellLoc = <span class="hljs-string">&#x27;center&#x27;</span>,          <span class="hljs-comment">#cell内的文本对齐位置</span><br>         cellColours = <span class="hljs-literal">None</span>,      <br>         rowLabels = rows,       <span class="hljs-comment">#行标签</span><br>         rowColours = plt.cm.BuPu(np.linspace(<span class="hljs-number">0</span>,<span class="hljs-number">0.5</span>,<span class="hljs-number">5</span>))[::<span class="hljs-number">1</span>],         <br>         colLabels = columns,                                            <span class="hljs-comment">#列标签</span><br>         colColours = plt.cm.BuPu(np.linspace(<span class="hljs-number">0</span>,<span class="hljs-number">0.5</span>,<span class="hljs-number">5</span>))[::<span class="hljs-number">1</span>],<br>         rowLoc = <span class="hljs-string">&#x27;right&#x27;</span>,     <span class="hljs-comment">#行标签对齐位置</span><br>         loc = <span class="hljs-string">&#x27;bottom&#x27;</span>)      <span class="hljs-comment">#表格位置</span><br><br>plt.xticks([])<br></code></pre></td></tr></table></figure><h3 id="面积图、填图、饼图"><a href="#面积图、填图、饼图" class="headerlink" title="面积图、填图、饼图"></a>面积图、填图、饼图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  面积图</span><br>fig,axes = plt.subplots(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,figsize = (<span class="hljs-number">8</span>,<span class="hljs-number">6</span>))<br>df1 = pd.DataFrame(np.random.rand(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>),columns=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br>df2 = pd.DataFrame(np.random.rand(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>),columns=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br><br>df1.plot.area(colormap = <span class="hljs-string">&#x27;Greens_r&#x27;</span>,alpha = <span class="hljs-number">0.5</span>,ax = axes[<span class="hljs-number">0</span>])<br>df1.plot.area(stacked=<span class="hljs-literal">True</span>,colormap = <span class="hljs-string">&#x27;Set2&#x27;</span>,alpha = <span class="hljs-number">0.5</span>,ax = axes[<span class="hljs-number">1</span>])   <span class="hljs-comment">#stacked是否堆叠，默认是堆叠</span><br><span class="hljs-comment">#当数据出现NaN时，自动填充0，所以图标签需要清洗掉缺失值</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  填图</span><br><br>fig,axes = plt.subplots(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,figsize=(<span class="hljs-number">8</span>,<span class="hljs-number">6</span>))<br><br>x = np.linspace(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">500</span>)<br>y1 = np.sin(<span class="hljs-number">4</span> * np.pi * x) * np.exp(-<span class="hljs-number">5</span>*x)<br>y2 = -np.sin(<span class="hljs-number">4</span> * np.pi * x) * np.exp(-<span class="hljs-number">5</span>*x)<br>axes[<span class="hljs-number">0</span>].fill(x,y1,<span class="hljs-string">&#x27;r&#x27;</span>,alpha=<span class="hljs-number">0.5</span>,label=<span class="hljs-string">&#x27;y1&#x27;</span>)<br>axes[<span class="hljs-number">0</span>].fill(x,y2,<span class="hljs-string">&#x27;g&#x27;</span>,alpha=<span class="hljs-number">0.5</span>,label=<span class="hljs-string">&#x27;y2&#x27;</span>)<br><span class="hljs-comment">#  对函数与坐标轴之间的区域进行填充用  fill函数</span><br><br>x = np.linspace(<span class="hljs-number">0</span>,<span class="hljs-number">5</span>*np.pi,<span class="hljs-number">1000</span>)<br>y1 = np.sin(x)<br>y2 = np.sin(<span class="hljs-number">2</span>*x)<br>axes[<span class="hljs-number">1</span>].fill_between(x,y1,y2,color=<span class="hljs-string">&#x27;b&#x27;</span>,alpha=<span class="hljs-number">0.5</span>,label=<span class="hljs-string">&#x27;area&#x27;</span>)<br><span class="hljs-comment">#填充两个函数之间的区域，使用fill_between函数</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>    axes[i].legend()<br>    axes[i].grid()<br><span class="hljs-comment">#  添加图例，网格</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  饼图  plt.pie()</span><br>s = pd.Series(<span class="hljs-number">3</span> * np.random.rand(<span class="hljs-number">4</span>),index= [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>],name=<span class="hljs-string">&#x27;series&#x27;</span>)<br>plt.axis(<span class="hljs-string">&#x27;equal&#x27;</span>)  <span class="hljs-comment">#保证长宽相等</span><br>plt.pie(s,<br>       explode = [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],    <span class="hljs-comment">#指定每部分的偏移量</span><br>       labels = s.index,<br>        colors = [<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>],<br>       autopct = <span class="hljs-string">&#x27;%.2f%%&#x27;</span>,        <span class="hljs-comment">#饼图上的数据标签显示方式</span><br>        pctdistance = <span class="hljs-number">0.6</span>,      <br>        labeldistance = <span class="hljs-number">1.1</span>,     <span class="hljs-comment">#被画饼图标记的直径，默认为1.1    </span><br>        shadow = <span class="hljs-literal">True</span>,          <span class="hljs-comment">#  阴影</span><br>        startangle=<span class="hljs-number">10</span>,       <span class="hljs-comment">#开始角度</span><br>        radius = <span class="hljs-number">1.2</span>,      <span class="hljs-comment">#半径</span><br>        frame = <span class="hljs-literal">False</span>)    <span class="hljs-comment">#图框</span><br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><h3 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  直方图+ 密度图</span><br>s = pd.Series(np.random.randn(<span class="hljs-number">100</span>))<br>s.hist(bins = <span class="hljs-number">20</span>,         <span class="hljs-comment">#箱子的宽度</span><br>      histtype = <span class="hljs-string">&#x27;bar&#x27;</span>,     <span class="hljs-comment">#风格 ， bar barstacked  step  stepfilled</span><br>      align = <span class="hljs-string">&#x27;mid&#x27;</span>,     <br>      orientation = <span class="hljs-string">&#x27;vertical&#x27;</span>,    <span class="hljs-comment">#水平还是垂直(&#x27;horizontal&#x27;   &#x27;vertical&#x27;)</span><br>      alpha = <span class="hljs-number">0.5</span>)   <span class="hljs-comment"># normed = True</span><br><span class="hljs-comment">#align  对齐方式</span><br><br>s.plot(kind=<span class="hljs-string">&#x27;kde&#x27;</span>,style=<span class="hljs-string">&#x27;k--&#x27;</span>)<br>plt.grid()<br><span class="hljs-comment">#密度图</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  堆叠直方图</span><br>plt.figure(num=<span class="hljs-number">1</span>)<br>df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;a&#x27;</span>:np.random.randn(<span class="hljs-number">1000</span>)+<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;b&#x27;</span>:np.random.randn(<span class="hljs-number">1000</span>),<br>                 <span class="hljs-string">&#x27;c&#x27;</span>:np.random.randn(<span class="hljs-number">1000</span>)-<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;d&#x27;</span>:np.random.randn(<span class="hljs-number">1000</span>)-<span class="hljs-number">2</span>&#125;,<br>                 columns=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br>df.plot.hist(stacked=<span class="hljs-literal">True</span>,<br>            bins=<span class="hljs-number">20</span>,<br>            colormap=<span class="hljs-string">&#x27;Greens_r&#x27;</span>,<br>            alpha=<span class="hljs-number">0.5</span>,<br>            grid = <span class="hljs-literal">True</span>)<br><span class="hljs-comment">#stacked  是否堆叠</span><br><br>df.hist(bins=<span class="hljs-number">50</span>)<br><span class="hljs-comment">#生成多个直方图</span><br></code></pre></td></tr></table></figure><h3 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  plt.scatter()  散点图</span><br>plt.figure(figsize=(<span class="hljs-number">8</span>,<span class="hljs-number">6</span>),)<br>x = np.random.randn(<span class="hljs-number">1000</span>)<br>y = np.random.randn(<span class="hljs-number">1000</span>)<br>plt.scatter(x,y,marker=<span class="hljs-string">&#x27;.&#x27;</span>,<br>           s = np.random.randn(<span class="hljs-number">1000</span>)*<span class="hljs-number">100</span>,<br>           cmap = <span class="hljs-string">&#x27;Blues_r&#x27;</span>,<br>           c = y,<br>           alpha = <span class="hljs-number">0.8</span>)<br>plt.grid()<br><br><span class="hljs-comment">#  s 散点图的大小</span><br><span class="hljs-comment">#  c 散点图的颜色</span><br><span class="hljs-comment">#  vmin ，vmax   亮度设置，标量</span><br><span class="hljs-comment">#cmap  colormap</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  pd.scatter_matrix(散点矩阵)</span><br><br><br>df = pd.DataFrame(np.random.randn(<span class="hljs-number">100</span>,<span class="hljs-number">4</span>),columns=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br>pd.scatter_matrix(&#123;df,figsize=(<span class="hljs-number">10</span>,<span class="hljs-number">6</span>),<br>                 marker=<span class="hljs-string">&#x27;o&#x27;</span>,<br>                 diagonal = <span class="hljs-string">&#x27;kde&#x27;</span>,<br>                 alpha = <span class="hljs-number">0.5</span>,<br>                 range_padding=<span class="hljs-number">0.1</span>&#125;)<br><span class="hljs-comment"># diagonal:(&#123;hist   kde&#125;)  只能其中选一个  确定频率</span><br><span class="hljs-comment">#   图像在x轴 ，y轴远点附近的留白，该值越大，图像离坐标远点越远</span><br></code></pre></td></tr></table></figure><h3 id="极坐标（雷达图）"><a href="#极坐标（雷达图）" class="headerlink" title="极坐标（雷达图）"></a>极坐标（雷达图）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建极坐标图</span><br>s = pd.Series(np.arange(<span class="hljs-number">20</span>))<br>theta = np.arange(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*np.pi,<span class="hljs-number">0.02</span>)<br><span class="hljs-built_in">print</span>(s.head())<br><span class="hljs-built_in">print</span>(theta[:<span class="hljs-number">10</span>])<br><span class="hljs-comment">#  创建数据</span><br><br>fig = plt.figure(figsize=(<span class="hljs-number">8</span>,<span class="hljs-number">4</span>))<br>ax1 = plt.subplot(<span class="hljs-number">121</span>,projection = <span class="hljs-string">&#x27;polar&#x27;</span>)<br>ax2 = plt.subplot(<span class="hljs-number">122</span>)<br><span class="hljs-comment">#   创建极坐标图</span><br><span class="hljs-comment">#  还可以写  ax = fig.add_subplot(111,polar=True)</span><br><br>ax1.plot(theta,theta*<span class="hljs-number">3</span>,linestyle = <span class="hljs-string">&#x27;--&#x27;</span>,lw=<span class="hljs-number">1</span>)     <span class="hljs-comment">#theta: x   theta*3 : y</span><br>ax1.plot(s,linestyle = <span class="hljs-string">&#x27;--&#x27;</span>,marker=<span class="hljs-string">&#x27;.&#x27;</span>,lw=<span class="hljs-number">2</span>)<br>ax2.plot(theta,theta*<span class="hljs-number">3</span>,linestyle = <span class="hljs-string">&#x27;--&#x27;</span>,lw=<span class="hljs-number">1</span>)<br>ax2.plot(s)<br>plt.grid()<br><span class="hljs-comment">#  创建极坐标图，参数1为角度  ，参数2为value</span><br><span class="hljs-comment">#  lw  线宽</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 参数</span><br>ax2.set_theta_direction(-<span class="hljs-number">1</span>)   <span class="hljs-comment">#坐标轴正方向，默认为逆方向</span><br>ax2.set_thetagrids(np.arange(<span class="hljs-number">0.0</span>,<span class="hljs-number">360</span>,<span class="hljs-number">90</span>))    <span class="hljs-comment">#设置极坐标角度网格线显示</span><br>ax2.set_rgrids(np.arange(<span class="hljs-number">0.2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0.4</span>))    <span class="hljs-comment">#  设置极径网格线显示，其中参数必须为正数</span><br><br>ax2.set_theta_offset(np.pi/<span class="hljs-number">2</span>)   <span class="hljs-comment">#设置角度【偏移】，逆时针，弧度制</span><br><br>ax2.set_rlim(<span class="hljs-number">0.2</span>,<span class="hljs-number">1.2</span>)   <span class="hljs-comment"># 显示的极径范围</span><br>ax2.set_rmax(<span class="hljs-number">2</span>)      <span class="hljs-comment">#设置显示的极径最大值</span><br>ax2.set_rticks(np.arange(<span class="hljs-number">0.1</span>,<span class="hljs-number">1.5</span>,<span class="hljs-number">0.2</span>))   <span class="hljs-comment">#  设置极径网格线的显示范围</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  雷达图1 - 极坐标的折线图、填图 - plt.plot()</span><br><br>plt.figure(figsize=(<span class="hljs-number">8</span>,<span class="hljs-number">4</span>))<br><br>ax1 = plt.subplot(<span class="hljs-number">111</span>,projection = <span class="hljs-string">&#x27;polar&#x27;</span>)<br>ax1.set_title(<span class="hljs-string">&#x27;radar map\n&#x27;</span>)  <span class="hljs-comment">#创建标题</span><br>ax1.set_rlim(<span class="hljs-number">0</span>,<span class="hljs-number">12</span>)<br><br>data1 = np.random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>)<br>data2 = np.random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>)<br>data3 = np.random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>)<br>theta = np.arange(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*np.pi,<span class="hljs-number">2</span>*np.pi/<span class="hljs-number">10</span>)<br><span class="hljs-comment">#  创建数据</span><br><br>ax1.plot(theta,data1,<span class="hljs-string">&#x27;.--&#x27;</span>,label=<span class="hljs-string">&#x27;data1&#x27;</span>)<br>ax1.fill(theta,data1,alpha=<span class="hljs-number">0.2</span>)<br>ax2.plot(theta,data2,<span class="hljs-string">&#x27;.--&#x27;</span>,label=<span class="hljs-string">&#x27;data2&#x27;</span>)<br>ax1.fill(theta,data2,alpha=<span class="hljs-number">0.2</span>)<br>ax1.plot(theta,data3,<span class="hljs-string">&#x27;.--&#x27;</span>,label=<span class="hljs-string">&#x27;data3&#x27;</span>)<br>ax1.fill(theta,data3,alpha=<span class="hljs-number">0.2</span>)<br><span class="hljs-comment"># 绘制雷达线</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  雷达图2 - 极坐标的折线图、填图 - plt.polar()</span><br><span class="hljs-comment"># 收尾闭合</span><br><br>labels = np.array([<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>])<br>dataLenth = <span class="hljs-number">6</span>  <span class="hljs-comment">#数据长度</span><br>data1 = np.random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>)<br>data2 = np.random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>)<span class="hljs-comment">#   数据</span><br><br>angles = np.linspace(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*np.pi,dataLenth,endpoint=<span class="hljs-literal">False</span>)  <span class="hljs-comment">#分割圆周长</span><br>data1 = np.concatenate((data1,[data1[<span class="hljs-number">0</span>]]))  <span class="hljs-comment">#闭合</span><br>data2 = np.concatenate((data2,[data2[<span class="hljs-number">0</span>]]))  <span class="hljs-comment">#闭合</span><br>angles = np.concatenate((angles,[angles[<span class="hljs-number">0</span>]]))  <span class="hljs-comment">#闭合</span><br><br>plt.polar(angles,data1,<span class="hljs-string">&#x27;o-&#x27;</span>,linewidth=<span class="hljs-number">1</span>)   <span class="hljs-comment">#做极坐标系</span><br>plt.fill(angles,data1,alpha = <span class="hljs-number">0.25</span>)  <span class="hljs-comment">#填充</span><br>plt.polar(angles,data2,<span class="hljs-string">&#x27;o-&#x27;</span>,linewidth=<span class="hljs-number">1</span>)   <span class="hljs-comment">#做极坐标系</span><br>plt.fill(angles,data2,alpha = <span class="hljs-number">0.25</span>)  <span class="hljs-comment">#填充</span><br><br>plt.thetagrids(angles*<span class="hljs-number">150</span>/np.pi,labels)   <span class="hljs-comment">#设置网格 标签</span><br>plt.ylim(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>) <span class="hljs-comment"># polar的极值设置为ylim</span><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pythom">plt.figure(figsize=(8,4))<br><br>ax1 = plt.subplot(111,projection=&#x27;polar&#x27;)<br>ax1.set_rlim(0,12)   <br><br>#data = np.random.randint(1,10,10)<br>#theta = np.arange(0.2*np.pi,2*np.pi/10)<br>#bar = ax1.bar(theta,data,alpha=0.5)  #创建数据<br><br>#for r,bar in zip(data,bar):<br>#    bar.set_facecolor(plt,cm.jet(r/10))   #设置颜色<br></code></pre></td></tr></table></figure><h3 id="箱型图"><a href="#箱型图" class="headerlink" title="箱型图"></a>箱型图</h3><h6 id="1、-上四分位数-将序列分为四份，一般使用（n-1）-4"><a href="#1、-上四分位数-将序列分为四份，一般使用（n-1）-4" class="headerlink" title="1、 上四分位数   - - 将序列分为四份，一般使用（n+1）/4"></a>1、 上四分位数   - - 将序列分为四份，一般使用（n+1）/4</h6><h6 id="2、-下四分位数-将序列分为四份，一般使用（n-1）-4-3-6-75"><a href="#2、-下四分位数-将序列分为四份，一般使用（n-1）-4-3-6-75" class="headerlink" title="2、 下四分位数  - - 将序列分为四份，一般使用（n+1）/4*3=6.75"></a>2、 下四分位数  - - 将序列分为四份，一般使用（n+1）/4*3=6.75</h6><h6 id="3、-内限-T形的盒须就是内限，最大值区间Q3-1-5IQR，最小区间是Q1-1-5IQR-IQR-Q3-Q1"><a href="#3、-内限-T形的盒须就是内限，最大值区间Q3-1-5IQR，最小区间是Q1-1-5IQR-IQR-Q3-Q1" class="headerlink" title="3、 内限 - -T形的盒须就是内限，最大值区间Q3+1.5IQR，最小区间是Q1-1.5IQR  (IQR = Q3-Q1)"></a>3、 内限 - -T形的盒须就是内限，最大值区间Q3+1.5IQR，最小区间是Q1-1.5IQR  (IQR = Q3-Q1)</h6><h6 id="4、-外限-T形的盒须就是内限，最大值区间Q3-3IQR，最小区间是Q1-3IQR"><a href="#4、-外限-T形的盒须就是内限，最大值区间Q3-3IQR，最小区间是Q1-3IQR" class="headerlink" title="4、 外限 - -T形的盒须就是内限，最大值区间Q3+3IQR，最小区间是Q1-3IQR"></a>4、 外限 - -T形的盒须就是内限，最大值区间Q3+3IQR，最小区间是Q1-3IQR</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  plt.plot.box()  绘制</span><br><br>fig,axes = plt.subplots(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,figsize=(<span class="hljs-number">10</span>,<span class="hljs-number">6</span>))<br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">10</span>,<span class="hljs-number">5</span>),columns=[<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>])<br>color = <span class="hljs-built_in">dict</span>(boxes = <span class="hljs-string">&#x27;DarkGreen&#x27;</span>,whiskers=<span class="hljs-string">&#x27;DarkOrange&#x27;</span>,medians=<span class="hljs-string">&#x27;DarkBlue&#x27;</span>,caps=<span class="hljs-string">&#x27;Gray&#x27;</span>)<br><span class="hljs-comment"># boxs 箱线</span><br><span class="hljs-comment">#  whiskers:  分位数与error bar横线之间竖线的颜色</span><br><span class="hljs-comment">#mediians  :  中位数线颜色</span><br><span class="hljs-comment">#  caps：   error bar横线颜色</span><br><br>df.plot.box(ylim=[<span class="hljs-number">0</span>,<span class="hljs-number">1.2</span>],<br>           grid = <span class="hljs-literal">True</span>,<br>           color= color,<br>           ax = axes[<span class="hljs-number">0</span>])<br><span class="hljs-comment">#  color: 样式填充</span><br><br>df.plot.box(vert = <span class="hljs-literal">False</span>,<br>           positions=[<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>],<br>           ax = axes[<span class="hljs-number">1</span>],<br>           grid = <span class="hljs-literal">True</span>,<br>           color = color)<br><span class="hljs-comment">#  vert:  是否垂直，默认为True</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">df = pd.DataFrame(np.random.rand(<span class="hljs-number">10</span>,<span class="hljs-number">5</span>),columns=[<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>])<br>plt.figure(figsize=(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>))<br><span class="hljs-comment">#  创建图表数据</span><br><br>f = df.boxplot(sym = <span class="hljs-string">&#x27;o&#x27;</span>,   <span class="hljs-comment"># 异常点形状，参考marker</span><br>              vert = <span class="hljs-literal">True</span>,  <br>              whis=<span class="hljs-number">1.5</span>,         <span class="hljs-comment">#IQR</span><br>              patch_artist = <span class="hljs-literal">True</span>,     <span class="hljs-comment"># 上下四分位框内是否填充</span><br>              meanline = <span class="hljs-literal">False</span>,showmeans=<span class="hljs-literal">True</span>,    <span class="hljs-comment">#是否有均值线及其形状</span><br>              showbox = <span class="hljs-literal">True</span>,     <span class="hljs-comment"># 是否显示箱线</span><br>              showcaps = <span class="hljs-literal">True</span>,    <span class="hljs-comment"># 是否显示边缘线</span><br>              showfliers = <span class="hljs-literal">True</span>,   <span class="hljs-comment"># 是否显示异常值</span><br>              notch = <span class="hljs-literal">False</span>,     <span class="hljs-comment">#  中间箱体是否有缺口</span><br>              return_type = <span class="hljs-string">&#x27;dict&#x27;</span>)    <span class="hljs-comment"># 返回类型为字典</span><br>plt.title(<span class="hljs-string">&#x27;boxplot&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  plt.boxplot()绘制</span><br><span class="hljs-comment">#  分组汇总</span><br><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>),columns = [<span class="hljs-string">&#x27;col1&#x27;</span>,<span class="hljs-string">&#x27;col2&#x27;</span>])<br>df[<span class="hljs-string">&#x27;X&#x27;</span>] = pd.Series([<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>])<br>df[<span class="hljs-string">&#x27;Y&#x27;</span>] = pd.Series([<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>])<br><span class="hljs-comment">#print(df.head())</span><br>df.boxplot(by = <span class="hljs-string">&#x27;X&#x27;</span>)    <span class="hljs-comment">#  汇总</span><br>df.boxplot(column=[<span class="hljs-string">&#x27;col1&#x27;</span>,<span class="hljs-string">&#x27;col2&#x27;</span>],by = [<span class="hljs-string">&#x27;X&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>])<br><br><br><span class="hljs-comment">#  column:  按照数据的列分子图</span><br><span class="hljs-comment">#  by ； 按照列分组做的箱型图</span><br></code></pre></td></tr></table></figure><h3 id="样式表格创建"><a href="#样式表格创建" class="headerlink" title="样式表格创建"></a>样式表格创建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  样式</span><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>),columns = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br>df<br><span class="hljs-comment">#sty = df.style</span><br><span class="hljs-comment">#print(sty,type(sty))</span><br>sty<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  按元素处理样式：  style.applymap() ----自动调用其中的函数</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">color_neg_red</span>(<span class="hljs-params">val</span>):</span><br>    <span class="hljs-keyword">if</span> val&lt;<span class="hljs-number">0</span>:<br>        color=<span class="hljs-string">&#x27;red&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        color=<span class="hljs-string">&#x27;black&#x27;</span><br>    <span class="hljs-keyword">return</span>(<span class="hljs-string">&#x27;color:%s&#x27;</span>% color)<br>df.style.applymap(color_neg_red) <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  按行/列 处理样式：  style.apply()</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">highlight_max</span>(<span class="hljs-params">s</span>):</span><br>    is_max = s == s.<span class="hljs-built_in">max</span>()<br>    <br>    lst = []<br>    <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> is_max:<br>        <span class="hljs-keyword">if</span> v:<br>            lst.append(<span class="hljs-string">&#x27;background-color:yellow&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            lst.append(<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">return</span>(lst)<br>df.style.apply(highlight_max,axis = <span class="hljs-number">0</span>,subset = [<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>])<br><br><span class="hljs-comment"># 创建样式方法，每列最大值填充黄色</span><br><span class="hljs-comment"># axis:  0为列，  1为行 ，默认为0</span><br><span class="hljs-comment">#  subset:  索引</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  样式索引、切片</span><br><br>df.style.apply(highlight_max,axis = <span class="hljs-number">1</span>,<br>              subset = pd.IndexSlice[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>,[<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>]])  <br></code></pre></td></tr></table></figure><h3 id="表格显示控制"><a href="#表格显示控制" class="headerlink" title="表格显示控制"></a>表格显示控制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 按照百分数显示</span><br><br>df = pd.DataFrame(np.random.randn(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>),columns=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br><span class="hljs-built_in">print</span>(df)<br>df.head().style.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;&#123;:.2%&#125;&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#   显示小数点数</span><br><br>df.head().style.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;&#123;:.4%&#125;&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#   显示正负数</span><br><br>df.head().style.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;&#123;:+.2f&#125;&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 分列显示</span><br><br>df.head().style.<span class="hljs-built_in">format</span>(&#123;<span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-string">&quot;&#123;:.2%&#125;&quot;</span>,<span class="hljs-string">&#x27;c&#x27;</span>:<span class="hljs-string">&quot;&#123;:+.3f&#125;&quot;</span>,<span class="hljs-string">&#x27;d&#x27;</span>:<span class="hljs-string">&quot;&#123;:.3f&#125;&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><h3 id="表格样式调用"><a href="#表格样式调用" class="headerlink" title="表格样式调用"></a>表格样式调用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  定位空值</span><br><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">5</span>,<span class="hljs-number">4</span>),columns=<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;ABCD&#x27;</span>))<br>df[<span class="hljs-string">&#x27;A&#x27;</span>][<span class="hljs-number">2</span>] = np.nan<br>df.style.highlight_null(null_color = <span class="hljs-string">&#x27;red&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  色彩映射</span><br><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>),columns=<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;ABCD&#x27;</span>))<br>df.style.background_gradient(cmap=<span class="hljs-string">&#x27;Greens&#x27;</span>,axis = <span class="hljs-number">1</span>,low = <span class="hljs-number">0</span>,high = <span class="hljs-number">1</span>)<br><span class="hljs-comment">#  camp 颜色</span><br><span class="hljs-comment">#  axis:  映射参考，0为行，1为列</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  条形图</span><br><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>),columns=<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;ABCD&#x27;</span>))<br>df.style.bar(subset=[<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>],color=<span class="hljs-string">&#x27;#d65f5f&#x27;</span>,width=<span class="hljs-number">100</span>)<br><span class="hljs-comment"># width 最长长度在格子的占比</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  分段式构建样式</span><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>),columns=<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;ABCD&#x27;</span>))<br>df[<span class="hljs-string">&#x27;A&#x27;</span>][[<span class="hljs-number">3</span>,<span class="hljs-number">2</span>]] =np.nan<br>df.style.\<br>       bar(subset=[<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>],color = <span class="hljs-string">&#x27;#d65f5f&#x27;</span>,width=<span class="hljs-number">100</span>).\<br>       highlight_null(null_color=<span class="hljs-string">&#x27;yellow&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python+机器学习+数据分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python-重点工具(Pandas计算)</title>
    <link href="/2022/07/15/python%E9%87%8D%E7%82%B9%E5%B7%A5%E5%85%B7%E6%8E%8C%E6%8F%A1%EF%BC%88pandas%EF%BC%89/"/>
    <url>/2022/07/15/python%E9%87%8D%E7%82%B9%E5%B7%A5%E5%85%B7%E6%8E%8C%E6%8F%A1%EF%BC%88pandas%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="数值计算和统计基础"><a href="#数值计算和统计基础" class="headerlink" title="数值计算和统计基础"></a>数值计算和统计基础</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  基本参数： axis\\skipna</span><br><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key1&#x27;</span>:[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,np.nan,<span class="hljs-number">2</span>],<br>                   <span class="hljs-string">&#x27;key2&#x27;</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,np.nan,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],<br>                   <span class="hljs-string">&#x27;key3&#x27;</span>:[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>]&#125;)<br><span class="hljs-built_in">print</span>(df)<br><br><span class="hljs-built_in">print</span>(df.mean(),<span class="hljs-built_in">type</span>(df.mean()))<br><span class="hljs-built_in">print</span>(df.mean(axis = <span class="hljs-number">1</span>))   <br><span class="hljs-built_in">print</span>(df.mean(skipna=<span class="hljs-literal">False</span>))   <span class="hljs-comment">#不过滤空值</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key1&#x27;</span>:np.arange(<span class="hljs-number">10</span>),<br>                  <span class="hljs-string">&#x27;key2&#x27;</span>:np.random.rand(<span class="hljs-number">10</span>)*<span class="hljs-number">10</span>&#125;)<br><span class="hljs-built_in">print</span>(df)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----&#x27;</span>)<br><span class="hljs-built_in">print</span>(df.quantile(q=<span class="hljs-number">0.75</span>))   <span class="hljs-comment">#统计分位数，q值默认为0.5，也就是中值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br><span class="hljs-built_in">print</span>(df.skew())    <span class="hljs-comment">#样本的偏度</span><br><span class="hljs-built_in">print</span>(df.kurt())    <span class="hljs-comment">#样本的峰度</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">df[<span class="hljs-string">&#x27;key1_s&#x27;</span>] = df[<span class="hljs-string">&#x27;key1&#x27;</span>].cumsum()   <span class="hljs-comment">#累计求和</span><br>df[<span class="hljs-string">&#x27;key2_s&#x27;</span>] = df[<span class="hljs-string">&#x27;key2&#x27;</span>].cumsum()<br><span class="hljs-built_in">print</span>(df)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br>df[<span class="hljs-string">&#x27;key1_p&#x27;</span>] = df[<span class="hljs-string">&#x27;key1&#x27;</span>].cumprod()   <span class="hljs-comment">#累计求积</span><br>df[<span class="hljs-string">&#x27;key2_p&#x27;</span>] = df[<span class="hljs-string">&#x27;key2&#x27;</span>].cumprod()<br><span class="hljs-built_in">print</span>(df)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(df.cummax(),<span class="hljs-string">&#x27;\n&#x27;</span>,df.cummin())    <span class="hljs-comment">#分别求累积最大值和最小值</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#唯一值：  .unique()</span><br><br>s = pd.Series(<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;assadsadfkj&#x27;</span>))<br>sq = s.unique()<br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-built_in">print</span>(sq,<span class="hljs-built_in">type</span>(sq))<br><span class="hljs-built_in">print</span>(pd.Series(sq))<br><br>sq.sort()<br><span class="hljs-built_in">print</span>(sq)<br><br>sc = s.value_counts(sort = <span class="hljs-literal">False</span>)    <span class="hljs-comment">#值出现频率的计数</span><br><span class="hljs-built_in">print</span>(sc)<br></code></pre></td></tr></table></figure><h3 id="文本数据"><a href="#文本数据" class="headerlink" title="文本数据"></a>文本数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  通过str访问，且自动排除丢失和Na值</span><br><br>s = pd.Series([<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;HHUHDD&#x27;</span>,<span class="hljs-string">&#x27;123&#x27;</span>,np.nan,<span class="hljs-string">&#x27;ju&#x27;</span>])<br>df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key1&#x27;</span>:<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;abcdef&#x27;</span>),<br>                  <span class="hljs-string">&#x27;key2&#x27;</span>:[<span class="hljs-string">&#x27;hee&#x27;</span>,<span class="hljs-string">&#x27;fv&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>,<span class="hljs-string">&#x27;hije&#x27;</span>,<span class="hljs-string">&#x27;123&#x27;</span>,np.nan]&#125;)<br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-built_in">print</span>(df)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">str</span>.count(<span class="hljs-string">&#x27;B&#x27;</span>))<br><span class="hljs-built_in">print</span>(df[<span class="hljs-string">&#x27;key2&#x27;</span>].<span class="hljs-built_in">str</span>.upper())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---&#x27;</span>)<br><br>df.columns.<span class="hljs-built_in">str</span>.upper()<br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#字符串常用方法</span><br><br>s = pd.Series([<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;jjaj&#x27;</span>,<span class="hljs-string">&#x27;123&#x27;</span>,np.nan])<br><br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">str</span>.lower(),<span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">str</span>.upper(),<span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">str</span>.<span class="hljs-built_in">len</span>(),<span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">str</span>.startswith(<span class="hljs-string">&#x27;b&#x27;</span>),<span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">str</span>.endswith(<span class="hljs-string">&#x27;3&#x27;</span>),<span class="hljs-string">&#x27;\n&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  replace()</span><br><br>df  = pd.DataFrame(np.random.rand(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>),columns=[<span class="hljs-string">&#x27; columns A&#x27;</span>,<span class="hljs-string">&#x27; column B&#x27;</span>],index = <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>))<br>df.columns = df.columns.<span class="hljs-built_in">str</span>.replace(<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;-&#x27;</span>)<br><span class="hljs-built_in">print</span>(df)<br><br>df.columns = df.columns.<span class="hljs-built_in">str</span>.replace(<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-string">&#x27;hha&#x27;</span>,n=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#   -split\\rsplit</span><br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>s = pd.Series([<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;1,2,3&#x27;</span>,[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>],np.nan])<br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">str</span>.split(<span class="hljs-string">&#x27;,&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">str</span>.split(<span class="hljs-string">&#x27;,&#x27;</span>)[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---&#x27;</span>)<br><span class="hljs-comment">#直接索引得到一个list</span><br><br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">str</span>.split(<span class="hljs-string">&#x27;,&#x27;</span>).<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">str</span>.split(<span class="hljs-string">&#x27;,&#x27;</span>).<span class="hljs-built_in">str</span>.get(<span class="hljs-number">1</span>))     <span class="hljs-comment">#  访问被拆分的元素</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">str</span>.split(<span class="hljs-string">&#x27;,&#x27;</span>,expand=<span class="hljs-literal">True</span>))<br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">str</span>.split(<span class="hljs-string">&#x27;,&#x27;</span>,expand=<span class="hljs-literal">True</span>,n = <span class="hljs-number">1</span>))     <span class="hljs-comment">#限制分割数</span><br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">str</span>.rsplit(<span class="hljs-string">&#x27;,&#x27;</span>,expand=<span class="hljs-literal">True</span>,n =<span class="hljs-number">1</span>))     <span class="hljs-comment">#  字符串末尾到字符串开头</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br><br>df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key1&#x27;</span>:[<span class="hljs-string">&#x27;a,b,c&#x27;</span>,<span class="hljs-string">&#x27;1,2,3&#x27;</span>,[<span class="hljs-string">&#x27;:,.,&#x27;</span>]],<br>                  <span class="hljs-string">&#x27;key2&#x27;</span>:[<span class="hljs-string">&#x27;a-b-c&#x27;</span>,<span class="hljs-string">&#x27;1-2-3&#x27;</span>,[<span class="hljs-string">&#x27;:-.-&#x27;</span>]]&#125;)<br><span class="hljs-built_in">print</span>(df[<span class="hljs-string">&#x27;key2&#x27;</span>].<span class="hljs-built_in">str</span>.split(<span class="hljs-string">&#x27;-&#x27;</span>))<br><span class="hljs-comment">#DataFrame使用split</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  字符串索引</span><br><br>s = pd.Series([<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;dsdscd&#x27;</span>,<span class="hljs-string">&#x27;123&#x27;</span>,np.nan,<span class="hljs-string">&#x27;hj&#x27;</span>])<br>df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key1&#x27;</span>:<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;abcdef&#x27;</span>),<br>                  <span class="hljs-string">&#x27;key2&#x27;</span>:[<span class="hljs-string">&#x27;hee&#x27;</span>,<span class="hljs-string">&#x27;fv&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>,<span class="hljs-string">&#x27;jiij&#x27;</span>,<span class="hljs-string">&#x27;123&#x27;</span>,np.nan]&#125;)<br><br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>])   <span class="hljs-comment">#取第一个字符串</span><br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">str</span>[:<span class="hljs-number">2</span>])   <span class="hljs-comment">#取前两个字符串</span><br><span class="hljs-built_in">print</span>(df[<span class="hljs-string">&#x27;key2&#x27;</span>].<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># merge合并</span><br><br>df1 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key&#x27;</span>:[<span class="hljs-string">&#x27;KO&#x27;</span>,<span class="hljs-string">&#x27;K1&#x27;</span>,<span class="hljs-string">&#x27;K2&#x27;</span>,<span class="hljs-string">&#x27;K3&#x27;</span>],<br>                  <span class="hljs-string">&#x27;A&#x27;</span>:[<span class="hljs-string">&#x27;AD&#x27;</span>,<span class="hljs-string">&#x27;A1&#x27;</span>,<span class="hljs-string">&#x27;A2&#x27;</span>,<span class="hljs-string">&#x27;A3&#x27;</span>],<br>                  <span class="hljs-string">&#x27;B&#x27;</span>:[<span class="hljs-string">&#x27;B0&#x27;</span>,<span class="hljs-string">&#x27;B1&#x27;</span>,<span class="hljs-string">&#x27;B2&#x27;</span>,<span class="hljs-string">&#x27;B3&#x27;</span>]&#125;)<br>df2 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key&#x27;</span>:[<span class="hljs-string">&#x27;KO&#x27;</span>,<span class="hljs-string">&#x27;K1&#x27;</span>,<span class="hljs-string">&#x27;K2&#x27;</span>,<span class="hljs-string">&#x27;K3&#x27;</span>],<br>                  <span class="hljs-string">&#x27;C&#x27;</span>:[<span class="hljs-string">&#x27;CD&#x27;</span>,<span class="hljs-string">&#x27;C1&#x27;</span>,<span class="hljs-string">&#x27;C2&#x27;</span>,<span class="hljs-string">&#x27;C3&#x27;</span>],<br>                  <span class="hljs-string">&#x27;D&#x27;</span>:[<span class="hljs-string">&#x27;D0&#x27;</span>,<span class="hljs-string">&#x27;D1&#x27;</span>,<span class="hljs-string">&#x27;D2&#x27;</span>,<span class="hljs-string">&#x27;D3&#x27;</span>]&#125;)<br><span class="hljs-built_in">print</span>(df1)<br><span class="hljs-built_in">print</span>(df2)<br><span class="hljs-built_in">print</span>(pd.merge(df1,df2,on=<span class="hljs-string">&#x27;key&#x27;</span>))  <span class="hljs-comment">#key按照参考键</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br><br>df3 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key1&#x27;</span>:[<span class="hljs-string">&#x27;KO&#x27;</span>,<span class="hljs-string">&#x27;K0&#x27;</span>,<span class="hljs-string">&#x27;K1&#x27;</span>,<span class="hljs-string">&#x27;K2&#x27;</span>],<br>                    <span class="hljs-string">&#x27;key2&#x27;</span>:[<span class="hljs-string">&#x27;KO&#x27;</span>,<span class="hljs-string">&#x27;K1&#x27;</span>,<span class="hljs-string">&#x27;K0&#x27;</span>,<span class="hljs-string">&#x27;K1&#x27;</span>],<br>                  <span class="hljs-string">&#x27;A&#x27;</span>:[<span class="hljs-string">&#x27;AD&#x27;</span>,<span class="hljs-string">&#x27;A1&#x27;</span>,<span class="hljs-string">&#x27;A2&#x27;</span>,<span class="hljs-string">&#x27;A3&#x27;</span>],<br>                  <span class="hljs-string">&#x27;B&#x27;</span>:[<span class="hljs-string">&#x27;B0&#x27;</span>,<span class="hljs-string">&#x27;B1&#x27;</span>,<span class="hljs-string">&#x27;B2&#x27;</span>,<span class="hljs-string">&#x27;B3&#x27;</span>]&#125;)<br>df4 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key1&#x27;</span>:[<span class="hljs-string">&#x27;KO&#x27;</span>,<span class="hljs-string">&#x27;K1&#x27;</span>,<span class="hljs-string">&#x27;K1&#x27;</span>,<span class="hljs-string">&#x27;K2&#x27;</span>],<br>                    <span class="hljs-string">&#x27;key2&#x27;</span>:[<span class="hljs-string">&#x27;KO&#x27;</span>,<span class="hljs-string">&#x27;K0&#x27;</span>,<span class="hljs-string">&#x27;K0&#x27;</span>,<span class="hljs-string">&#x27;K0&#x27;</span>],<br>                  <span class="hljs-string">&#x27;C&#x27;</span>:[<span class="hljs-string">&#x27;CD&#x27;</span>,<span class="hljs-string">&#x27;C1&#x27;</span>,<span class="hljs-string">&#x27;C2&#x27;</span>,<span class="hljs-string">&#x27;C3&#x27;</span>],<br>                  <span class="hljs-string">&#x27;D&#x27;</span>:[<span class="hljs-string">&#x27;D0&#x27;</span>,<span class="hljs-string">&#x27;D1&#x27;</span>,<span class="hljs-string">&#x27;D2&#x27;</span>,<span class="hljs-string">&#x27;D3&#x27;</span>]&#125;)<br><span class="hljs-built_in">print</span>(df3)<br><span class="hljs-built_in">print</span>(df4)<br><span class="hljs-built_in">print</span>(pd.merge(df3,df4,on=[<span class="hljs-string">&#x27;key1&#x27;</span>,<span class="hljs-string">&#x27;key2&#x27;</span>]))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(pd.merge(df3,df4,on = [<span class="hljs-string">&#x27;key1&#x27;</span>,<span class="hljs-string">&#x27;key2&#x27;</span>],how = <span class="hljs-string">&#x27;inner&#x27;</span>))   <span class="hljs-comment">#交集</span><br><span class="hljs-built_in">print</span>(pd.merge(df3,df4,on = [<span class="hljs-string">&#x27;key1&#x27;</span>,<span class="hljs-string">&#x27;key2&#x27;</span>],how = <span class="hljs-string">&#x27;outer&#x27;</span>))   <span class="hljs-comment">#并集</span><br><span class="hljs-built_in">print</span>(pd.merge(df3,df4,on = [<span class="hljs-string">&#x27;key1&#x27;</span>,<span class="hljs-string">&#x27;key2&#x27;</span>],how = <span class="hljs-string">&#x27;left&#x27;</span>))  <span class="hljs-comment">#以df3合并为主</span><br><span class="hljs-built_in">print</span>(pd.merge(df3,df4,on = [<span class="hljs-string">&#x27;key1&#x27;</span>,<span class="hljs-string">&#x27;key2&#x27;</span>],how = <span class="hljs-string">&#x27;right&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="连接与补修"><a href="#连接与补修" class="headerlink" title="连接与补修"></a>连接与补修</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas  <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy  <span class="hljs-keyword">as</span> np<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  连接：concat</span><br><br>s1 = pd.Series([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br>s2 = pd.Series([<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br>s3= pd.Series([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],index = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>])<br>s4= pd.Series([<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],index = [<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>])<br><span class="hljs-built_in">print</span>(pd.concat([s1,s2]))<br><span class="hljs-built_in">print</span>(pd.concat([s3,s4]).sort_index())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br><span class="hljs-comment">#默认axis=0,行 + 行。</span><br><br><span class="hljs-built_in">print</span>(pd.concat([s3,s4],axis=<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br><span class="hljs-comment">#axis=1，列+列，成为一个DataFrame</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 连接方式：  join，join_axes</span><br><br>s5= pd.Series([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],index = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>])<br>s6= pd.Series([<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],index = [<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br><span class="hljs-built_in">print</span>(pd.concat([s5,s6],axis=<span class="hljs-number">1</span>))    <span class="hljs-comment">#默认是并集</span><br><span class="hljs-built_in">print</span>(pd.concat([s5,s6],axis=<span class="hljs-number">1</span>,join=<span class="hljs-string">&#x27;inner&#x27;</span>))    <span class="hljs-comment">#inner为交集  </span><br><span class="hljs-built_in">print</span>(pd.concat([s5,s6],axis=<span class="hljs-number">1</span>,join_axes=[[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>]])) <span class="hljs-comment">#join_axes为指定联合的index</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(pd.concat([s5,s6],keys=[<span class="hljs-string">&#x27;one&#x27;</span>,<span class="hljs-string">&#x27;two&#x27;</span>]))<br><span class="hljs-built_in">print</span>(pd.concat([s5,s6],axis=<span class="hljs-number">1</span>,keys=[<span class="hljs-string">&#x27;one&#x27;</span>,<span class="hljs-string">&#x27;two&#x27;</span>]))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 修补pd.combine_first()</span><br><br>df1 = pd.DataFrame([[np.nan,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>],[-<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,np.nan,np.nan],[np.nan,<span class="hljs-number">7</span>,np.nan]])<br>df2 = pd.DataFrame([[-<span class="hljs-number">42.6</span>,np.nan,-<span class="hljs-number">8</span>,<span class="hljs-number">2</span>],[-<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>]],index = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>])<br><span class="hljs-built_in">print</span>(df1)<br><span class="hljs-built_in">print</span>(df2)<br><span class="hljs-built_in">print</span>(df1.combine_first(df2))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br><span class="hljs-comment">#根据index，df1的空值被df2代替</span><br><span class="hljs-comment">#如果df2的index多于df1，则更新到df1上</span><br><br>df1.updata(df2)<br><span class="hljs-built_in">print</span>(df1)<br><span class="hljs-comment">#updata,直接df2覆盖df1，相同index的位置</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python+机器学习+数据分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python-重点工具(Pandas数据结构)</title>
    <link href="/2022/07/15/python%E9%87%8D%E7%82%B9%E5%B7%A5%E5%85%B7%E6%8E%8C%E6%8F%A1%EF%BC%88pandas%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%89/"/>
    <url>/2022/07/15/python%E9%87%8D%E7%82%B9%E5%B7%A5%E5%85%B7%E6%8E%8C%E6%8F%A1%EF%BC%88pandas%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="Pandas数据结构Series：索引"><a href="#Pandas数据结构Series：索引" class="headerlink" title="Pandas数据结构Series：索引"></a>Pandas数据结构Series：索引</h3><h5 id="位置下拉-标签索引-切片索引-布尔型索引"><a href="#位置下拉-标签索引-切片索引-布尔型索引" class="headerlink" title="位置下拉 / 标签索引 / 切片索引 / 布尔型索引"></a>位置下拉 / 标签索引 / 切片索引 / 布尔型索引</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas  <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy  <span class="hljs-keyword">as</span> np<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#位置下拉</span><br>s = pd.Series(np.random.rand(<span class="hljs-number">5</span>))<br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">0</span>],<span class="hljs-built_in">type</span>(s[<span class="hljs-number">0</span>]),s[<span class="hljs-number">0</span>].dtype)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">float</span>(s[<span class="hljs-number">0</span>]),<span class="hljs-built_in">type</span>(<span class="hljs-built_in">float</span>(s[<span class="hljs-number">0</span>])))<br><span class="hljs-comment">#print(s[-1])-------报错</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#下标索引</span><br><br>s = pd.Series(np.random.rand(<span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">0</span>],<span class="hljs-built_in">type</span>(s[<span class="hljs-number">0</span>]),s[<span class="hljs-number">0</span>].dtype)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 标签索引</span><br><br>s = pd.Series(np.random.rand(<span class="hljs-number">5</span>),index = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>])<br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-built_in">print</span>(s[<span class="hljs-string">&#x27;a&#x27;</span>],<span class="hljs-built_in">type</span>(s[<span class="hljs-string">&#x27;a&#x27;</span>]),s[<span class="hljs-string">&#x27;a&#x27;</span>].dtype)<br><br><span class="hljs-built_in">print</span>(s[[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]])   <span class="hljs-comment">#新的数组</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#切片索引</span><br><br>s1 = pd.Series(np.random.rand(<span class="hljs-number">5</span>))<br>s2 = pd.Series(np.random.rand(<span class="hljs-number">5</span>),index = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>])<br><span class="hljs-built_in">print</span>(s1)<br><span class="hljs-built_in">print</span>(s2)<br><span class="hljs-built_in">print</span>(s1[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>],s1[<span class="hljs-number">4</span>])   <span class="hljs-comment">#下标</span><br><span class="hljs-built_in">print</span>(s2[<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-string">&#x27;d&#x27;</span>],s2[<span class="hljs-string">&#x27;c&#x27;</span>])   <span class="hljs-comment">#标签</span><br><br><span class="hljs-built_in">print</span>(s2[:-<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(s2[::<span class="hljs-number">2</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#巴布型索引</span><br><br>s = pd.Series(np.random.rand(<span class="hljs-number">3</span>)*<span class="hljs-number">100</span>)<br>s[<span class="hljs-number">4</span>] = <span class="hljs-literal">None</span><br><span class="hljs-built_in">print</span>(s)<br>bs1 = s&gt;<span class="hljs-number">50</span><br>bs2 = s.isnull()<br>bs3 = s.notnull()<br><span class="hljs-built_in">print</span>(bs1,<span class="hljs-built_in">type</span>(bs1),bs1.dtype)<br><span class="hljs-built_in">print</span>(bs2,<span class="hljs-built_in">type</span>(bs2),bs2.dtype)<br><span class="hljs-built_in">print</span>(bs3,<span class="hljs-built_in">type</span>(bs3),bs3.dtype)<br><br><span class="hljs-built_in">print</span>(s[s &gt;<span class="hljs-number">50</span>])<br><span class="hljs-built_in">print</span>(s[bs1])<br></code></pre></td></tr></table></figure><h3 id="Pandas数据结构Series"><a href="#Pandas数据结构Series" class="headerlink" title="Pandas数据结构Series"></a>Pandas数据结构Series</h3><h5 id="数据查看-重新索引-对齐-添加、修改、删除值"><a href="#数据查看-重新索引-对齐-添加、修改、删除值" class="headerlink" title="数据查看 /  重新索引  /  对齐 / 添加、修改、删除值"></a>数据查看 /  重新索引  /  对齐 / 添加、修改、删除值</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#数据查看</span><br><br>s = pd.Series(np.random.rand(<span class="hljs-number">50</span>))<br><span class="hljs-built_in">print</span>(s.head(<span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(s.tail())<br><span class="hljs-comment">#.head()查看头部数据</span><br><span class="hljs-comment">#.tall()查看尾部数据</span><br><span class="hljs-comment">#默认查看5条</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  重新索引  reindex</span><br><br>s = pd.Series(np.random.rand(<span class="hljs-number">5</span>),index = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>])<br>s1 = s.reindex([<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>])<br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-built_in">print</span>(s1)<br><span class="hljs-built_in">print</span>(s.reindex([<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>]))<br><br>s2 = s.reindex([<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-string">&#x27;ss&#x27;</span>],fill_value = <span class="hljs-number">0</span>)     <span class="hljs-comment">#不知数全部用0来填充</span><br><span class="hljs-built_in">print</span>(s2)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Series对齐</span><br><br>s1 = pd.Series(np.random.rand(<span class="hljs-number">3</span>),index = [<span class="hljs-string">&#x27;Jack&#x27;</span>,<span class="hljs-string">&#x27;Mary&#x27;</span>,<span class="hljs-string">&#x27;Tom&#x27;</span>])<br>s2 = pd.Series(np.random.rand(<span class="hljs-number">3</span>),index = [<span class="hljs-string">&#x27;wang&#x27;</span>,<span class="hljs-string">&#x27;Mary&#x27;</span>,<span class="hljs-string">&#x27;Mary&#x27;</span>])<br><span class="hljs-built_in">print</span>(s1)<br><span class="hljs-built_in">print</span>(s2)<br><span class="hljs-built_in">print</span>(s1+s2)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  删除：  drop</span><br><br>s = pd.Series(np.random.rand(<span class="hljs-number">5</span>),index = <span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;nkswm&#x27;</span>))<br><span class="hljs-built_in">print</span>(s)<br>s1 = s.drop(<span class="hljs-string">&#x27;n&#x27;</span>)<br>s2 = s.drop([<span class="hljs-string">&#x27;w&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>])<br><span class="hljs-built_in">print</span>(s1)<br><span class="hljs-built_in">print</span>(s2)<br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  添加  (原数据不变)</span><br><br>s = pd.Series(np.random.rand(<span class="hljs-number">5</span>),index = <span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;nkswm&#x27;</span>))<br>s3 = s.append(s)<br><span class="hljs-built_in">print</span>(s3)<br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><h3 id="数据结构Dataframe"><a href="#数据结构Dataframe" class="headerlink" title="数据结构Dataframe"></a>数据结构Dataframe</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">data = &#123;<span class="hljs-string">&#x27;name&#x27;</span>:[<span class="hljs-string">&#x27;Jack&#x27;</span>,<span class="hljs-string">&#x27;Tome&#x27;</span>,<span class="hljs-string">&#x27;Mary&#x27;</span>],<br>        <span class="hljs-string">&#x27;age&#x27;</span>:[<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>],<br>        <span class="hljs-string">&#x27;gender&#x27;</span>:[<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-string">&#x27;n&#x27;</span>,<span class="hljs-string">&#x27;v&#x27;</span>]&#125;<br>frame = pd.DataFrame(data)<br><span class="hljs-built_in">print</span>(frame)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(frame))<br><br><span class="hljs-built_in">print</span>(frame.values)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  Dataframe的创建</span><br><br><span class="hljs-keyword">from</span> pandas <span class="hljs-keyword">import</span> Series<br><span class="hljs-keyword">import</span> pandas  <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy  <span class="hljs-keyword">as</span> np<br><br>data1 = &#123;<span class="hljs-string">&#x27;a&#x27;</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<br>        <span class="hljs-string">&#x27;b&#x27;</span>:[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],<br>        <span class="hljs-string">&#x27;c&#x27;</span>:[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]&#125;<br>data2 = &#123;<span class="hljs-string">&#x27;one&#x27;</span>:np.random.rand(<span class="hljs-number">3</span> ),    <span class="hljs-comment">#字典的长度必须一样</span><br>        <span class="hljs-string">&#x27;two&#x27;</span>:np.random.rand(<span class="hljs-number">3</span>)&#125;<br><span class="hljs-built_in">print</span>(data1)<br><span class="hljs-built_in">print</span>(data2)<br>d1 = pd.DataFrame(data1)<br>d2 = pd.DataFrame(data2)<br><span class="hljs-built_in">print</span>(d1)<br><span class="hljs-built_in">print</span>(d2)<br><br>df1 = pd.DataFrame(data1, columns = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])   <span class="hljs-comment">#columns重新指定列，以及列的名称</span><br><span class="hljs-built_in">print</span>(df1)<br>df1 = pd.DataFrame(data1, columns = [<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>])<br><span class="hljs-built_in">print</span>(df1)<br><br>df2 = pd.DataFrame(data1, index = [<span class="hljs-string">&#x27;f1&#x27;</span>,<span class="hljs-string">&#x27;f2&#x27;</span>,<span class="hljs-string">&#x27;f3&#x27;</span>])<br><span class="hljs-built_in">print</span>(df2)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">data1 = &#123;<span class="hljs-string">&#x27;one&#x27;</span>:pd.Series(np.random.rand(<span class="hljs-number">2</span>)),         <br>        <span class="hljs-string">&#x27;two&#x27;</span>:pd.Series(np.random.rand(<span class="hljs-number">3</span>))&#125;<br>data2 = &#123;<span class="hljs-string">&#x27;one&#x27;</span>:pd.Series(np.random.rand(<span class="hljs-number">2</span>),index = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>]),    <span class="hljs-comment">#Series不用数量一样</span><br>        <span class="hljs-string">&#x27;two&#x27;</span>:pd.Series(np.random.rand(<span class="hljs-number">3</span>),index = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>])&#125;<br><span class="hljs-built_in">print</span>(data1)<br><span class="hljs-built_in">print</span>(data2)                        <br>     <br>d1 = pd.DataFrame(data1)<br>d2 = pd.DataFrame(data2)<br><span class="hljs-built_in">print</span>(d1)<br><br><span class="hljs-built_in">print</span>(d2)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#   3、通过二维数组直接创建  -----</span><br><br>ar = np.random.rand(<span class="hljs-number">9</span>).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(ar)<br>df1 = pd.DataFrame(ar)<br>df2 = pd.DataFrame(data1, index = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>],columns = [<span class="hljs-string">&#x27;one&#x27;</span>,<span class="hljs-string">&#x27;two&#x27;</span>,<span class="hljs-string">&#x27;three&#x27;</span>])  <span class="hljs-comment">#index和columns长度必须一样</span><br><span class="hljs-built_in">print</span>(df1)<br><span class="hljs-built_in">print</span>(df2)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#   4、 由字典组成的列表-----每一个字典都是一行</span><br>data = [&#123;<span class="hljs-string">&#x27;one&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;two&#x27;</span>:<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-string">&#x27;one&#x27;</span>:<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;two&#x27;</span>:<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;three&#x27;</span>:<span class="hljs-number">10</span>&#125;]<br><span class="hljs-built_in">print</span>(data)<br>df1 = pd.DataFrame(data)<br>df2 = pd.DataFrame(data, index = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>])<br>df3 = pd.DataFrame(data,columns = [<span class="hljs-string">&#x27;one&#x27;</span>,<span class="hljs-string">&#x27;two&#x27;</span>])<br><span class="hljs-built_in">print</span>(df1)<br><span class="hljs-built_in">print</span>(df2)<br><span class="hljs-built_in">print</span>(df3)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#   5、 由字典组成的字典</span><br>data = &#123;<span class="hljs-string">&#x27;Jack&#x27;</span>:&#123;<span class="hljs-string">&#x27;math&#x27;</span>:<span class="hljs-number">99</span>,<span class="hljs-string">&#x27;english&#x27;</span>:<span class="hljs-number">90</span>,<span class="hljs-string">&#x27;art&#x27;</span>:<span class="hljs-number">93</span>&#125;,<br>       <span class="hljs-string">&#x27;Mary&#x27;</span>:&#123;<span class="hljs-string">&#x27;math&#x27;</span>:<span class="hljs-number">98</span>,<span class="hljs-string">&#x27;english&#x27;</span>:<span class="hljs-number">97</span>,<span class="hljs-string">&#x27;art&#x27;</span>:<span class="hljs-number">95</span>&#125;,<br>       <span class="hljs-string">&#x27;Tome&#x27;</span>:&#123;<span class="hljs-string">&#x27;math&#x27;</span>:<span class="hljs-number">66</span>,<span class="hljs-string">&#x27;english&#x27;</span>:<span class="hljs-number">78</span>,<span class="hljs-string">&#x27;art&#x27;</span>:<span class="hljs-number">90</span>&#125;,&#125;<br>df1 = pd.DataFrame(data)<br><span class="hljs-built_in">print</span>(df1)<br></code></pre></td></tr></table></figure><h3 id="数据结构DataFrame-索引"><a href="#数据结构DataFrame-索引" class="headerlink" title="数据结构DataFrame:索引"></a>数据结构DataFrame:索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#选择行与列</span><br><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">12</span>).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)*<span class="hljs-number">100</span>,<br>                 index = [<span class="hljs-string">&#x27;one&#x27;</span>,<span class="hljs-string">&#x27;two&#x27;</span>,<span class="hljs-string">&#x27;three&#x27;</span>],<br>                 columns = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br><span class="hljs-built_in">print</span>(df)<br><br>data1 = df[<span class="hljs-string">&#x27;a&#x27;</span>]<br>data2 = df[[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]]<br><span class="hljs-built_in">print</span>(data1,<span class="hljs-built_in">type</span>(data1))<br><span class="hljs-built_in">print</span>(data2,<span class="hljs-built_in">type</span>(data2))<br><br><br>data3 = df.loc[<span class="hljs-string">&#x27;one&#x27;</span>]<br>data4 = df.loc[[<span class="hljs-string">&#x27;one&#x27;</span>,<span class="hljs-string">&#x27;two&#x27;</span>]]     <span class="hljs-comment">#包含末端</span><br><span class="hljs-built_in">print</span>(data3,<span class="hljs-built_in">type</span>(data3))<br><span class="hljs-built_in">print</span>(data4,<span class="hljs-built_in">type</span>(data4))<br><br>data5 = df[:<span class="hljs-number">2</span>]     <span class="hljs-comment">#df[]中间如果是数字的话就默认为行</span><br><span class="hljs-built_in">print</span>(data5)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#.iloc[]---按照整数位置----行</span><br><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">16</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)*<span class="hljs-number">100</span>,<br>                 index = [<span class="hljs-string">&#x27;one&#x27;</span>,<span class="hljs-string">&#x27;two&#x27;</span>,<span class="hljs-string">&#x27;three&#x27;</span>,<span class="hljs-string">&#x27;four&#x27;</span>],<br>                 columns = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br><span class="hljs-built_in">print</span>(df)<br><br><span class="hljs-built_in">print</span>(df.iloc[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(df.iloc[-<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(df.iloc[<span class="hljs-number">0</span>,<span class="hljs-number">2</span>])<br><span class="hljs-built_in">print</span>(df.iloc[<span class="hljs-number">3</span>,<span class="hljs-number">2</span>])<br><span class="hljs-comment">#print(df.iloc[4])     -------不能超过最大长度，对多到达（length-1）</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#布尔型索引################</span><br><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">16</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)*<span class="hljs-number">100</span>,<br>                 index = [<span class="hljs-string">&#x27;one&#x27;</span>,<span class="hljs-string">&#x27;two&#x27;</span>,<span class="hljs-string">&#x27;three&#x27;</span>,<span class="hljs-string">&#x27;four&#x27;</span>],<br>                 columns = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br><br><span class="hljs-built_in">print</span>(df)<br><br>b1 = df&lt;<span class="hljs-number">20</span><br><span class="hljs-built_in">print</span>(b1,<span class="hljs-built_in">type</span>(b1))<br><span class="hljs-built_in">print</span>(df[b1])      <span class="hljs-comment">#保留正确的值</span><br><br>b2 = df.loc[[<span class="hljs-string">&#x27;one&#x27;</span>,<span class="hljs-string">&#x27;three&#x27;</span>]]&lt;<span class="hljs-number">50</span><br><span class="hljs-built_in">print</span>(b2,<span class="hljs-built_in">type</span>(b2))<br><span class="hljs-built_in">print</span>(df[b2])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#   同时索引行和列</span><br><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">16</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)*<span class="hljs-number">100</span>,<br>                 index = [<span class="hljs-string">&#x27;one&#x27;</span>,<span class="hljs-string">&#x27;two&#x27;</span>,<span class="hljs-string">&#x27;three&#x27;</span>,<span class="hljs-string">&#x27;four&#x27;</span>],<br>                 columns = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br><span class="hljs-built_in">print</span>(df)<br><br><span class="hljs-built_in">print</span>(df[<span class="hljs-string">&#x27;a&#x27;</span>].loc[[<span class="hljs-string">&#x27;three&#x27;</span>,<span class="hljs-string">&#x27;four&#x27;</span>]])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(df[[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>]].iloc[::<span class="hljs-number">2</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----&#x27;</span>)<br><span class="hljs-built_in">print</span>(df[df&lt;<span class="hljs-number">50</span>].loc[[<span class="hljs-string">&#x27;one&#x27;</span>,<span class="hljs-string">&#x27;two&#x27;</span>]])<br></code></pre></td></tr></table></figure><h3 id="数据结构DataFrame：-基本技巧"><a href="#数据结构DataFrame：-基本技巧" class="headerlink" title="数据结构DataFrame： 基本技巧"></a>数据结构DataFrame： 基本技巧</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#数据查看转置</span><br><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">16</span>).reshape(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>)*<span class="hljs-number">100</span>)<br><span class="hljs-built_in">print</span>(df)<br><span class="hljs-built_in">print</span>(df.head(<span class="hljs-number">3</span>))  <span class="hljs-comment">#查看头部数据</span><br><span class="hljs-built_in">print</span>(df.tail(<span class="hljs-number">1</span>))  <span class="hljs-comment">#查看尾部数据</span><br><br><span class="hljs-built_in">print</span>(df.T)   <span class="hljs-comment">#转置</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#添加与修改</span><br><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">16</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)*<span class="hljs-number">100</span>,<br>                 columns = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br><span class="hljs-built_in">print</span>(df)<br><br>df[<span class="hljs-string">&#x27;e&#x27;</span>] = <span class="hljs-number">10</span><br>df.loc[<span class="hljs-number">4</span>] = <span class="hljs-number">20</span><br><span class="hljs-built_in">print</span>(df)<br><br>df[<span class="hljs-string">&#x27;e&#x27;</span>] = <span class="hljs-number">20</span><br>df[[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]] = <span class="hljs-number">100</span><br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#删除  del  /drop()</span><br><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">16</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)*<span class="hljs-number">100</span>,<br>                 columns = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br><span class="hljs-built_in">print</span>(df)<br><br><span class="hljs-keyword">del</span> df[<span class="hljs-string">&#x27;a&#x27;</span>]    <span class="hljs-comment">#原数据改变</span><br><span class="hljs-built_in">print</span>(df)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(df.drop(<span class="hljs-number">0</span>))<br><span class="hljs-built_in">print</span>(df.drop([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]))<br><span class="hljs-built_in">print</span>(df)          <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(df.drop([<span class="hljs-string">&#x27;d&#x27;</span>],axis = <span class="hljs-number">1</span>))    <span class="hljs-comment">#原数据不改变##########</span><br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#   对齐</span><br>df1 = pd.DataFrame(np.random.rand(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>),columns = [<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>])<br>df2 = pd.DataFrame(np.random.rand(<span class="hljs-number">7</span>,<span class="hljs-number">3</span>),columns = [<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>])<br><br><span class="hljs-built_in">print</span>(df1)<br><span class="hljs-built_in">print</span>(df2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----&#x27;</span>)<br><span class="hljs-built_in">print</span>(df1+df2)   <span class="hljs-comment">#对应数据对齐相加</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#排序1 - 按值排序 .sort_values</span><br><br>df1 = pd.DataFrame(np.random.rand(<span class="hljs-number">16</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)*<span class="hljs-number">100</span>,<br>                 columns = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br><span class="hljs-built_in">print</span>(df1)<br><span class="hljs-built_in">print</span>(df1.sort_values([<span class="hljs-string">&#x27;a&#x27;</span>],ascending = <span class="hljs-literal">True</span>))    <span class="hljs-comment">#升序</span><br><span class="hljs-built_in">print</span>(df1.sort_values([<span class="hljs-string">&#x27;a&#x27;</span>],ascending = <span class="hljs-literal">False</span>))   <span class="hljs-comment">#降序</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br><br>df2 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;a&#x27;</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>],<br>                   <span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>)),<br>                   <span class="hljs-string">&#x27;c&#x27;</span>:<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>))&#125;)<br><span class="hljs-built_in">print</span>(df2)<br><span class="hljs-built_in">print</span>(df2.sort_values([<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  排序2 - 索引排序 .sort_index</span><br>df1 = pd.DataFrame(np.random.rand(<span class="hljs-number">16</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)*<span class="hljs-number">100</span>,<br>                 index = [<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>],<br>                  columns = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br>df2 = pd.DataFrame(np.random.rand(<span class="hljs-number">16</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)*<span class="hljs-number">100</span>,<br>                 index = [<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>],<br>                  columns = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br><span class="hljs-built_in">print</span>(df1)<br><span class="hljs-built_in">print</span>(df1.sort_index())<br><span class="hljs-built_in">print</span>(df2)<br><span class="hljs-built_in">print</span>(df2.sort_index())<br></code></pre></td></tr></table></figure><h3 id="时间模块"><a href="#时间模块" class="headerlink" title="时间模块"></a>时间模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#   datetime.date:  data对象</span><br><br><span class="hljs-keyword">import</span> datetime<br><br>today = datetime.date.today()  <span class="hljs-comment">#返回今日</span><br><span class="hljs-built_in">print</span>(today,<span class="hljs-built_in">type</span>(today))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(today),<span class="hljs-built_in">type</span>(<span class="hljs-built_in">str</span>(today)))<br><br>t = datetime.date(<span class="hljs-number">2016</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>)   <span class="hljs-comment">#直接得到当时日期</span><br><span class="hljs-built_in">print</span>(t)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#   datetime.datetime:  datetime对象</span><br><br>now = datetime.datetime.now()<br><span class="hljs-built_in">print</span>(now,<span class="hljs-built_in">type</span>(now))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(now),<span class="hljs-built_in">type</span>(<span class="hljs-built_in">str</span>(now)))    <span class="hljs-comment">#转化为字符串</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  datetime.date.timedelta时间差</span><br><br>t1 = datetime.datetime(<span class="hljs-number">2000</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>)<br>tx = datetime.timedelta(<span class="hljs-number">100</span>,<span class="hljs-number">3600</span>)  <span class="hljs-comment">#3600是秒</span><br><span class="hljs-built_in">print</span>(t1+tx)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  字符串转换方法 parser.parse</span><br><br><span class="hljs-keyword">from</span> dateutil.parser <span class="hljs-keyword">import</span> parse<br><br>data = <span class="hljs-string">&#x27;2/27/2021&#x27;</span><br>data1 = <span class="hljs-string">&#x27;27/2/2021&#x27;</span><br><span class="hljs-built_in">print</span>(parse(data),<span class="hljs-built_in">type</span>(parse(data)))<br><span class="hljs-built_in">print</span>(parse(data1))<br></code></pre></td></tr></table></figure><h3 id="时刻数据"><a href="#时刻数据" class="headerlink" title="时刻数据"></a>时刻数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#pd.Timestamp() -----单个数据</span><br><br>date1 = datetime.datetime(<span class="hljs-number">2021</span>,<span class="hljs-number">2</span>,<span class="hljs-number">27</span>,<span class="hljs-number">12</span>,<span class="hljs-number">45</span>,<span class="hljs-number">30</span>)<br>date2 = <span class="hljs-string">&#x27;2021-2-27&#x27;</span>   <span class="hljs-comment">#创建一个字符串</span><br>t1 = pd.Timestamp(date1)<br>t2 = pd.Timestamp(date2)<br><span class="hljs-built_in">print</span>(t1,<span class="hljs-built_in">type</span>(t1))<br><span class="hljs-built_in">print</span>(t2)<br><span class="hljs-built_in">print</span>(pd.Timestamp(<span class="hljs-string">&#x27;2021-2-27 12:45:30&#x27;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#pd.to_datetime-------大量的时间字符串</span><br><br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br>date1 = datetime(<span class="hljs-number">2021</span>,<span class="hljs-number">2</span>,<span class="hljs-number">27</span>,<span class="hljs-number">12</span>,<span class="hljs-number">45</span>,<span class="hljs-number">30</span>)<br>date2 = <span class="hljs-string">&#x27;2021-2-27&#x27;</span><br>t1 = pd.to_datetime(date1)<br>t2 = pd.to_datetime(date1)<br><br><span class="hljs-built_in">print</span>(t1)<br><span class="hljs-built_in">print</span>(t2)<br><br>lst_date = [<span class="hljs-string">&#x27;2021-2-12&#x27;</span>,<span class="hljs-string">&#x27;2021-4-6&#x27;</span>,<span class="hljs-string">&#x27;2021-6-6&#x27;</span>]    <span class="hljs-comment">#可以是多个数据</span><br>t3 = pd.to_datetime(lst_date)<br><span class="hljs-built_in">print</span>(t3,<span class="hljs-built_in">type</span>(t3))<br><br>date3 = [<span class="hljs-string">&#x27;2021-2-12&#x27;</span>,<span class="hljs-string">&#x27;2021-4-6&#x27;</span>,<span class="hljs-string">&#x27;2021-6-6&#x27;</span>,<span class="hljs-string">&#x27;hahahah&#x27;</span>]<br><span class="hljs-built_in">print</span>(pd.to_datetime(date3,errors=<span class="hljs-string">&#x27;ignore&#x27;</span>),<span class="hljs-built_in">type</span>(pd.to_datetime(date3,errors=<span class="hljs-string">&#x27;ignore&#x27;</span>)))<br><span class="hljs-built_in">print</span>(pd.to_datetime(date3,errors=<span class="hljs-string">&#x27;coerce&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="时间戳索引"><a href="#时间戳索引" class="headerlink" title="时间戳索引"></a>时间戳索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># pd.DatetimeIndex()与TimeSeries时间序列</span><br><br>rng = pd.DatetimeIndex([<span class="hljs-string">&#x27;12/1/2017&#x27;</span>,<span class="hljs-string">&#x27;12/2/2017&#x27;</span>,<span class="hljs-string">&#x27;12/3/2017&#x27;</span>,<span class="hljs-string">&#x27;12/4/2017&#x27;</span>,<span class="hljs-string">&#x27;12/5/2017&#x27;</span>])<br><span class="hljs-built_in">print</span>(rng,<span class="hljs-built_in">type</span>(rng))<br><span class="hljs-built_in">print</span>(rng[<span class="hljs-number">0</span>],<span class="hljs-built_in">type</span>(rng[<span class="hljs-number">0</span>]))<br><br>st = pd.Series(np.random.rand(<span class="hljs-built_in">len</span>(rng)),index = rng)<br><span class="hljs-built_in">print</span>(st,<span class="hljs-built_in">type</span>(st))<br><span class="hljs-built_in">print</span>(st.index)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># pd.date_range()-日期范围：生成日期范围</span><br><span class="hljs-comment">#  1、start + end     2、start/end + periods</span><br><span class="hljs-comment">#默认频率是  天</span><br><br>rng1 = pd.date_range(<span class="hljs-string">&#x27;1/1/2017&#x27;</span>,<span class="hljs-string">&#x27;1/10/2017&#x27;</span>,normalize = <span class="hljs-literal">True</span>)<br>rng2 = pd.date_range(start = <span class="hljs-string">&#x27;1/2/2017&#x27;</span>,periods = <span class="hljs-number">10</span>)<br>rng3 = pd.date_range(end = <span class="hljs-string">&#x27;1/30/2017 15:00:00&#x27;</span>,periods = <span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(rng1,<span class="hljs-built_in">type</span>(rng1))<br><span class="hljs-built_in">print</span>(rng2,<span class="hljs-built_in">type</span>(rng2))<br><span class="hljs-built_in">print</span>(rng3,<span class="hljs-built_in">type</span>(rng3))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----&#x27;</span>)<br><br>rng4 = pd.date_range(start = <span class="hljs-string">&#x27;1/1/2017 15:30&#x27;</span>,periods = <span class="hljs-number">10</span>,name = <span class="hljs-string">&#x27;hello world&#x27;</span>,normalize = <span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(rng4)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(pd.date_range(<span class="hljs-string">&#x27;1/1/2017&#x27;</span>,<span class="hljs-string">&#x27;1/10/2017&#x27;</span>))<br><span class="hljs-built_in">print</span>(pd.date_range(<span class="hljs-string">&#x27;1/1/2017&#x27;</span>,<span class="hljs-string">&#x27;1/10/2017&#x27;</span>,closed = <span class="hljs-string">&#x27;right&#x27;</span>))<br><span class="hljs-built_in">print</span>(pd.date_range(<span class="hljs-string">&#x27;1/1/2017&#x27;</span>,<span class="hljs-string">&#x27;1/10/2017&#x27;</span>,closed = <span class="hljs-string">&#x27;left&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(pd.bdate_range(<span class="hljs-string">&#x27;20210101&#x27;</span>,<span class="hljs-string">&#x27;20210107&#x27;</span>))  <span class="hljs-comment">#默认频率是工作日</span><br><br><span class="hljs-built_in">print</span>(pd.date_range(start = <span class="hljs-string">&#x27;1/10/2017&#x27;</span>,periods = <span class="hljs-number">10</span>))   <span class="hljs-comment">#直接转化为list</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># pd.date_range()-日期范围：生成日期范围--频率（）</span><br><span class="hljs-keyword">import</span> pandas  <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy  <span class="hljs-keyword">as</span> np<br><br><span class="hljs-built_in">print</span>(pd.date_range(<span class="hljs-string">&#x27;1/1/2017&#x27;</span>,<span class="hljs-string">&#x27;1/10/2017&#x27;</span>))     <span class="hljs-comment">#日历日</span><br><span class="hljs-built_in">print</span>(pd.date_range(<span class="hljs-string">&#x27;1/1/2017&#x27;</span>,<span class="hljs-string">&#x27;1/10/2017&#x27;</span>,freq = <span class="hljs-string">&#x27;B&#x27;</span>))  <span class="hljs-comment">#工作日</span><br><span class="hljs-built_in">print</span>(pd.date_range(<span class="hljs-string">&#x27;1/1/2017&#x27;</span>,<span class="hljs-string">&#x27;1/10/2017&#x27;</span>,freq = <span class="hljs-string">&#x27;H&#x27;</span>))   <span class="hljs-comment">#每小时</span><br><span class="hljs-built_in">print</span>(pd.date_range(<span class="hljs-string">&#x27;1/1/2017 12:00&#x27;</span>,<span class="hljs-string">&#x27;1/1/2017 12:10&#x27;</span>,freq = <span class="hljs-string">&#x27;T&#x27;</span>))   <span class="hljs-comment">#每分</span><br><span class="hljs-built_in">print</span>(pd.date_range(<span class="hljs-string">&#x27;1/1/2017 12:00:00&#x27;</span>,<span class="hljs-string">&#x27;1/1/2017 12:10:10&#x27;</span>,freq = <span class="hljs-string">&#x27;S&#x27;</span>))  <span class="hljs-comment">#每秒</span><br><span class="hljs-built_in">print</span>(pd.date_range(<span class="hljs-string">&#x27;1/1/2017 12:00:00&#x27;</span>,<span class="hljs-string">&#x27;1/1/2017 12:10:10&#x27;</span>,freq = <span class="hljs-string">&#x27;L&#x27;</span>))  <span class="hljs-comment">#每毫秒</span><br><span class="hljs-built_in">print</span>(pd.date_range(<span class="hljs-string">&#x27;1/1/2017 12:00:00&#x27;</span>,<span class="hljs-string">&#x27;1/1/2017 12:10:10&#x27;</span>,freq = <span class="hljs-string">&#x27;U&#x27;</span>))  <span class="hljs-comment">#每微秒</span><br><br><span class="hljs-built_in">print</span>(pd.date_range(<span class="hljs-string">&#x27;1/1/2017 12:00&#x27;</span>,<span class="hljs-string">&#x27;1/10/2017 12:10&#x27;</span>,freq = <span class="hljs-string">&#x27;W-MON&#x27;</span>))  <span class="hljs-comment">#指定每周星期几开始</span><br><br><span class="hljs-built_in">print</span>(pd.date_range(<span class="hljs-string">&#x27;1/1/2017 12:00&#x27;</span>,<span class="hljs-string">&#x27;1/10/2017 12:10&#x27;</span>,freq = <span class="hljs-string">&#x27;WOM-2MON&#x27;</span>))  <span class="hljs-comment">#每月的第几个星期几开始</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">## pd.date_range()-日期范围：复合频率</span><br><br><span class="hljs-built_in">print</span>(pd.date_range(<span class="hljs-string">&#x27;1/1/2017&#x27;</span>,<span class="hljs-string">&#x27;2/1/2017&#x27;</span>,freq = <span class="hljs-string">&#x27;7D&#x27;</span>))  <span class="hljs-comment">#7天</span><br><span class="hljs-built_in">print</span>(pd.date_range(<span class="hljs-string">&#x27;1/1/2017&#x27;</span>,<span class="hljs-string">&#x27;1/2/2017&#x27;</span>,freq = <span class="hljs-string">&#x27;2h30min&#x27;</span>))<br><span class="hljs-built_in">print</span>(pd.date_range(<span class="hljs-string">&#x27;2017&#x27;</span>,<span class="hljs-string">&#x27;2018&#x27;</span>,freq = <span class="hljs-string">&#x27;2M&#x27;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  时期频率转换；asfreq</span><br><br>ts = pd.Series(np.random.rand(<span class="hljs-number">4</span>),<br>              index = pd.date_range(<span class="hljs-string">&#x27;20170101&#x27;</span>,<span class="hljs-string">&#x27;20170104&#x27;</span>))<br><span class="hljs-built_in">print</span>(ts)<br><span class="hljs-built_in">print</span>(ts.asfreq(<span class="hljs-string">&#x27;4H&#x27;</span>,method = <span class="hljs-string">&#x27;ffill&#x27;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  超前和滞后</span><br><br>ts = pd.Series(np.random.rand(<span class="hljs-number">4</span>),<br>              index = pd.date_range(<span class="hljs-string">&#x27;20170101&#x27;</span>,<span class="hljs-string">&#x27;20170104&#x27;</span>))<br><span class="hljs-built_in">print</span>(ts)<br><br><span class="hljs-built_in">print</span>(ts.shift(<span class="hljs-number">2</span>))  <span class="hljs-comment">#数值后移</span><br><span class="hljs-built_in">print</span>(ts.shift(-<span class="hljs-number">2</span>))  <span class="hljs-comment">#数值前移</span><br><br>per = ts/ts.shift(<span class="hljs-number">1</span>) - <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(per)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(ts.shift(<span class="hljs-number">2</span>,freq = <span class="hljs-string">&#x27;D&#x27;</span>))<br><span class="hljs-built_in">print</span>(ts.shift(<span class="hljs-number">2</span>,freq = <span class="hljs-string">&#x27;T&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="时期"><a href="#时期" class="headerlink" title="时期"></a>时期</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># pd.Period()创建时期</span><br><br>p = pd.Period(<span class="hljs-string">&#x27;2017&#x27;</span>,freq = <span class="hljs-string">&#x27;M&#x27;</span>)<br><span class="hljs-built_in">print</span>(p,<span class="hljs-built_in">type</span>(p))<br><br><span class="hljs-built_in">print</span>(p + <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(p - <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(pd.Period(<span class="hljs-string">&#x27;2012&#x27;</span>,freq = <span class="hljs-string">&#x27;A-DEC&#x27;</span>)-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">p =  pd.period_range(<span class="hljs-string">&#x27;1/1/2021&#x27;</span>,<span class="hljs-string">&#x27;1/1/2022&#x27;</span>,freq = <span class="hljs-string">&#x27;M&#x27;</span>)<br>q =  pd.date_range(<span class="hljs-string">&#x27;1/1/2021&#x27;</span>,<span class="hljs-string">&#x27;1/1/2022&#x27;</span>,freq = <span class="hljs-string">&#x27;M&#x27;</span>)<br><br>ts1 = pd.Series(np.random.rand(<span class="hljs-built_in">len</span>(p)),<br>               index = p)<br>ts2 = pd.Series(np.random.rand(<span class="hljs-built_in">len</span>(q)),<br>               index = q)<br><span class="hljs-built_in">print</span>(ts1.index)<br><span class="hljs-built_in">print</span>(ts2.index)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  asfreq: 频率转换</span><br><br>p = pd.Period(<span class="hljs-string">&#x27;2020&#x27;</span>,<span class="hljs-string">&#x27;A-DEC&#x27;</span>)<br><span class="hljs-built_in">print</span>(p)<br><span class="hljs-built_in">print</span>(p.asfreq(<span class="hljs-string">&#x27;M&#x27;</span>,how = <span class="hljs-string">&#x27;start&#x27;</span>))<br><span class="hljs-built_in">print</span>(p.asfreq(<span class="hljs-string">&#x27;D&#x27;</span>,how = <span class="hljs-string">&#x27;end&#x27;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#时间戳用于时期之间的转换： pd.to_Period()\pd.to_timestamp()</span><br><br>p =  pd.date_range(<span class="hljs-string">&#x27;1/1/2021&#x27;</span>,periods = <span class="hljs-number">10</span>,freq = <span class="hljs-string">&#x27;M&#x27;</span>)<br>q =  pd.period_range(<span class="hljs-string">&#x27;2021&#x27;</span>,<span class="hljs-string">&#x27;2022&#x27;</span>,freq = <span class="hljs-string">&#x27;M&#x27;</span>)<br><br>ts1 = pd.Series(np.random.rand(<span class="hljs-built_in">len</span>(p)),<br>               index = p)<br><span class="hljs-built_in">print</span>(ts1.head())<br><span class="hljs-built_in">print</span>(ts1.to_period().head())<br><span class="hljs-comment">#每月最后一日转化为每月</span><br>ts2 = pd.Series(np.random.rand(<span class="hljs-built_in">len</span>(q)),<br>               index = q)<br><span class="hljs-built_in">print</span>(ts2.head())<br><span class="hljs-built_in">print</span>(ts2.to_timestamp().head())<br><span class="hljs-comment">#每月，转化为每月第一天</span><br></code></pre></td></tr></table></figure><h3 id="时间序列-索引及切片"><a href="#时间序列-索引及切片" class="headerlink" title="时间序列 - 索引及切片"></a>时间序列 - 索引及切片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  索引</span><br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br>p =  pd.date_range(<span class="hljs-string">&#x27;1/2021&#x27;</span>,<span class="hljs-string">&#x27;3/2021&#x27;</span>)<br>ts =  pd.Series(np.random.rand(<span class="hljs-built_in">len</span>(p)),index = p)<br><span class="hljs-built_in">print</span>(ts.head())<br><br><span class="hljs-built_in">print</span>(ts[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(ts[:<span class="hljs-number">2</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br><span class="hljs-built_in">print</span>(ts[<span class="hljs-string">&#x27;2021/2/28&#x27;</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 切片</span><br><br><span class="hljs-built_in">print</span>(ts.head())<br><span class="hljs-comment">#print(ts[::2])</span><br><span class="hljs-built_in">print</span>(ts[<span class="hljs-string">&#x27;20210101&#x27;</span>:<span class="hljs-string">&#x27;20210111&#x27;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(ts[<span class="hljs-string">&#x27;2021/01&#x27;</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#重复索引的时间序列</span><br><br>dates = pd.DatetimeIndex([<span class="hljs-string">&#x27;1/2/2015&#x27;</span>,<span class="hljs-string">&#x27;1/3/2015&#x27;</span>,<span class="hljs-string">&#x27;1/2/2015&#x27;</span>,<span class="hljs-string">&#x27;2/4/2015&#x27;</span>,<span class="hljs-string">&#x27;1/3/2015&#x27;</span>])<br>ts = pd.Series(np.random.rand(<span class="hljs-number">5</span>),index = dates)<br><br><span class="hljs-built_in">print</span>(ts)<br><span class="hljs-built_in">print</span>(ts.is_unique,ts.is_unique)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(ts.groupby(level=<span class="hljs-number">0</span>).mean())   <span class="hljs-comment">#合在一起求平均值</span><br></code></pre></td></tr></table></figure><h3 id="时间序列-重采样"><a href="#时间序列-重采样" class="headerlink" title="时间序列 - 重采样"></a>时间序列 - 重采样</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#重采样：  resample()</span><br><br>p =  pd.date_range(<span class="hljs-string">&#x27;1/2021&#x27;</span>,periods = <span class="hljs-number">12</span>)<br>ts =  pd.Series(np.arange(<span class="hljs-number">12</span>),index = p)<br><span class="hljs-built_in">print</span>(ts)<br><br>ts_re = ts.resample(<span class="hljs-string">&#x27;5D&#x27;</span>)<br>ts_re2 = ts.resample(<span class="hljs-string">&#x27;5D&#x27;</span>).<span class="hljs-built_in">sum</span>()<br><span class="hljs-built_in">print</span>(ts_re,<span class="hljs-built_in">type</span>(ts_re))<br><span class="hljs-built_in">print</span>(ts_re2,<span class="hljs-built_in">type</span>(ts_re2))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;5D&#x27;</span>).mean())   <br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;5D&#x27;</span>).<span class="hljs-built_in">max</span>())<br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;5D&#x27;</span>).<span class="hljs-built_in">min</span>())<br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;5D&#x27;</span>).median())<br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;5D&#x27;</span>).first())<br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;5D&#x27;</span>).last())<br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;5D&#x27;</span>).ohlc())  <span class="hljs-comment">#OHLC重采样</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#降采样   #33#########</span><br><br>p =  pd.date_range(<span class="hljs-string">&#x27;1/21/2021&#x27;</span>,periods = <span class="hljs-number">12</span>)<br>ts =  pd.Series(np.arange(<span class="hljs-number">1</span>,<span class="hljs-number">13</span>),index = p)<br><span class="hljs-built_in">print</span>(ts)<br><br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;5D&#x27;</span>).<span class="hljs-built_in">sum</span>(),<span class="hljs-string">&#x27;→ 默认\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;5D&#x27;</span>,closed = <span class="hljs-string">&#x27;left&#x27;</span>).<span class="hljs-built_in">sum</span>(),<span class="hljs-string">&#x27;→ left\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;5D&#x27;</span>,closed = <span class="hljs-string">&#x27;right&#x27;</span>).<span class="hljs-built_in">sum</span>(),<span class="hljs-string">&#x27;→ right\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;5D&#x27;</span>,label = <span class="hljs-string">&#x27;left&#x27;</span>).<span class="hljs-built_in">sum</span>(),<span class="hljs-string">&#x27;→ leftlabel\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;5D&#x27;</span>,label = <span class="hljs-string">&#x27;right&#x27;</span>).<span class="hljs-built_in">sum</span>(),<span class="hljs-string">&#x27;→ rightlabel\n&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#升采样及插值</span><br><br><span class="hljs-keyword">import</span> pandas  <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy  <span class="hljs-keyword">as</span> np<br>p =  pd.date_range(<span class="hljs-string">&#x27;1/1/2021 0:0:0&#x27;</span>,periods = <span class="hljs-number">5</span>,freq = <span class="hljs-string">&#x27;H&#x27;</span>)<br>ts =  pd.DataFrame(np.arange(<span class="hljs-number">15</span>).reshape(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>),index = p,columns = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>])<br><span class="hljs-built_in">print</span>(ts)<br><br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;15T&#x27;</span>).asfreq())<br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;15T&#x27;</span>).ffill())<br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;15T&#x27;</span>).bfill())<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  时期重采样 - Period</span><br><br>p =  pd.date_range(<span class="hljs-string">&#x27;2021&#x27;</span>,<span class="hljs-string">&#x27;2022&#x27;</span>,freq = <span class="hljs-string">&#x27;M&#x27;</span>)<br>ts =  pd.Series(np.arange(<span class="hljs-built_in">len</span>(p)),index = p)<br><span class="hljs-built_in">print</span>(ts)<br><br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;3M&#x27;</span>).<span class="hljs-built_in">sum</span>())<br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;15D&#x27;</span>).ffill())<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python+机器学习+数据分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo-Fluid博客主题美化</title>
    <link href="/2022/07/14/Hexo-Fluid%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"/>
    <url>/2022/07/14/Hexo-Fluid%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&ensp;&ensp;当安装搭配好Hexo博客后可以根据自己的爱好选择不同的主题对自己的博客进行装修，当然有很多主题供大家使用，在此我给大家推荐的是fluid主题，它是一款 Meterial Design风格的Hexo主题，以简约的设计帮助我们专注于写作。</p><p>fluid主题相较于其它主题的优势：<br>&ensp;&ensp;1.设计遵循简洁至上，同时具有轻快的体验，和优雅的颜值；<br>&ensp;&ensp;2.提供大量定制化配置项，使每个用户使用该主题都能具有独特的样式；<br>&ensp;&ensp;3.响应式页面，适配手机、平板等设备；</p><p>&ensp;&ensp;此文章只介绍fluid主题风格的优化，不涉及fluid的安装及配置，如果你想要安装配置fluid主题，可以<a href="https://fluid-dev.github.io/hexo-fluid-docs/start/">参考此链接</a>进行操作即可，接下来将会给大家介绍两种将优化效果引入主题的方法，大家自行选择喜欢的去使用即可。</p><h3 id="一、使用css-js引入的方法"><a href="#一、使用css-js引入的方法" class="headerlink" title="一、使用css/js引入的方法"></a>一、使用css/js引入的方法</h3><h3 id="1-新建css或者js文件"><a href="#1-新建css或者js文件" class="headerlink" title="1.新建css或者js文件"></a>1.新建css或者js文件</h3><h6 id="在此以js为例，在下载的主题文件夹下找到source-js-，在此文件夹下新建一个txt文件，把喜欢的优化风格代码粘贴进去，然后把文档扩展名修改成-js即可。配置好代码文件后打开主题配置文件-config-yml找到”custom-js”和”custom-css”下面进行引入。在此不细说，在2中会将说明如何新建的js文件引入主题。"><a href="#在此以js为例，在下载的主题文件夹下找到source-js-，在此文件夹下新建一个txt文件，把喜欢的优化风格代码粘贴进去，然后把文档扩展名修改成-js即可。配置好代码文件后打开主题配置文件-config-yml找到”custom-js”和”custom-css”下面进行引入。在此不细说，在2中会将说明如何新建的js文件引入主题。" class="headerlink" title="在此以js为例，在下载的主题文件夹下找到source/js/，在此文件夹下新建一个txt文件，把喜欢的优化风格代码粘贴进去，然后把文档扩展名修改成.js即可。配置好代码文件后打开主题配置文件_config.yml找到”custom_js”和”custom_css”下面进行引入。在此不细说，在2中会将说明如何新建的js文件引入主题。"></a>在此以js为例，在下载的主题文件夹下找到source/js/，在此文件夹下新建一个txt文件，把喜欢的优化风格代码粘贴进去，然后把文档扩展名修改成.js即可。配置好代码文件后打开主题配置文件_config.yml找到”custom_js”和”custom_css”下面进行引入。在此不细说，在2中会将说明如何新建的js文件引入主题。</h6><h3 id="2-把新建的js文件引入主题"><a href="#2-把新建的js文件引入主题" class="headerlink" title="2.把新建的js文件引入主题"></a>2.把新建的js文件引入主题</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">custom_js:<br>  - <span class="hljs-regexp">/js/</span>diy/timeDate.js<br>  - <span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/npm/</span>aplayer<span class="hljs-regexp">/dist/</span>APlayer.min.js  <span class="hljs-comment">#/APlayer#/APlayer依赖</span><br>  - <span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/m</span>etowolf<span class="hljs-regexp">/Metingjs@1.2/</span>dist<span class="hljs-regexp">/Meting.min.js  #/</span>APlayer依赖<br>  <span class="hljs-comment">#指定好.js的路径和安装依赖包</span><br>  <span class="hljs-comment">#引入css文件一样，除后缀和文件位置不同之外，其他操作一样</span><br></code></pre></td></tr></table></figure><h3 id="二、在主题源文件中引入美化特效"><a href="#二、在主题源文件中引入美化特效" class="headerlink" title="二、在主题源文件中引入美化特效"></a>二、在主题源文件中引入美化特效</h3><p>例如：在页脚插入运行时间<br><img src="https://img-blog.csdnimg.cn/img_convert/85798ebe77d01f79d839599456ad0786.png" alt=""><br>但是这样会大动代码量，每当主题修改或者升级后都得对代码修改一遍，太过繁琐，所以我推荐大家使用第一种方式进行美化操作。</p><h3 id="三、美化特效"><a href="#三、美化特效" class="headerlink" title="三、美化特效"></a>三、美化特效</h3><h3 id="JS类特效"><a href="#JS类特效" class="headerlink" title="JS类特效"></a>JS类特效</h3><h4 id="1-上升的气泡"><a href="#1-上升的气泡" class="headerlink" title="1.上升的气泡"></a>1.上升的气泡</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/3555765bffead797731dc552ef79fa83.png" alt=""><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/js/</span>qipao.js <span class="hljs-comment">#上升气泡</span><br></code></pre></td></tr></table></figure></p><h4 id="2-静态彩带-点击改变形状"><a href="#2-静态彩带-点击改变形状" class="headerlink" title="2.静态彩带+点击改变形状"></a>2.静态彩带+点击改变形状</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/f1689dd93e5b81645ef6d37cb6d6e644.png" alt=""><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/js/</span>jingtaisidai.js <span class="hljs-comment"># 静态彩带</span><br></code></pre></td></tr></table></figure></p><h4 id="3-动态黑色线条"><a href="#3-动态黑色线条" class="headerlink" title="3.动态黑色线条"></a>3.动态黑色线条</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/d08bc48555cf2b468a2fa56bd854cf77.png" alt=""><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/js/</span>xiantiao.js <span class="hljs-comment"># 动态黑色线条</span><br></code></pre></td></tr></table></figure></p><h4 id="4-小雪花飘落"><a href="#4-小雪花飘落" class="headerlink" title="4.小雪花飘落"></a>4.小雪花飘落</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/0494c6fdd9fd107dab05b27c263da668.png" alt=""><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/js/</span>xiaoxuehua.js <span class="hljs-comment"># 小雪花飘落</span><br></code></pre></td></tr></table></figure></p><h4 id="5-樱花飘落"><a href="#5-樱花飘落" class="headerlink" title="5.樱花飘落"></a>5.樱花飘落</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/29a4401d0545e738c220d8a8507c4565.png" alt=""><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/js/yi</span>nghua.js <span class="hljs-comment"># 樱花飘落</span><br></code></pre></td></tr></table></figure></p><h4 id="6-鼠标后跟随彩色星星"><a href="#6-鼠标后跟随彩色星星" class="headerlink" title="6.鼠标后跟随彩色星星"></a>6.鼠标后跟随彩色星星</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/081f5d0068dc3af0dc924ff3690c50ee.png" alt=""><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/js/</span>xiaoxingxing.js <span class="hljs-comment"># 鼠标跟随小星星</span><br></code></pre></td></tr></table></figure></p><h4 id="7-大雪花飘落"><a href="#7-大雪花飘落" class="headerlink" title="7.大雪花飘落"></a>7.大雪花飘落</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/c829a13989153cd8263ab0da523b8784.png" alt=""><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/js/</span>daxuehua.js <span class="hljs-comment"># 大雪花飘落</span><br></code></pre></td></tr></table></figure></p><h4 id="8-鼠标点击出小爱心"><a href="#8-鼠标点击出小爱心" class="headerlink" title="8.鼠标点击出小爱心"></a>8.鼠标点击出小爱心</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/f82d09498b2d766ea9917559346fd268.png" alt=""><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/js/</span>love.js <span class="hljs-comment"># 鼠标点击出小爱心❤</span><br></code></pre></td></tr></table></figure></p><h4 id="9-鼠标点击出爆炸效果"><a href="#9-鼠标点击出爆炸效果" class="headerlink" title="9.鼠标点击出爆炸效果"></a>9.鼠标点击出爆炸效果</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/2995d164006f2cd384ac81cc54ec8b6b.png" alt=""><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/js/</span>boom.js <span class="hljs-comment"># 鼠标点击爆炸效果</span><br><span class="hljs-regexp">//</span>cdn.bootcss.com<span class="hljs-regexp">/animejs/</span><span class="hljs-number">2.2</span>.<span class="hljs-number">0</span>/anime.min.js <span class="hljs-comment">#依赖</span><br></code></pre></td></tr></table></figure></p><h3 id="CSS类特效"><a href="#CSS类特效" class="headerlink" title="CSS类特效"></a>CSS类特效</h3><h4 id="1-头部打字机颜色效果渐变"><a href="#1-头部打字机颜色效果渐变" class="headerlink" title="1.头部打字机颜色效果渐变"></a>1.头部打字机颜色效果渐变</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/1357f1d03d5223a9401d4db121f7791c.png" alt=""><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/css/</span>toubudaziji.css <span class="hljs-comment"># 头部打字机颜色效果渐变</span><br></code></pre></td></tr></table></figure></p><h4 id="2-头部打字机颜色"><a href="#2-头部打字机颜色" class="headerlink" title="2.头部打字机颜色"></a>2.头部打字机颜色</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/1357f1d03d5223a9401d4db121f7791c.png" alt=""><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/css/</span>daziyanse.css<span class="hljs-comment"># 头部打字机颜色</span><br></code></pre></td></tr></table></figure></p><h4 id="3-滚动条颜色"><a href="#3-滚动条颜色" class="headerlink" title="3.滚动条颜色"></a>3.滚动条颜色</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/f3bcb50723070099eacb781faf6aef3a.png" alt=""><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/css/gu</span>ndongtiao.css<span class="hljs-comment"># 滚动条颜色</span><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>Hexo文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github的修改和上传</title>
    <link href="/2021/12/07/Github%E7%9A%84%E4%BF%AE%E6%94%B9%E5%92%8C%E4%B8%8A%E4%BC%A0/"/>
    <url>/2021/12/07/Github%E7%9A%84%E4%BF%AE%E6%94%B9%E5%92%8C%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="【vscode】-【github】-【GithubDesktop】"><a href="#【vscode】-【github】-【GithubDesktop】" class="headerlink" title="【vscode】+【github】+【GithubDesktop】"></a>【vscode】+【github】+【GithubDesktop】</h1><ul><li>相关工具下载链接<br><a href="https://desktop.github.com/">Github Desktop</a><br><a href="https://code.visualstudio.com/">Vs Code</a><br><a href="https://github.com/chentao320/vscode-github-github-desktop">github界面</a></li><li>首先准备一个github账号</li><li>点开github主界面的右上角的 “+”后点击 New repository（新建一个仓库）</li><li>输入自己的仓库名字和描述，直接创建仓库即可</li><li>打开的GitHub Desktop,点击左上角file中的clone repository。<br><img src="https://note.youdao.com/yws/api/personal/file/WEBa0e93433bc7324eb7e9518cc91f2c55a?method=download&amp;shareKey=7d270568c24d7a2e2edb2fba4e11f5b8" alt=""></li><li>选择要编辑的仓库位置<br><img src="https://note.youdao.com/yws/api/personal/file/WEBbb72e523a3a2fae0f37ca601e91c2696?method=download&amp;shareKey=356ade6bcad7bb1310567731c63942f5" alt=""></li><li>第一次需要clone进去，从第二次开始直接open就行</li><li>clone之后，会出现如下界面，点击箭头所指的位置即可<br><img src="https://note.youdao.com/yws/api/personal/file/WEBe477ce88d6b9dd041fa39e21b3a34c0b?method=download&amp;shareKey=3d87bcd12bd18044947c57d8a19083c7" alt=""></li><li>点击之后就会跳转到Vs Code编辑器中</li><li>首先安装最基本的markdown语法编译<br><img src="https://note.youdao.com/yws/api/personal/file/WEBce0eafd62283107f6514d9c6e41c4e28?method=download&amp;shareKey=e869a27bcfea7ba84fc3e63a1f341409" alt=""></li><li>右击代码界面，会出现对应的运行结果界面，而且还是实时的<br><img src="https://note.youdao.com/yws/api/personal/file/WEB7e7c42c8f451bd385258ee890e391ab9?method=download&amp;shareKey=52edb6fab55cf1fbdefb1f32b9562842" alt=""></li><li>从上面那个图上可以看到左上角有个1，代表没有上传和保存</li><li>更改完之后直接保存，然后点开GitHub Desktop</li><li>可以看到有一些变绿的代码，代码更新改变的。</li><li>点击左下角的Commit to main，和github里面一样。<br><img src="https://note.youdao.com/yws/api/personal/file/WEBdcbb23e569b09b25d8903d3be5026e43?method=download&amp;shareKey=4073297cc090e1cd5cf49d9d82964728" alt=""></li><li>最终把更改后的推送到github仓库中即可<br><img src="https://note.youdao.com/yws/api/personal/file/WEB6ea033c92dedb434fe74c7a903488dd3?method=download&amp;shareKey=4469b857e55f4057b7007fa4739e170d" alt=""></li></ul><h3 id="最后补充一下，当我们要上传一个文件的时候，我们可能会遇到下面几个问题"><a href="#最后补充一下，当我们要上传一个文件的时候，我们可能会遇到下面几个问题" class="headerlink" title="最后补充一下，当我们要上传一个文件的时候，我们可能会遇到下面几个问题"></a>最后补充一下，当我们要上传一个文件的时候，我们可能会遇到下面几个问题</h3><ul><li>1、首先你需要把压缩包解压，这样不会在Vscode中左上角的资源管理器中看到你的文件信息，但是只读文件。</li><li>出现上述问题自主解决，因为解决方法很多。</li><li>2、在Github Desktop中你会看到如下界面，无法进行commit：<br><img src="https://note.youdao.com/yws/api/personal/file/WEB66c2683cd12d4187c3d2eed4d6c63486?method=download&amp;shareKey=5613d53765b9decc4072759b47e94edc" alt=""></li><li>此时你会发现左下角的Description没有写任何东西。</li><li>需要记住上传文件的时候Description部分必须写。随便写点就行。</li></ul>]]></content>
    
    
    <categories>
      
      <category>github的修改与上传</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github的修改与上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python基础学习</title>
    <link href="/2021/12/07/python%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/12/07/python%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="一、python函数"><a href="#一、python函数" class="headerlink" title="一、python函数"></a>一、python函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#自定义函数</span><br>var = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入一个数字：&#x27;</span>))<br><span class="hljs-keyword">if</span> var &gt;<span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;正数&#x27;</span>)<br><span class="hljs-keyword">elif</span> var == <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;为零&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;负数&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">var = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入一个数字&#x27;</span>))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">x</span>):</span><br>   <span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;正数&#x27;</span>)<br>   <span class="hljs-keyword">elif</span> x == <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;为零&#x27;</span>)<br>   <span class="hljs-keyword">else</span>:<br>    <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;负数&quot;</span>)<br>f(var)<br>var2 = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输第二个数字&#x27;</span>))<br>f(var2)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#    关于return</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f1</span>(<span class="hljs-params">x</span>):</span><br>    y = <span class="hljs-number">2</span>**x<br>    <span class="hljs-keyword">return</span> y    <br><span class="hljs-built_in">print</span>(f1(<span class="hljs-number">5</span>))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">lst1,lst2 = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]</span>):</span><br>    m = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(lst1)):<br>        m.append([lst1[i],lst2[i]])<br>    <span class="hljs-keyword">return</span>(m)<br>a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(f(a))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#可变参数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">*x</span>):</span><br>    <span class="hljs-keyword">return</span>(x)<br><span class="hljs-built_in">print</span>(f(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(f(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>)))    <span class="hljs-comment">#元祖类型</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#拆分字符串</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">*x</span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> x:<br>        <span class="hljs-built_in">print</span>(i)<br>x_input = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入一个字符串：&quot;</span>)<br>f(x_input)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  求平均值  #</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">*x</span>):</span><br>    s = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> x:<br>        s= s+ i<br>    <span class="hljs-keyword">return</span>(s/<span class="hljs-built_in">len</span>(x))<br><span class="hljs-built_in">print</span>(f(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#和下方相关</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">m</span>):</span><br>    m = <span class="hljs-string">&#x27;呵呵&#x27;</span><br>    <span class="hljs-built_in">print</span>(m)<br>    <span class="hljs-keyword">return</span>(m)<br>a = <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(a,f(a))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#global语句   --  把局部变量变成全局变量</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>():</span><br>    <span class="hljs-keyword">global</span> a<br>    a = <span class="hljs-string">&#x27;haha&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;函数内转变为全局变量：%s&quot;</span>%a)<br>        <br>a = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入一个数字：&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;输入变量值：%s&quot;</span>%a)<br>f()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#匿名函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun</span>(<span class="hljs-params">a,b,c</span>):</span><br>    <span class="hljs-keyword">return</span> a+b+c<br><span class="hljs-built_in">print</span>(fun(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><br>f = <span class="hljs-keyword">lambda</span> a,b,c:a+b+c<br><span class="hljs-built_in">print</span>(f(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  lamda 求元素个数</span><br>count = <span class="hljs-keyword">lambda</span> lst:<span class="hljs-built_in">len</span>(lst)<br><span class="hljs-built_in">print</span>(count([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">*var</span>):</span><br>    lst = <span class="hljs-built_in">list</span>(var)<br>    lst_re = <span class="hljs-built_in">sorted</span>(lst,reverse = <span class="hljs-literal">True</span>)   <span class="hljs-comment">#从大到小排列</span><br>    <span class="hljs-keyword">return</span> lst_re<br><span class="hljs-built_in">print</span>(f(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">33</span>,<span class="hljs-number">345</span>,<span class="hljs-number">55</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">*scores</span>):</span><br>    s = <span class="hljs-number">0</span><br>    m = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> scores:<br>        <span class="hljs-keyword">if</span> i&gt;<span class="hljs-number">90</span>:<br>            m.append(<span class="hljs-string">&#x27;A&#x27;</span>)<br>        <span class="hljs-keyword">elif</span> i&gt;<span class="hljs-number">60</span> <span class="hljs-keyword">and</span> i&lt;<span class="hljs-number">90</span>:<br>            m.append(<span class="hljs-string">&#x27;B&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            m.append(<span class="hljs-string">&#x27;C&#x27;</span>)<br>        s = s +i<br>    mean = s/<span class="hljs-built_in">len</span>(scores)<br>    <span class="hljs-keyword">return</span>([m,mean])<br>result = f(<span class="hljs-number">89</span>,<span class="hljs-number">92</span>,<span class="hljs-number">100</span>,<span class="hljs-number">62</span>,<span class="hljs-number">88</span>)<br><span class="hljs-built_in">print</span>(result[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(result[<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#   判断是不是特定类型的</span><br><span class="hljs-comment">#st = ....</span><br><span class="hljs-comment">#st.isalpha()     字母</span><br><span class="hljs-comment">#st.isspace()     空格</span><br><span class="hljs-comment">#st.isdigit()     数字</span><br></code></pre></td></tr></table></figure><h3 id="二、python数据读写"><a href="#二、python数据读写" class="headerlink" title="二、python数据读写"></a>二、python数据读写</h3><h4 id="1-txt文本数据读取"><a href="#1-txt文本数据读取" class="headerlink" title="1. txt文本数据读取"></a>1. txt文本数据读取</h4><h6 id="pandas可以使用函数read-table-读取txt文件"><a href="#pandas可以使用函数read-table-读取txt文件" class="headerlink" title="pandas可以使用函数read_table()读取txt文件"></a>pandas可以使用函数read_table()读取txt文件</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br>    <span class="hljs-comment"># 根据正则解析来辨识间隔符号</span><br>    txtframe = pd.read_table(<span class="hljs-string">&#x27;./Data/tmp_4.txt&#x27;</span>,sep=<span class="hljs-string">r&#x27;\s+&#x27;</span>) <br>    <span class="hljs-built_in">print</span>(txtframe, <span class="hljs-string">&quot;\n-----*-----&quot;</span>)<br>    txtframe = pd.read_table(<span class="hljs-string">&#x27;./Data/tmp_4.txt&#x27;</span>,sep=<span class="hljs-string">r&#x27;\s+&#x27;</span>,header=<span class="hljs-literal">None</span>,engine=<span class="hljs-string">&#x27;python&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(txtframe, <span class="hljs-string">&quot;\n-----*-----&quot;</span>)<br>    <span class="hljs-comment"># 使用skiprows选项，可以排除多余的行。把要排除的行的行号放到数组中，赋给该选项即可。</span><br>    txtframe = pd.read_table(<span class="hljs-string">&#x27;./Data/tmp_4.txt&#x27;</span>,sep=<span class="hljs-string">r&#x27;\s+&#x27;</span>,skiprows=[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br>    txtframe = txtframe.reset_index(drop=<span class="hljs-literal">True</span>)<br>    <span class="hljs-built_in">print</span>(txtframe) <br></code></pre></td></tr></table></figure><h6 id="由于没找到pandas对txt文件的写入，但是想想应该和写入csv文件大同小异。这里补充一下numpy对txt文件的处理。"><a href="#由于没找到pandas对txt文件的写入，但是想想应该和写入csv文件大同小异。这里补充一下numpy对txt文件的处理。" class="headerlink" title="由于没找到pandas对txt文件的写入，但是想想应该和写入csv文件大同小异。这里补充一下numpy对txt文件的处理。"></a>由于没找到pandas对txt文件的写入，但是想想应该和写入csv文件大同小异。这里补充一下numpy对txt文件的处理。</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>data = np.loadtxt(<span class="hljs-string">&#x27;./Data/tmp_2.csv&#x27;</span>,delimiter=<span class="hljs-string">&#x27;,&#x27;</span>)<br><span class="hljs-built_in">print</span>(data)<br>np.savetxt(<span class="hljs-string">&#x27;./Data/tmp_7.txt&#x27;</span>,data,fmt=<span class="hljs-string">&#x27;%d&#x27;</span>,delimiter=<span class="hljs-string">&#x27;,&#x27;</span>,newline=<span class="hljs-string">&#x27;\n&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="2-csv文本数据读写"><a href="#2-csv文本数据读写" class="headerlink" title="2. csv文本数据读写"></a>2. csv文本数据读写</h4><h6 id="pandas支持多种数据读写方法，这里列举一些方法。"><a href="#pandas支持多种数据读写方法，这里列举一些方法。" class="headerlink" title="pandas支持多种数据读写方法，这里列举一些方法。"></a>pandas支持多种数据读写方法，这里列举一些方法。</h6><p><img src="https://i.postimg.cc/B6P7VpvY/0-C-J8-H2-SXF-RTMSXYLYY8-D.png" alt=""></p><h6 id="pandas中read-csv-和to-csv-可以处理csv文件"><a href="#pandas中read-csv-和to-csv-可以处理csv文件" class="headerlink" title="pandas中read_csv()和to_csv()可以处理csv文件"></a>pandas中read_csv()和to_csv()可以处理csv文件</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br>a = np.arange(<span class="hljs-number">1</span>,<span class="hljs-number">26</span>,<span class="hljs-number">1</span>)<br>a = a.reshape((<span class="hljs-number">5</span>,<span class="hljs-number">5</span>))<br><br>b = pd.DataFrame(a,columns=[<span class="hljs-string">&#x27;i1&#x27;</span>,<span class="hljs-string">&#x27;i2&#x27;</span>,<span class="hljs-string">&#x27;i3&#x27;</span>,<span class="hljs-string">&#x27;i4&#x27;</span>,<span class="hljs-string">&#x27;i5&#x27;</span>])<br><span class="hljs-comment">#！！！写入文件</span><br><br>b.to_csv(<span class="hljs-string">&#x27;./Data/tmp_1.csv&#x27;</span>)<br><br><span class="hljs-comment"># 使用index和 header选项，把它们的值设置为False,可取消默认写入index和header</span><br>b.to_csv(<span class="hljs-string">&#x27;./Data/tmp_2.csv&#x27;</span>,index =<span class="hljs-literal">False</span>,header=<span class="hljs-literal">False</span>)<br><br><span class="hljs-comment"># 可以用to_csv()函数的na_rep选项把空字段替换为你需要的值。常用值有NULL、0和NaN</span><br>b.to_csv(<span class="hljs-string">&#x27;./Data/tmp_3.csv&#x27;</span>,na_rep=<span class="hljs-string">&quot;空&quot;</span>)<br><br><span class="hljs-comment">#！！！读取文件</span><br><br>csvframe = pd.read_csv(<span class="hljs-string">&#x27;./Data/tmp_1.csv&#x27;</span>)<br><span class="hljs-built_in">print</span>(csvframe, <span class="hljs-string">&quot;\n-----*-----&quot;</span>)<br>csvframe = pd.read_table(<span class="hljs-string">&#x27;./Data/tmp_1.csv&#x27;</span>,sep=<span class="hljs-string">&#x27;,&#x27;</span>)<br><span class="hljs-built_in">print</span>(csvframe, <span class="hljs-string">&quot;\n-----*-----&quot;</span>)<br><span class="hljs-comment"># 设置header为None，表示文件没有表头，第一行为数据，添加默认表头</span><br>csvframe = pd.read_csv(<span class="hljs-string">&#x27;./Data/tmp_2.csv&#x27;</span>,header=<span class="hljs-literal">None</span>) <br><span class="hljs-built_in">print</span>(csvframe, <span class="hljs-string">&quot;\n-----*-----&quot;</span>)<br><span class="hljs-comment"># 指定表头。我们假设文件中有m列数据，设定的names有n个列名。</span><br><span class="hljs-comment"># 如果m&gt;n，默认从最后一列（右侧）开始匹配，多余的右侧第一列作为index，其余数据舍弃</span><br><span class="hljs-comment"># 如果m==n，正常匹配</span><br><span class="hljs-comment"># 如果m&lt;n，默认从第一列（左侧）开始匹配，多余的列名全部赋值Nan</span><br>csvframe = pd.read_csv(<span class="hljs-string">&#x27;./Data/tmp_2.csv&#x27;</span>,names=[<span class="hljs-string">&#x27;d1&#x27;</span>,<span class="hljs-string">&#x27;d2&#x27;</span>,<span class="hljs-string">&#x27;d3&#x27;</span>,<span class="hljs-string">&#x27;d4&#x27;</span>,<span class="hljs-string">&#x27;d5&#x27;</span>,<span class="hljs-string">&#x27;d6&#x27;</span>]) <br><span class="hljs-built_in">print</span>(csvframe, <span class="hljs-string">&quot;\n-----*-----&quot;</span>)<br><span class="hljs-comment">#等级索引,可以指定以某一列为索引，支持多列索引。</span><br>csvframe = pd.read_csv(<span class="hljs-string">&#x27;./Data/tmp_3.csv&#x27;</span>,index_col=[<span class="hljs-string">&#x27;i1&#x27;</span>,<span class="hljs-string">&#x27;i2&#x27;</span>]) <br><span class="hljs-built_in">print</span>(csvframe, <span class="hljs-string">&quot;\n-----*-----&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="3-excel文本数据读写"><a href="#3-excel文本数据读写" class="headerlink" title="3. excel文本数据读写"></a>3. excel文本数据读写</h4><h6 id="使用xlrd读取excel读取数据"><a href="#使用xlrd读取excel读取数据" class="headerlink" title="使用xlrd读取excel读取数据"></a>使用xlrd读取excel读取数据</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> xlrd<br><br><span class="hljs-comment"># 设置路径</span><br>path = <span class="hljs-string">&#x27;./Data/1.xlsx&#x27;</span><br><span class="hljs-comment"># 打开execl</span><br>workbook = xlrd.open_workbook(path)<br><br><span class="hljs-comment"># 输出Excel文件中所有sheet的名字</span><br><span class="hljs-built_in">print</span>(workbook.sheet_names())<br><br><span class="hljs-comment"># 根据sheet索引或者名称获取sheet内容</span><br>Data_sheet = workbook.sheets()[<span class="hljs-number">0</span>]  <span class="hljs-comment"># 通过索引获取</span><br><span class="hljs-comment"># Data_sheet = workbook.sheet_by_index(0)  # 通过索引获取</span><br><span class="hljs-comment"># Data_sheet = workbook.sheet_by_name(u&#x27;名称&#x27;)  # 通过名称获取</span><br><br><br><span class="hljs-built_in">print</span>(Data_sheet.name)  <span class="hljs-comment"># 获取sheet名称</span><br>rowNum = Data_sheet.nrows  <span class="hljs-comment"># sheet行数</span><br>colNum = Data_sheet.ncols  <span class="hljs-comment"># sheet列数</span><br><br><span class="hljs-comment"># 获取所有单元格的内容</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(rowNum):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(colNum):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0&#125; &#x27;</span>.<span class="hljs-built_in">format</span>(Data_sheet.cell_value(i, j)))<br><br><span class="hljs-comment"># 获取整行和整列的值（列表）</span><br>rows = Data_sheet.row_values(<span class="hljs-number">0</span>)  <span class="hljs-comment"># 获取第一行内容</span><br>cols = Data_sheet.col_values(<span class="hljs-number">1</span>)  <span class="hljs-comment"># 获取第二列内容</span><br><span class="hljs-built_in">print</span> (rows)<br><span class="hljs-built_in">print</span> (cols)<br><br><span class="hljs-comment"># 获取单元格内容</span><br>cell_A1 = Data_sheet.cell(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>).value<br>cell_B1 = Data_sheet.row(<span class="hljs-number">0</span>)[<span class="hljs-number">1</span>].value  <span class="hljs-comment"># 使用行索引</span><br>cell_A2 = Data_sheet.col(<span class="hljs-number">0</span>)[<span class="hljs-number">1</span>].value  <span class="hljs-comment"># 使用列索引</span><br><span class="hljs-built_in">print</span>(cell_A1, cell_B1, cell_A2)<br><br><span class="hljs-comment"># 获取单元格内容的数据类型</span><br><span class="hljs-comment"># ctype:0 empty,1 string, 2 number, 3 date, 4 boolean, 5 error</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;cell(0,0)数据类型:&#x27;</span>, Data_sheet.cell(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>).ctype)<br><br><span class="hljs-comment"># 获取单元格内容为日期的数据</span><br>date_value = xlrd.xldate_as_tuple(Data_sheet.cell_value(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>),workbook.datemode)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(date_value), date_value)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d:%d:%d&#x27;</span> % (date_value[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]))<br></code></pre></td></tr></table></figure><h3 id="三、Python条件及判断循环语句"><a href="#三、Python条件及判断循环语句" class="headerlink" title="三、Python条件及判断循环语句"></a>三、Python条件及判断循环语句</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#基础的条件判断</span><br>age = <span class="hljs-number">16</span><br><span class="hljs-keyword">if</span> age &lt; <span class="hljs-number">18</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;小于18周岁&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#输入函数Input（）</span><br>score = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入成绩：\n&quot;</span>)<br><span class="hljs-built_in">print</span>(score,<span class="hljs-built_in">type</span>(score))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;该学生的成绩为：%s&#x27;</span>%score)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#if-else(可以是多个if-else)</span><br>age = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;年龄为：&quot;</span>))<br><span class="hljs-keyword">if</span> age &lt; <span class="hljs-number">18</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;小于18周岁&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;成年了&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;finished!&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#单语句多条件判断：  and or</span><br>num = <span class="hljs-number">5</span><br><span class="hljs-keyword">if</span> num &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> num &lt;= <span class="hljs-number">10</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>) <br>    <br>num = <span class="hljs-number">10</span><br><span class="hljs-keyword">if</span> num &lt;=<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> num &gt;=<span class="hljs-number">10</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#for循环语句</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br> <br>lst = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> lst[:<span class="hljs-number">5</span>]:<br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#嵌套循环(不要用太多的循环)</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        <span class="hljs-built_in">print</span>(i,j)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">######   等差数列   #####</span><br>a = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入首相：&quot;</span>))<br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入项数：&quot;</span>))<br>d = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入公差&quot;</span>))<br>s = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    An = a + d*i<br>    s = s + An<br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">###  形成字典   ###</span><br>lst1 = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]<br>lst2 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><br>m = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    lsti = [lst1[i],lst2[i]]<br>    <span class="hljs-built_in">print</span>(lsti)<br>    m.append(lsti)<br><span class="hljs-built_in">print</span>(m)<br>dic = <span class="hljs-built_in">dict</span>(m)<br><span class="hljs-built_in">print</span>(dic)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#while循环</span><br>count = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> count &lt;<span class="hljs-number">9</span>:<br>    <span class="hljs-built_in">print</span>(count)<br>    count = count+<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># while -  else语句</span><br>count = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> count &lt; <span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">print</span>(count,<span class="hljs-string">&quot;小于5&quot;</span>)<br>    count = count + <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(count,<span class="hljs-string">&quot;大于5&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#循环控制语句</span><br><span class="hljs-comment">#break语句（跳出整个循环）</span><br>s = <span class="hljs-number">0</span><br>n = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> n&gt;<span class="hljs-number">0</span>:<br>    s = s + n<br>    n = n+<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> n ==<span class="hljs-number">20</span>:<br>      <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#continue语句(跳出本次循环，继续下一次循环)</span><br>s = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">if</span> i%<span class="hljs-number">2</span> ==<span class="hljs-number">0</span>:<br>        s = s + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-built_in">print</span>(i)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;第%i次循环&quot;</span>%(i/<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;结果为;%i&quot;</span> %s)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#pass语句(不中断也不跳过)</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;python&#x27;</span>:<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-string">&#x27;h&#x27;</span>:<br>       <span class="hljs-keyword">pass</span><br>       <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;当前字母是 : h，但是我pass了&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;当前字母是 :&#x27;</span>,i)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python+机器学习+数据分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>控制台运行py文件问题</title>
    <link href="/2021/12/07/python%E6%96%87%E4%BB%B6%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E9%97%AE%E9%A2%98/"/>
    <url>/2021/12/07/python%E6%96%87%E4%BB%B6%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="cmd命令控制台输出py文件问题"><a href="#cmd命令控制台输出py文件问题" class="headerlink" title="cmd命令控制台输出py文件问题"></a>cmd命令控制台输出py文件问题</h1><h1 id="1、通过python命令运行py文件"><a href="#1、通过python命令运行py文件" class="headerlink" title="1、通过python命令运行py文件"></a>1、通过python命令运行py文件</h1><ul><li>问题：仅仅一个简单的print输出在控制台中没有输出结果，解决方法如下<h1 id="2、检查是否是使用的sublime编写的py文件"><a href="#2、检查是否是使用的sublime编写的py文件" class="headerlink" title="2、检查是否是使用的sublime编写的py文件"></a>2、检查是否是使用的sublime编写的py文件</h1></li><li>sublime编写的py文件运行需要配置python环境，所以检查是否只是在初学python时只是安装了anaconda，没有单独安装python<h1 id="3、检查python是否安装"><a href="#3、检查python是否安装" class="headerlink" title="3、检查python是否安装"></a>3、检查python是否安装</h1></li><li>在环境变量中输入python看是否有输出，无输出则代表python环境变量没有配好，需要把python安装路径加到Path中<h1 id="4、查看anaconda"><a href="#4、查看anaconda" class="headerlink" title="4、查看anaconda"></a>4、查看anaconda</h1></li><li>查看自己安装的anaconda中知否有内置的IPython环境，这样也可以正常运行</li></ul>]]></content>
    
    
    <categories>
      
      <category>python问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决hexo报错spwan failed</title>
    <link href="/2021/12/07/%E8%A7%A3%E5%86%B3hexo%E6%8A%A5%E9%94%99spwan%20failed/"/>
    <url>/2021/12/07/%E8%A7%A3%E5%86%B3hexo%E6%8A%A5%E9%94%99spwan%20failed/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="解决hexo报错spwan-failed"><a href="#解决hexo报错spwan-failed" class="headerlink" title="解决hexo报错spwan failed"></a>解决hexo报错spwan failed</h1><h4 id="报错1："><a href="#报错1：" class="headerlink" title="报错1："></a>报错1：</h4><p><img src="https://s2.loli.net/2022/03/15/sZkxnzA6Vv3jSce.png" alt="_66NF~4~____DWH4W__399W.png"></p><h4 id="解决方法如下："><a href="#解决方法如下：" class="headerlink" title="解决方法如下："></a>解决方法如下：</h4><ul><li>按照如下图操作：<br><img src="https://s2.loli.net/2022/03/15/5nF2LVqmNzctEoD.png" alt="O9C_TI_50U9ZE_N2V8PQ~@I.png"><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 进入hexo根目录下</span><br>rm -rf <span class="hljs-string">.deploy_git/</span><br>git config <span class="hljs-params">--global</span> core.autocrlf <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></li><li>最后重新生成提交<figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">hexo clean <span class="hljs-variable">&amp;&amp;</span> hexo g <span class="hljs-variable">&amp;&amp;</span> hexo d<br></code></pre></td></tr></table></figure>在提交的时候有可能会出现下面的错误：<h4 id="报错2："><a href="#报错2：" class="headerlink" title="报错2："></a>报错2：</h4><img src="https://s2.loli.net/2022/03/15/FHb3nr2m7AtyJvs.png" alt="`_E7AGK7O7JYYJ__@_HUFQ1.png"><h4 id="解决方法如下：-1"><a href="#解决方法如下：-1" class="headerlink" title="解决方法如下："></a>解决方法如下：</h4></li><li>这是因为你的github设置出了问题</li><li>浏览器进入github.com</li><li>登陆github -&gt; “+” -&gt;settings</li><li>后续操作如下图：<br><img src="https://s2.loli.net/2022/03/15/rcsGHuLNnVWSly6.png" alt="888.png"></li><li>再把下面图中的两个设置取消勾选<br><img src="https://s2.loli.net/2022/03/15/5c1SRyixemqB24D.png" alt="999.png"><br><img src="https://s2.loli.net/2022/03/15/1VstJCeSovcOy3a.png" alt="000.png"><br>通过上面的操作，在重新运行下面代码就大功告成了，再刷新页面应该就显示提交的内容了<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 重新生成提交</span><br>hexo clean <span class="hljs-meta">&amp;&amp; hexo g &amp;&amp; hexo d</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Hexo文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>colab</title>
    <link href="/2021/12/06/colab/"/>
    <url>/2021/12/06/colab/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="colab"><a href="#colab" class="headerlink" title="colab"></a>colab</h1><h3 id="1-首先需要一个谷歌账号"><a href="#1-首先需要一个谷歌账号" class="headerlink" title="1.首先需要一个谷歌账号"></a>1.首先需要一个谷歌账号</h3><ul><li>注册的时候可能会遇到号码无法进行验证的情况<br><img src="https://note.youdao.com/yws/api/personal/file/WEBa0668ffc1ca2c15b97f9f9ca83bb29d1?method=download&amp;shareKey=8059a359abd1456eb147a7ce3ca3da7e" alt=""></li><li>因为Google现在不怎么支持中文，所以我们需要把谷歌的英文上移，同时使用英文并且删除中文，只保留英文语言。</li></ul><h3 id="2-查看基本配置"><a href="#2-查看基本配置" class="headerlink" title="2.查看基本配置"></a>2.查看基本配置</h3><ul><li>查看pytorch的版本、cuda是否可用</li><li>查看需要的工具版本<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import torch<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(torch.__version__)</span></span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(torch.cuda.is_available)</span></span><br></code></pre></td></tr></table></figure></li></ul><h3 id="3-挂载"><a href="#3-挂载" class="headerlink" title="3.挂载"></a>3.挂载</h3><h5 id="因为colab只是一个远程的、可以无偿给我们提供GPU支持的主机，而不是本地的存储支持。所以我们需要把我们要运行的代码（谷歌云盘）挂载到远程主机上。"><a href="#因为colab只是一个远程的、可以无偿给我们提供GPU支持的主机，而不是本地的存储支持。所以我们需要把我们要运行的代码（谷歌云盘）挂载到远程主机上。" class="headerlink" title="因为colab只是一个远程的、可以无偿给我们提供GPU支持的主机，而不是本地的存储支持。所以我们需要把我们要运行的代码（谷歌云盘）挂载到远程主机上。"></a>因为colab只是一个远程的、可以无偿给我们提供GPU支持的主机，而不是本地的存储支持。所以我们需要把我们要运行的代码（谷歌云盘）挂载到远程主机上。</h5><ul><li>挂载远程主机<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">from</span> google.colab <span class="hljs-keyword">import</span> drive<br>drive.mount(<span class="hljs-string">&quot;/content/drive)</span><br></code></pre></td></tr></table></figure></li><li>这一步我们需要登录谷歌账号复制链接<br><img src="https://note.youdao.com/yws/api/personal/file/WEB298e801d0a3acba2667fe7ba8c3e6b8c?method=download&amp;shareKey=49b1dbf0ab5675af3b63016127b1f7db" alt=""></li><li>更改运行目录</li><li>因为程序的运行需要在相同的目录下才能相互使用和运行，所以需要把要运行的程序放到同一个目录下。在这一步最好都运行一次，有时候看着是在一个目录下，但事实上在不同的地方。<br><img src="https://note.youdao.com/yws/api/personal/file/WEB4769a1f4d67bdd6fa62e8c71a896ccab?method=download&amp;shareKey=adfef04bbd9d574cc7ac43aadc1674c7" alt=""><h3 id="4-同级文件调用"><a href="#4-同级文件调用" class="headerlink" title="4.同级文件调用"></a>4.同级文件调用</h3><h5 id="当我们在运行一个程序时，有时候需要调用模型模块儿来进行训练，我们只在谷歌云盘上更改后缀，单纯地把-ipynb文件更改成-py文件，从表面上看确实已经成为python文件了。但是事实上colab只能更改-ipynb文件的内容，所以更改后的文件仍然是-ipynb文件。"><a href="#当我们在运行一个程序时，有时候需要调用模型模块儿来进行训练，我们只在谷歌云盘上更改后缀，单纯地把-ipynb文件更改成-py文件，从表面上看确实已经成为python文件了。但是事实上colab只能更改-ipynb文件的内容，所以更改后的文件仍然是-ipynb文件。" class="headerlink" title="当我们在运行一个程序时，有时候需要调用模型模块儿来进行训练，我们只在谷歌云盘上更改后缀，单纯地把.ipynb文件更改成.py文件，从表面上看确实已经成为python文件了。但是事实上colab只能更改.ipynb文件的内容，所以更改后的文件仍然是.ipynb文件。"></a>当我们在运行一个程序时，有时候需要调用模型模块儿来进行训练，我们只在谷歌云盘上更改后缀，单纯地把.ipynb文件更改成.py文件，从表面上看确实已经成为python文件了。但是事实上colab只能更改.ipynb文件的内容，所以更改后的文件仍然是.ipynb文件。</h5><h5 id="要想把-ipynb文件真正变成-py文件，可以先把文件下载到本地，在本地上更改后缀，然后在挂到谷歌云盘当中，这样就可以调用了。"><a href="#要想把-ipynb文件真正变成-py文件，可以先把文件下载到本地，在本地上更改后缀，然后在挂到谷歌云盘当中，这样就可以调用了。" class="headerlink" title="要想把.ipynb文件真正变成.py文件，可以先把文件下载到本地，在本地上更改后缀，然后在挂到谷歌云盘当中，这样就可以调用了。"></a>要想把.ipynb文件真正变成.py文件，可以先把文件下载到本地，在本地上更改后缀，然后在挂到谷歌云盘当中，这样就可以调用了。</h5><h3 id="5-将kaggle的数据集下载到colab上使用"><a href="#5-将kaggle的数据集下载到colab上使用" class="headerlink" title="5.将kaggle的数据集下载到colab上使用"></a>5.将kaggle的数据集下载到colab上使用</h3><h5 id="kaggle上有很多竞赛数据集，但是kaggle的GPU使用时间是有限的，但是colab没有时间限制。如果从本地上传就很慢，所以我们可以把kaggle上的数据集传到（下载）到colab上去使用。"><a href="#kaggle上有很多竞赛数据集，但是kaggle的GPU使用时间是有限的，但是colab没有时间限制。如果从本地上传就很慢，所以我们可以把kaggle上的数据集传到（下载）到colab上去使用。" class="headerlink" title="kaggle上有很多竞赛数据集，但是kaggle的GPU使用时间是有限的，但是colab没有时间限制。如果从本地上传就很慢，所以我们可以把kaggle上的数据集传到（下载）到colab上去使用。"></a>kaggle上有很多竞赛数据集，但是kaggle的GPU使用时间是有限的，但是colab没有时间限制。如果从本地上传就很慢，所以我们可以把kaggle上的数据集传到（下载）到colab上去使用。</h5></li><li>首先需要一个kaggle账号</li><li>下载并更新kaggle <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">!pip <span class="hljs-keyword">install</span> kaggle<br></code></pre></td></tr></table></figure><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">!pip</span> <span class="hljs-comment">install</span> --<span class="hljs-comment">upgrade</span> --<span class="hljs-comment">force</span><span class="hljs-literal">-</span><span class="hljs-comment">reinstall</span> --<span class="hljs-comment">no</span><span class="hljs-literal">-</span><span class="hljs-comment">deps</span> <span class="hljs-comment">kaggle</span><br></code></pre></td></tr></table></figure></li><li>进入kaggle，进入你的账号信息</li><li>往下拖，在API的位置有个Create New API Token，点击后会自动下载一个json文件，打开会出现username和key信息。<br><img src="https://img-blog.csdnimg.cn/20200419131732836.png" alt=""><br><img src="https://note.youdao.com/yws/api/personal/file/WEBfb25bde78e6f9c3aef09e8e2a7d0fc9c?method=download&amp;shareKey=e9d444d9a3d9d5829e7aa62b41b2a767" alt=""></li><li>输入以下代码,把对应的username和key填入即可<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">import</span> json<br>token = &#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;xxxxx&quot;</span>,<span class="hljs-string">&quot;key&quot;</span>:<span class="hljs-string">&quot;xxxxx&quot;</span>&#125;<br>with open(<span class="hljs-string">&#x27;/content/kaggle.json&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) as <span class="hljs-keyword">file</span>:<br>  json.<span class="hljs-keyword">dump</span>(token, <span class="hljs-keyword">file</span>)<br></code></pre></td></tr></table></figure>*然后再依次输入一下代码<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">!mkdir -p ~/.kaggle<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">!cp <span class="hljs-regexp">/content/</span>kaggle.json ~<span class="hljs-regexp">/.kaggle/</span><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">!chmod <span class="hljs-number">600</span> ~<span class="hljs-regexp">/.kaggle/</span>kaggle.json<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">!kaggle<span class="hljs-built_in"> config </span><span class="hljs-builtin-name">set</span> -n path -v /content<br></code></pre></td></tr></table></figure></li><li>最后从kaggle上找出自己的数据集,点击Copy API command后进入colab下载即可。<br><img src="https://note.youdao.com/yws/api/personal/file/WEBf34a4d51c6fa1e40b34b6ae821752509?method=download&amp;shareKey=8100dc1c387dc1500f436a85f7c9a479" alt=""></li><li>我这里找了个比较小的数据集，下载速度还可以。我还测试过一个大的数据集，下载速度差不多可以达到90MB/s<br><img src="https://note.youdao.com/yws/api/personal/file/WEBb6313496d36d2da249e897fc00588881?method=download&amp;shareKey=7c07a70f4b8cb8d1c6a30bee58324f97" alt=""><h3 id="6-模型测试【resnet101】-【CIFAR10】"><a href="#6-模型测试【resnet101】-【CIFAR10】" class="headerlink" title="6.模型测试【resnet101】+【CIFAR10】"></a>6.模型测试【resnet101】+【CIFAR10】</h3></li><li>使用GPU<br><img src="https://note.youdao.com/yws/api/personal/file/WEB513ff4229077d747bf3e605c1fdd00b4?method=download&amp;shareKey=41de0a54704bde7e2a37a9000ce1a3ea" alt=""><br><img src="https://note.youdao.com/yws/api/personal/file/WEBec1bab9cceb85c16ce76ae81931b2465?method=download&amp;shareKey=6eec973d892c8cece45aab04a4f77fe7" alt=""><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-keyword">import</span> <span class="hljs-built_in">os</span><br><span class="hljs-built_in">os</span>.environ[<span class="hljs-string">&#x27;CUDA_VISIBLE_DEVICES&#x27;</span>] = <span class="hljs-string">&#x27;0&#x27;</span><br></code></pre></td></tr></table></figure></li><li>模型测试<br><img src="https://note.youdao.com/yws/api/personal/file/WEB60e4930efc965989d27d6dfa8ff18e67?method=download&amp;shareKey=445ee61c848f3768e95af7744229c230" alt=""><br><img src="https://note.youdao.com/yws/api/personal/file/WEBbb8925e46e1f00dd8a38c4c164545f29?method=download&amp;shareKey=519bf7b1faef901fde7ba2d78ab7d4a1" alt=""><br><img src="https://note.youdao.com/yws/api/personal/file/WEB2403f1cc4b962d761189f3f225a6686c?method=download&amp;shareKey=0d6aa4fd22927bd36b165f086d3af7f5" alt=""><br><img src="https://note.youdao.com/yws/api/personal/file/WEB1c5a74ca03d7eb939a18719674aa31e3?method=download&amp;shareKey=c779c67e4ef52a1e9eae10065bcd1cc1" alt=""></li></ul>]]></content>
    
    
    <categories>
      
      <category>colab学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>colab的配置与使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gitlab的使用</title>
    <link href="/2021/12/06/gitlab%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/12/06/gitlab%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="gitlab的基本应用"><a href="#gitlab的基本应用" class="headerlink" title="gitlab的基本应用"></a>gitlab的基本应用</h1><h3 id="1-创建gitlab账号，并设置自己的SSH"><a href="#1-创建gitlab账号，并设置自己的SSH" class="headerlink" title="1.创建gitlab账号，并设置自己的SSH"></a>1.创建gitlab账号，并设置自己的SSH</h3><ul><li><em><a href="https://www.cnblogs.com/qianqiu-1026/p/8543588.html">gitlab注册</a></em></li><li>SSH的生成及使用上面链接中内含教程链接，此处不多说</li></ul><h3 id="2-创建仓库"><a href="#2-创建仓库" class="headerlink" title="2.创建仓库"></a>2.创建仓库</h3><ul><li>在自己的项目组里面创建自己的仓库（new project）<br><img src="https://s2.loli.net/2022/04/04/gAfHaJSn4KqbDdL.png" alt="K_K4_8IP41SEII_RLMZ4@BG.png"></li><li>此处举例创建名为demo（只有一个readme文件）</li><li>打开git bash命令窗口进行如下操作：<br>(1) 从gitlab仓库中克隆到本地（此处克隆到桌面）<br><img src="https://s2.loli.net/2022/04/04/uXyC7mwYAczNnei.png" alt="JBNTJKP2_B_RG62J23372WR.png"><br><img src="https://s2.loli.net/2022/04/04/AxO2YV9XyhvSqcp.png" alt="W7SF_L`2VJ6232_1SKVXG09.png"><br>注：此处的地址就是clone的HTTPS<br>(2) clone后会在桌面上显示你的远程仓库文件<br>(3) 把你的项目文件放到桌面的demo文件中<br>(4) 可以通过以下命令看一下demo文件的状态<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">cd <span class="hljs-built_in">demo</span><br>git <span class="hljs-built_in">status</span><br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/04/04/5Kupj1nxhgG23Ok.png" alt="@O1CXNN__VU1~_HFMY_2L_R.png"><br>注：此时项目文件中的README.md文件替换了demo中的README.md文件，此时已经在本地的暂存区了<br>而下面的一些文件在demo文件中没有，只是存在于本地目录下<br>(5) 把在本地目录下新加的文件add到暂存区<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-builtin-name">add</span> .<br>注：.代表全部文件<br></code></pre></td></tr></table></figure>(6) 把暂存区的文件commit到仓库中<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">commit</span> -m &quot;第一次提交微信小程序代码&quot;<br>注： &quot;&quot;里面的东西一定要写清楚，这代表着你这次干的什么事，可以看<span class="hljs-keyword">commit</span>记录<br></code></pre></td></tr></table></figure>(7) 最后push到gitlab远程仓库<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git push origin <span class="hljs-keyword">master</span><br><span class="hljs-title">注：origin</span>代表远程，<span class="hljs-literal">master</span>代表push的仓库名<br></code></pre></td></tr></table></figure>(8) 最后你就可以在gitlab界面中刷新看到你的项目文件了，如下图所示：<br><img src="https://s2.loli.net/2022/04/04/Glkja8VysJARFiP.png" alt="W18QH__7_15L@B092OWYK~O.png"></li></ul><h3 id="3-创建分支"><a href="#3-创建分支" class="headerlink" title="3.创建分支"></a>3.创建分支</h3><ul><li>因为一个项目工程不是一个人完成的，需要一个团队进行不同的工作，所以团队成员需要创建一个自己的分支来更新自己的项目进度<br>创建方法如下：<br>(1) 打开你的gitbash命令窗口（在主仓库文件下）<br>(2) 创建分支（名字自定义）<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch chen</span><br></code></pre></td></tr></table></figure>(3) 转换到分支下<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git checkout chen</span><br></code></pre></td></tr></table></figure>(4)最后push到你的gitlab远程仓库中即可<br>注：在本地通过命令行创建分支后会同步到远程仓库中<br>可以创建合并请求，如下图所示：<br><img src="https://s2.loli.net/2022/04/04/i1ICVk6wtAsSNzQ.png" alt="G_5NG1FCSKXSULB_RK_K6`F.png"></li></ul>]]></content>
    
    
    <categories>
      
      <category>gitlab</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gitlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>标题</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
    
  </entry>
  
  
  
</search>
