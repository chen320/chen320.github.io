<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>request to https://registry.npm.taobao.org/vue-loader failed</title>
    <link href="/2022/09/22/npm%E7%BD%91%E7%BB%9C%E9%93%BE%E6%8E%A5%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/"/>
    <url>/2022/09/22/npm%E7%BD%91%E7%BB%9C%E9%93%BE%E6%8E%A5%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="“request-to-https-registry-npm-taobao-org-vue-loader“"><a href="#“request-to-https-registry-npm-taobao-org-vue-loader“" class="headerlink" title="“request to https://registry.npm.taobao.org/vue-loader“"></a>“request to <a href="https://registry.npm.taobao.org/vue-loader">https://registry.npm.taobao.org/vue-loader</a>“</h1><ul><li>这是一个npm代理如何设置和npm网络链接失败如何设置的问题<h3 id="1、npm代理设置"><a href="#1、npm代理设置" class="headerlink" title="1、npm代理设置"></a>1、npm代理设置</h3></li><li>npm无法安装包问题，如果出现上述问题，则说明代理有问题<h3 id="2、重新设置npm代理"><a href="#2、重新设置npm代理" class="headerlink" title="2、重新设置npm代理"></a>2、重新设置npm代理</h3></li><li>取消npm代理设置，输入以下代码即可<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">npm config <span class="hljs-built_in">set</span> proxy null<br></code></pre></td></tr></table></figure><h3 id="3、将代理设置为空"><a href="#3、将代理设置为空" class="headerlink" title="3、将代理设置为空"></a>3、将代理设置为空</h3></li><li>输入以下代码<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">npm config <span class="hljs-built_in">set</span> https-proxy null<br></code></pre></td></tr></table></figure><h3 id="4、添加淘宝镜像"><a href="#4、添加淘宝镜像" class="headerlink" title="4、添加淘宝镜像"></a>4、添加淘宝镜像</h3></li><li>输入以下代码<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">npm --registry https:<span class="hljs-comment">//registry.npm.taobao.org info underscore</span><br></code></pre></td></tr></table></figure><blockquote><p>通过上面的操作，此问题就可以得以解决<br>欢迎大家留言提供更多方法</p></blockquote></li></ul>]]></content>
    
    
    <categories>
      
      <category>npm问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>npm问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c#—MVC框架-新闻管理系统一</title>
    <link href="/2022/09/20/MVC%E9%A1%B9%E7%9B%AE%E4%B8%80/"/>
    <url>/2022/09/20/MVC%E9%A1%B9%E7%9B%AE%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="c-MVC框架-新闻管理系统一"><a href="#c-MVC框架-新闻管理系统一" class="headerlink" title="c#+MVC框架-新闻管理系统一"></a>c#+MVC框架-新闻管理系统一</h1><h3 id="一、创建数据库以及表"><a href="#一、创建数据库以及表" class="headerlink" title="一、创建数据库以及表"></a>一、创建数据库以及表</h3><ul><li>创建数据库（NewsDB)</li><li>创建Member表（用于存放用户信息）<br><img src="https://s2.loli.net/2022/11/10/iEp38k26yBAJHD9.png" alt="1.png"></li><li>创建新闻信息表（用于联系用户和新闻）<br><img src="https://s2.loli.net/2022/11/10/JYvbc1ntEs5VhHm.png" alt="2.png"><h3 id="二、创建MVC项目"><a href="#二、创建MVC项目" class="headerlink" title="二、创建MVC项目"></a>二、创建MVC项目</h3><img src="https://s2.loli.net/2022/11/10/XSwrZzxnlp9RL3H.png" alt="3.png"></li><li>简单来说MVC框架就是Control控制器把Model里面的数据拿出来满足View中界面对数据的需求。</li><li>打开Visual Studio新建项目</li><li>项目名字自己命名，直接创建</li><li>创建一个空的“ASP.NET Web” 应用程序<br><img src="https://s2.loli.net/2022/11/10/uZ6HI187pXrVwKY.png" alt="4.png"><br><img src="https://s2.loli.net/2022/11/10/TIfEW2rx6OoePSH.png" alt="5.png"><br><img src="https://s2.loli.net/2022/11/10/etHYQsa3S6fBbd8.png" alt="6.png"></li><li>创建完后的界面如下图所示：<br><img src="https://s2.loli.net/2022/11/10/NSIyb8cCtUFhQa4.png" alt="7.png"><h3 id="三、连接数据库"><a href="#三、连接数据库" class="headerlink" title="三、连接数据库"></a>三、连接数据库</h3></li><li>通过上面描述，想必大家已经知道我们需要在Model中创建一个实体承载我们数据库中的数据，接下来让我们在Model中新建项，新建一个实体数据模型<br><img src="https://s2.loli.net/2022/11/10/S4KFbLsfB5iEuGV.png" alt="8.png"><br><img src="https://s2.loli.net/2022/11/10/b9zU2tMrGEnORHd.png" alt="9.png"><br><img src="https://s2.loli.net/2022/11/10/1O8kyWZTJw5lxgN.png" alt="10.png"><br><img src="https://s2.loli.net/2022/11/10/z1AnIVeaCilw4fs.png" alt="11.png"><br><img src="https://s2.loli.net/2022/11/10/wPzZAFEeV7y1UQY.png" alt="12.png"><br><img src="https://s2.loli.net/2022/11/10/ECeNHM3y2YOkB16.png" alt="13.png"><br><img src="https://s2.loli.net/2022/11/10/eiJTGSMZjqXpKyx.png" alt="14.png"><br><img src="https://s2.loli.net/2022/11/10/YlPfvwcbinoJFWL.png" alt="15.png"><br><img src="https://s2.loli.net/2022/11/10/1gjQxG8PakJ2I4R.png" alt="16.png"></li><li>按照上面的步骤操作后会出现如下图所示的界面<br><img src="https://s2.loli.net/2022/11/10/CM6Wwvs3BHpNZOi.png" alt="17.png"></li><li>下面通俗地来说一下数据在这个模型中的存在形式<br><img src="https://s2.loli.net/2022/11/10/WlqBgeYEGdCzMv6.png" alt="18.png"></li><li>News表的存在形式也是一样的，都是以表的形式存在的（对象）。<h3 id="四、创建接口和实现类"><a href="#四、创建接口和实现类" class="headerlink" title="四、创建接口和实现类"></a>四、创建接口和实现类</h3></li><li>创建数据库的增删改查操作时间接口（操作方法）<br><img src="https://s2.loli.net/2022/11/10/u3HpoOeUQi6kPzf.png" alt="19.png"></li><li>代码如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c#">using System;<br>using System.Collections.Generic;<br>using System.Linq;<br>using System.Text;<br>using System.Threading.Tasks;<br><br>namespace NewsSystem.Models<br>&#123;<br>    public interface IProvider&lt;T&gt; where T : class<br>    &#123;<br>        /// &lt;summary&gt;<br>        /// 对数据库进行的4个操作的接口方法<br>        /// &lt;/summary&gt;<br>        /// &lt;returns&gt;&lt;/returns&gt;<br>        List&lt;T&gt; Select();   // 查询数据库的所有记录<br>        int Insert(T t);    // 对数据库进行插入操作<br>        int Update(T t);   // 对数据库进行修改的操作<br>        int Delete(T t);   //  对数据库进行删除操作<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li>两张数据表的增删改查代码（这里提供一个，另一个只需要修改访问的数据库就行）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c#">namespace NewsSystem.Models<br>&#123;<br>    public class NewsProvider : IProvider&lt;News&gt;<br>    &#123;<br>        private NewsDBEntities db = new NewsDBEntities();<br>        public int Delete(News t)<br>        &#123;<br>            if (t == null)<br>                return 0;<br>            else<br>            &#123;<br>                var model = db.News.ToList().FirstOrDefault(item =&gt; item.Id == t.Id);<br>                if (model == null)<br>                &#123;<br>                    return 0;<br>                &#125;<br>                else<br>                &#123;<br>                    db.News.Remove(model);<br>                    int count = db.SaveChanges();<br>                    return count;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        public int Insert(News t)<br>        &#123;<br>            if (t == null) return 0;<br>            db.News.Add(t);<br>            int count = db.SaveChanges();<br>            return count;<br>        &#125;<br><br>        public List&lt;News&gt; Select()<br>        &#123;<br>            return db.News.ToList();<br>        &#125;<br><br>        public int Update(News t)<br>        &#123;<br>            if (t == null)<br>                return 0;<br>            else &#123;<br>                var model = db.News.ToList().FirstOrDefault(item =&gt; item.Id == t.Id);<br>                model.Title = t.Title;<br>                model.Text = t.Text;<br>                int count = db.SaveChanges();<br>                return count;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在上述代码中可以看到是通过NewsDBEntities来创建的数据库访问对象db，然后通多db来访问数据表</p></blockquote></li></ul>]]></content>
    
    
    <categories>
      
      <category>c#后端和网页开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c#学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c#—MVC框架-新闻管理系统二（登录功能）</title>
    <link href="/2022/09/20/MVC%E9%A1%B9%E7%9B%AE%E4%BA%8C/"/>
    <url>/2022/09/20/MVC%E9%A1%B9%E7%9B%AE%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="c-MVC框架-新闻管理系统二（登录功能）"><a href="#c-MVC框架-新闻管理系统二（登录功能）" class="headerlink" title="c#+MVC框架-新闻管理系统二（登录功能）"></a>c#+MVC框架-新闻管理系统二（登录功能）</h1><h3 id="一、创建一个控制器（Controllers"><a href="#一、创建一个控制器（Controllers" class="headerlink" title="一、创建一个控制器（Controllers)"></a>一、创建一个控制器（Controllers)</h3><ul><li>右击Controllers，添加，选择一个空的控制器即可，便于我们操作</li><li>创建完后的界面如下图所示：<br><img src="https://s2.loli.net/2022/11/10/RCPoFryE8dINHuk.png" alt="01.png"><h3 id="二、在控制器中创建Login视图"><a href="#二、在控制器中创建Login视图" class="headerlink" title="二、在控制器中创建Login视图"></a>二、在控制器中创建Login视图</h3><img src="https://s2.loli.net/2022/11/10/9YjkKoR2Ni3zUC1.png" alt="02.png"></li><li>在创建完控制器后会在Views视图文件下同步生成一个News文件夹</li><li>创建完login视图后会在News文件夹下生成一个Login.cshtml文件，这个就是我们要设计的界面</li><li>同步也会生成_Layout.cshtml布局文件</li><li>在下图中注明相应包的引入来源<br><img src="https://s2.loli.net/2022/11/10/3KiL6YOkyMZTtgG.png" alt="03.png"></li><li>在刚创建的Login视图时也许会报错，这是因为运行文件的开始控制器不对，现在视图是login，但是开始视图设置的index，所以我们需要按照下面的界面进行操作<br><img src="https://s2.loli.net/2022/11/10/QTjPKva4VNlIecM.png" alt="04.png"><h3 id="三、引入layui-登录框架"><a href="#三、引入layui-登录框架" class="headerlink" title="三、引入layui 登录框架"></a>三、引入layui 登录框架</h3><a href="https://www.moyublog.com/demo/93_20475.html">https://www.moyublog.com/demo/93_20475.html</a></li><li>在上面的网址中查看源代码，复制到我们的cshtml文件中去</li><li>前提需要我们下载layui的js和css引入文件，可以自己创建一个js和css文件夹，然后以后所有的相应文件都放到里面。</li><li>登录代码如下</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs c">@&#123;<br>    ViewBag.Title = <span class="hljs-string">&quot;Login&quot;</span>;<br>&#125;<br><br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;登录界面&lt;/title&gt;<br>    &lt;!--basic_css--&gt;<br>    &lt;link rel=<span class="hljs-string">&quot;stylesheet&quot;</span> type=<span class="hljs-string">&quot;text/css&quot;</span> href=<span class="hljs-string">&quot;/css/layui.css&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span><br>          content=<span class="hljs-string">&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=no&quot;</span>&gt;<br><br>    &lt;style type=<span class="hljs-string">&quot;text/css&quot;</span>&gt;<br>        body &#123;<br>            background-image: url(/img/lg-bg.jpg);<br>            background-position: <span class="hljs-number">14</span>px <span class="hljs-number">14</span>px;<br>            background-repeat: no-repeat;<br>            background-position: center center;<br>            background-attachment: fixed;<br>            background-size: cover;<br>        &#125;<br><br>        .layui-input &#123;<br>            height: <span class="hljs-number">45</span>px;<br>            width: <span class="hljs-number">87</span>%;<br>            padding-left: <span class="hljs-number">5</span>px;<br>            font-size: <span class="hljs-number">16</span>px;<br>            display: <span class="hljs-keyword">inline</span>-block;<br>        &#125;<br><br>        .layui-btn &#123;<br>            height: <span class="hljs-number">45</span>px;<br>        &#125;<br><br>        .captcha-input &#123;<br>            height: <span class="hljs-number">45</span>px;<br>            padding-left: <span class="hljs-number">5</span>px;<br>            font-size: <span class="hljs-number">16</span>px;<br>        &#125;<br><br>        .layui-form &#123;<br>            width: <span class="hljs-number">30</span>%;<br>            height: <span class="hljs-number">60</span>%;<br>            margin: <span class="hljs-number">0</span> <span class="hljs-keyword">auto</span>;<br>            margin-top: <span class="hljs-number">7</span>%;<br>            padding: <span class="hljs-number">15</span>px <span class="hljs-number">28</span>px <span class="hljs-number">0</span>px;<br>            background: <span class="hljs-meta">#fff;</span><br>        &#125;<br><br>        .layui-input-block &#123;<br>            margin-left: <span class="hljs-number">0</span>;<br>        &#125;<br><br><br><br>            .layui-input-block a &#123;<br>                color: blue;<br>                <span class="hljs-keyword">float</span>: right;<br>                line-height: <span class="hljs-number">30</span>px;<br>                font-size: <span class="hljs-number">14</span>px;<br>            &#125;<br><br>        h1 &#123;<br>            text-align: center;<br>            color: #<span class="hljs-number">1</span>d598e;<br>        &#125;<br><br>        input.text &#123;<br>            text-align: center;<br>            padding: <span class="hljs-number">10</span>px <span class="hljs-number">20</span>px;<br>            width: <span class="hljs-number">300</span>px;<br>        &#125;<br><br>        <span class="hljs-meta">#canvas &#123;</span><br>            <span class="hljs-keyword">float</span>: right;<br>            margin-right: <span class="hljs-number">4</span>%;<br>            display: <span class="hljs-keyword">inline</span>-block;<br>            border: <span class="hljs-number">1</span>px solid <span class="hljs-meta">#ccc;</span><br>            border-radius: <span class="hljs-number">5</span>px;<br>            cursor: pointer;<br>        &#125;<br><br>        .code &#123;<br>            width: <span class="hljs-number">400</span>px;<br>            margin: <span class="hljs-number">0</span> <span class="hljs-keyword">auto</span>;<br>        &#125;<br><br>        .input-val &#123;<br>            width: <span class="hljs-number">60</span>%;<br>            height: <span class="hljs-number">45</span>px;<br>            font-size: <span class="hljs-number">16</span>px;<br>            border-radius: <span class="hljs-number">5</span>px;<br>            border: <span class="hljs-number">1</span><span class="hljs-function">px solid <span class="hljs-title">rgba</span><span class="hljs-params">(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">.2</span>)</span></span>;<br>        &#125;<br><br>        .decrib &#123;<br>            font-size: <span class="hljs-number">16</span>px;<br>        &#125;<br>    &lt;/style&gt;<br><br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">&quot;layui-form&quot;</span>&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;<br>            &lt;h1&gt;用&amp;nbsp;户&amp;nbsp;登&amp;nbsp;录&lt;/h1&gt;<br>        &lt;/div&gt;<br><br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;<br>            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">&quot;layui-input-block&quot;</span>&gt;<br>                &lt;span <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">&quot;decrib&quot;</span>&gt;账号：&lt;/span&gt;<br>                &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span> id=<span class="hljs-string">&quot;username&quot;</span> placeholder=<span class="hljs-string">&quot;请输入账号&quot;</span> autocomplete=<span class="hljs-string">&quot;off&quot;</span> class=<span class="hljs-string">&quot;layui-input&quot;</span><br>                       autofocus required&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br><br>        &lt;div class=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;<br>            &lt;div class=<span class="hljs-string">&quot;layui-input-block&quot;</span>&gt;<br>                &lt;span class=<span class="hljs-string">&quot;decrib&quot;</span>&gt;密码：&lt;/span&gt;<br>                &lt;input type=<span class="hljs-string">&quot;password&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span> id=<span class="hljs-string">&quot;password&quot;</span> placeholder=<span class="hljs-string">&quot;请输入密码&quot;</span> autocomplete=<span class="hljs-string">&quot;off&quot;</span> class=<span class="hljs-string">&quot;layui-input&quot;</span><br>                       required&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br><br>        &lt;br&gt;<br>        &lt;div class=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;<br>            &lt;div class=<span class="hljs-string">&quot;layui-input-block&quot;</span>&gt;<br>                &lt;button class=<span class="hljs-string">&quot;layui-btn layui-btn-bypercent-left btn&quot;</span> id=<span class="hljs-string">&quot;submit&quot;</span> type=<span class="hljs-string">&quot;button&quot;</span>&gt;登 录&lt;/button&gt;<br>                &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp;<br>                &lt;a <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">&quot;layui-btn layui-btn-bypercent-right&quot;</span> style=<span class="hljs-string">&quot;color:#fff;line-height:45px;font-size:20px;&quot;</span> href=<span class="hljs-string">&quot;Register.html&quot;</span> id=<span class="hljs-string">&quot;register&quot;</span>&gt;注 册&lt;/a&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>        &lt;br&gt;<br>        &lt;br&gt;<br>    &lt;/div&gt;<br></code></pre></td></tr></table></figure><blockquote><p>因为在layout中跟随的是MVC框架中的书写结构，所以在上述的html代码中开始标签和结束标签都在原有的基础上删除了，可以从网上查阅更多资料深入了解。</p><h3 id="四、通过Ajax技术实现登录"><a href="#四、通过Ajax技术实现登录" class="headerlink" title="四、通过Ajax技术实现登录"></a>四、通过Ajax技术实现登录</h3><ul><li>首先把layui框架的引用方式删除，使用我们内部设定好的（上面便是更改好的代码）</li><li>然后书写Ajax代码连接<br><img src="https://s2.loli.net/2022/11/10/EaSNqgbst5lze17.png" alt="05.png"><br><img src="https://s2.loli.net/2022/11/10/rZO4QJXPzhG8YWq.png" alt="06.png"></li><li>在控制器中创建一个方法（不用创建视图）<br><img src="https://s2.loli.net/2022/11/10/oeXOYHQT6BMPU4z.png" alt="07.png"></li><li>因为登录成功后跳转到一个新视图界面，所以我们需要在News控制器下创建一个新的视图<br>可以先在数据库手动加入一个账号密码，输入成功后会跳转到新创建的视图界面</li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>c#后端和网页开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c#学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat和IDEA的安装配置</title>
    <link href="/2022/09/06/Tomcat%E5%92%8CIDEA%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/09/06/Tomcat%E5%92%8CIDEA%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Tomcat和IDEA的安装配置"><a href="#Tomcat和IDEA的安装配置" class="headerlink" title="Tomcat和IDEA的安装配置"></a>Tomcat和IDEA的安装配置</h2><h4 id="1、首先使用IDEA创建一个普通的java项目-目录结构如下："><a href="#1、首先使用IDEA创建一个普通的java项目-目录结构如下：" class="headerlink" title="1、首先使用IDEA创建一个普通的java项目,目录结构如下："></a>1、首先使用IDEA创建一个普通的java项目,目录结构如下：</h4><p><a href="https://postimg.cc/PvxJmj37"><img src="https://i.postimg.cc/1X0F1Rpy/1.png" alt="1.png"></a><br>现在创建的仅仅是简单的java程序，但是我们是要开发web程序，所以需要我们添加web依赖，操作如下：</p><ul><li>右击自己创建的项目，然后点击add framework support</li><li>选择上Web application，然后点ok即可<br><a href="https://postimg.cc/zVTvK008"><img src="https://i.postimg.cc/ZKMNkQNB/2.png" alt="2.png"></a></li><li>这时你将会发现web文件夹（代表依赖包安装完成了）<h4 id="2、配置Tomcat"><a href="#2、配置Tomcat" class="headerlink" title="2、配置Tomcat"></a>2、配置Tomcat</h4></li><li>web项目需要我们配置Tomcat才能正确运行</li><li>点击add configuration<br><a href="https://postimg.cc/GHbtPvND"><img src="https://i.postimg.cc/KvMT2ND0/3.png" alt="3.png"></a></li><li>点击加号<br><a href="https://postimg.cc/rDrpMgRv"><img src="https://i.postimg.cc/13WV0jm5/4.png" alt="4.png"></a></li><li>下拉选择tomcat server下的local<br><a href="https://postimg.cc/4K1sx0fF"><img src="https://i.postimg.cc/ZqGRVk1Z/5.png" alt="5.png"></a></li><li>打开配置界面<br><a href="https://postimg.cc/zHFnt88F"><img src="https://i.postimg.cc/tJL2g4cw/6.png" alt="6.png"></a></li><li>首先点击deployment，先配置自己的项目名称，也就是外部访问的项目名称</li><li>点击+，选择发布方式(第一个选项为war包，第二个选项为源码)，我们选择Artifact</li><li>然后下面的Application context(对外访问路径)，也可不做修改</li><li>回到Server界面</li><li>Name就是Tomcat的名字设置</li><li>默认浏览器自行选择，下面是对外访问的URL</li><li>把下面两个设置为热加载，表示我们在修改文件后就会生效(修改java文件后需要重新发布才会生效)<br><a href="https://postimg.cc/jwc82GF2"><img src="https://i.postimg.cc/x8DBxQGv/7.png" alt="7.png"></a></li><li>端接口按照自己的需要设置即可<br>-最后点击apply后点击ok，最后界面加载设备会变成如下所示：<br><a href="https://postimg.cc/mhFzbQ1f"><img src="https://i.postimg.cc/xj6K350C/8.png" alt="8.png"></a><br>现在就可以启动，服务器启动成功，但是在控制台出现乱码，我们可以按照如下步骤解决：</li><li>点击file，选择setting，进入设置界面</li><li>搜索console，把默认编码改为GBK，点击apply + ok，重新启动服务器，乱码问题将被解决<blockquote><p>通过上述操作后，再次启动程序，将你能正确在网页端访问<br>注：网页端呈现的是web下的jsp文件运行的效果</p></blockquote></li></ul>]]></content>
    
    
    <categories>
      
      <category>Tomcat学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat问题</title>
    <link href="/2022/09/06/tomcat/"/>
    <url>/2022/09/06/tomcat/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Tomcat使用的相关问题"><a href="#Tomcat使用的相关问题" class="headerlink" title="Tomcat使用的相关问题"></a>Tomcat使用的相关问题</h2><h4 id="1、首先在官网上下载Tomcat安装包即可-官网如下所示"><a href="#1、首先在官网上下载Tomcat安装包即可-官网如下所示" class="headerlink" title="1、首先在官网上下载Tomcat安装包即可,官网如下所示"></a>1、首先在官网上下载Tomcat安装包即可,官网如下所示</h4><p><a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a><br>注：我是直接下载到D盘，然后解压打d盘</p><h4 id="2、配置环境变量-前提是java相关环境变量均配置好"><a href="#2、配置环境变量-前提是java相关环境变量均配置好" class="headerlink" title="2、配置环境变量(前提是java相关环境变量均配置好)"></a>2、配置环境变量(前提是java相关环境变量均配置好)</h4><ul><li>变量名：CATALINA_HOME；变量值：D:\apache-tomcat-8.5.82</li><li>在path(PATH)配置：%CATALINA_HOME%\lib；%CATALINA_HOME%\bin；%CATALINA_HOME%\lib\servlet-api.jar三个变量即可<h4 id="3、在bin目录下打开startup-bat-在命令提示符中打开也可以"><a href="#3、在bin目录下打开startup-bat-在命令提示符中打开也可以" class="headerlink" title="3、在bin目录下打开startup.bat || 在命令提示符中打开也可以"></a>3、在bin目录下打开startup.bat || 在命令提示符中打开也可以</h4>注：如果出现闪退现象，查看一下JAVA_HOME的环境变量值最后是否有“ ；”，如果有分号的话删掉即可；如果出现乱码的话，打开Tomcat的conf目录下的logging.properties文件，找到第47行，用java.util.logging.ConsoleHandler.encoding = GBK替换即可，这是由于编码规则的原因。<h4 id="4、打开startup-bat后即打开了项目，在浏览器出入http-127-0-0-1-8080，出现欢迎页面-代表安装成功。"><a href="#4、打开startup-bat后即打开了项目，在浏览器出入http-127-0-0-1-8080，出现欢迎页面-代表安装成功。" class="headerlink" title="4、打开startup.bat后即打开了项目，在浏览器出入http://127.0.0.1:8080，出现欢迎页面,代表安装成功。"></a>4、打开startup.bat后即打开了项目，在浏览器出入<a href="http://127.0.0.1:8080">http://127.0.0.1:8080</a>，出现欢迎页面,代表安装成功。</h4>注：出现访问不了网页的问题，可能是环境变量没有配好，端口冲突等原因。如果在启动项目的时候出现解决org.apache.catalina.LifecycleException: 协议处理程序初始化失败的问题，那就是端口占用了，可以输入以下命令<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">netstat</span> -ano  <span class="hljs-comment"># windows</span><br>netstat -nltp  <span class="hljs-comment">#linux</span><br></code></pre></td></tr></table></figure></li><li>查看占用8080端口的程序id，直接在任务管理器关闭即可解决上述问题</li></ul>]]></content>
    
    
    <categories>
      
      <category>Tomcat学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>21年全国大学生计算机应用能力与信息素养大赛</title>
    <link href="/2022/07/15/2021%E5%B9%B4%E4%BF%A1%E6%81%AF%E7%B4%A0%E5%85%BB%E5%A4%A7%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    <url>/2022/07/15/2021%E5%B9%B4%E4%BF%A1%E6%81%AF%E7%B4%A0%E5%85%BB%E5%A4%A7%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="21年全国大学生计算机应用能力与信息素养大赛"><a href="#21年全国大学生计算机应用能力与信息素养大赛" class="headerlink" title="21年全国大学生计算机应用能力与信息素养大赛"></a>21年全国大学生计算机应用能力与信息素养大赛</h3><h5 id="注：此代码实现过程仅是本人初学后所敲，很多地方不足，仅供大家参考。"><a href="#注：此代码实现过程仅是本人初学后所敲，很多地方不足，仅供大家参考。" class="headerlink" title="注：此代码实现过程仅是本人初学后所敲，很多地方不足，仅供大家参考。"></a>注：此代码实现过程仅是本人初学后所敲，很多地方不足，仅供大家参考。</h5><h5 id="因为大赛结束后就没有赛题及相关介绍，这里提供给大家"><a href="#因为大赛结束后就没有赛题及相关介绍，这里提供给大家" class="headerlink" title="因为大赛结束后就没有赛题及相关介绍，这里提供给大家"></a>因为大赛结束后就没有赛题及相关介绍，这里提供给大家</h5><p><a href="https://postimg.cc/XXQb4Qc9"><img src="https://i.postimg.cc/BQGQ5zj7/1.jpg" alt="1.jpg"></a></p><h5 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><br>data =  pd.read_csv(<span class="hljs-string">&#x27;C:/Users/86155/Desktop/大数据竞赛数据集_本科组.csv&#x27;</span>)<br>data.head()<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>X0</th>      <th>X1</th>      <th>X2</th>      <th>X3</th>      <th>X4</th>      <th>X5</th>      <th>X6</th>      <th>X7</th>      <th>X8</th>      <th>X9</th>      <th>X10</th>      <th>X11</th>      <th>X12</th>      <th>X13</th>      <th>X14</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1/1/2015</td>      <td>Quarter1</td>      <td>sweing</td>      <td>Thursday</td>      <td>8</td>      <td>0.80</td>      <td>26.16</td>      <td>1108.0</td>      <td>7080</td>      <td>98</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>59.0</td>      <td>0.940725</td>    </tr>    <tr>      <th>1</th>      <td>1/1/2015</td>      <td>Quarter1</td>      <td>finishing</td>      <td>Thursday</td>      <td>1</td>      <td>0.75</td>      <td>3.94</td>      <td>NaN</td>      <td>960</td>      <td>0</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>8.0</td>      <td>0.886500</td>    </tr>    <tr>      <th>2</th>      <td>1/1/2015</td>      <td>Quarter1</td>      <td>sweing</td>      <td>Thursday</td>      <td>11</td>      <td>0.80</td>      <td>11.41</td>      <td>968.0</td>      <td>3660</td>      <td>50</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>30.5</td>      <td>0.800570</td>    </tr>    <tr>      <th>3</th>      <td>1/1/2015</td>      <td>Quarter1</td>      <td>sweing</td>      <td>Thursday</td>      <td>12</td>      <td>0.80</td>      <td>11.41</td>      <td>968.0</td>      <td>3660</td>      <td>50</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>30.5</td>      <td>0.800570</td>    </tr>    <tr>      <th>4</th>      <td>1/1/2015</td>      <td>Quarter1</td>      <td>sweing</td>      <td>Thursday</td>      <td>6</td>      <td>0.80</td>      <td>25.90</td>      <td>1170.0</td>      <td>1920</td>      <td>50</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>56.0</td>      <td>0.800382</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br>data=pd.read_excel(<span class="hljs-string">&#x27;C:/Users/86155/Desktop/xinguan.xlsx&#x27;</span>)<br><span class="hljs-comment">#plt.scatter(data[&#x27;经度&#x27;],data[&#x27;纬度&#x27;],</span><br>           <span class="hljs-comment">#s=data[&#x27;累计确诊&#x27;],</span><br>           <span class="hljs-comment">#c=data[&#x27;累计死亡&#x27;],cmap=&#x27;Gray&#x27;,</span><br>           <span class="hljs-comment">#alpha=0.4)</span><br><span class="hljs-comment">#plt.grid()</span><br>data.head()<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>城市</th>      <th>累计确诊</th>      <th>现有疑似</th>      <th>累计死亡</th>      <th>经度</th>      <th>纬度</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>北京</td>      <td>1651</td>      <td>0</td>      <td>9</td>      <td>116.46</td>      <td>39.92</td>    </tr>    <tr>      <th>1</th>      <td>天津</td>      <td>1372</td>      <td>0</td>      <td>3</td>      <td>117.20</td>      <td>39.12</td>    </tr>    <tr>      <th>2</th>      <td>河北</td>      <td>1671</td>      <td>0</td>      <td>7</td>      <td>114.52</td>      <td>38.05</td>    </tr>    <tr>      <th>3</th>      <td>山西</td>      <td>295</td>      <td>0</td>      <td>0</td>      <td>112.55</td>      <td>37.87</td>    </tr>    <tr>      <th>4</th>      <td>内蒙古</td>      <td>1666</td>      <td>0</td>      <td>1</td>      <td>111.73</td>      <td>40.83</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">data.info()<br></code></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 1197 entries, 0 to 1196Data columns (total 15 columns): #   Column  Non-Null Count  Dtype         ---  ------  --------------  -----          0   X0      1197 non-null   datetime64[ns] 1   X1      1197 non-null   object         2   X2      1197 non-null   object         3   X3      1197 non-null   object         4   X4      1197 non-null   int64          5   X5      1197 non-null   float64        6   X6      1197 non-null   float64        7   X7      691 non-null    float64        8   X8      1197 non-null   int64          9   X9      1197 non-null   int64          10  X10     1197 non-null   float64        11  X11     1197 non-null   int64          12  X12     1197 non-null   int64          13  X13     1197 non-null   float64        14  X14     1197 non-null   float64       dtypes: datetime64[ns](1), float64(6), int64(5), object(3)memory usage: 140.4+ KB</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">data.isnull()<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>X0</th>      <th>X1</th>      <th>X2</th>      <th>X3</th>      <th>X4</th>      <th>X5</th>      <th>X6</th>      <th>X7</th>      <th>X8</th>      <th>X9</th>      <th>X10</th>      <th>X11</th>      <th>X12</th>      <th>X13</th>      <th>X14</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>    </tr>    <tr>      <th>1</th>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>    </tr>    <tr>      <th>2</th>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>    </tr>    <tr>      <th>3</th>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>    </tr>    <tr>      <th>4</th>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>1192</th>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>    </tr>    <tr>      <th>1193</th>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>    </tr>    <tr>      <th>1194</th>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>    </tr>    <tr>      <th>1195</th>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>    </tr>    <tr>      <th>1196</th>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>      <td>False</td>    </tr>  </tbody></table><p>1197 rows × 15 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  数据类型</span><br>data.dtypes  <br></code></pre></td></tr></table></figure><pre><code>X0     datetime64[ns]X1             objectX2             objectX3             objectX4              int64X5            float64X6            float64X7            float64X8              int64X9              int64X10           float64X11             int64X12             int64X13           float64X14           float64dtype: object</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#用中值填补Age的空缺值</span><br>data[<span class="hljs-string">&#x27;X7&#x27;</span>]=data[<span class="hljs-string">&#x27;X7&#x27;</span>].fillna(data[<span class="hljs-string">&#x27;X7&#x27;</span>].median())<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">data.describe()<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>X4</th>      <th>X5</th>      <th>X6</th>      <th>X7</th>      <th>X8</th>      <th>X9</th>      <th>X10</th>      <th>X11</th>      <th>X12</th>      <th>X13</th>      <th>X14</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>1197.000000</td>      <td>1197.000000</td>      <td>1197.000000</td>      <td>1197.000000</td>      <td>1197.000000</td>      <td>1197.000000</td>      <td>1197.000000</td>      <td>1197.000000</td>      <td>1197.000000</td>      <td>1197.000000</td>      <td>1197.000000</td>    </tr>    <tr>      <th>mean</th>      <td>6.426901</td>      <td>0.729632</td>      <td>15.062172</td>      <td>1126.437761</td>      <td>4567.460317</td>      <td>38.210526</td>      <td>0.730159</td>      <td>0.369256</td>      <td>0.150376</td>      <td>34.609858</td>      <td>0.735091</td>    </tr>    <tr>      <th>std</th>      <td>3.463963</td>      <td>0.097891</td>      <td>10.943219</td>      <td>1397.653191</td>      <td>3348.823563</td>      <td>160.182643</td>      <td>12.709757</td>      <td>3.268987</td>      <td>0.427848</td>      <td>22.197687</td>      <td>0.174488</td>    </tr>    <tr>      <th>min</th>      <td>1.000000</td>      <td>0.070000</td>      <td>2.900000</td>      <td>7.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>2.000000</td>      <td>0.233705</td>    </tr>    <tr>      <th>25%</th>      <td>3.000000</td>      <td>0.700000</td>      <td>3.940000</td>      <td>970.000000</td>      <td>1440.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>9.000000</td>      <td>0.650307</td>    </tr>    <tr>      <th>50%</th>      <td>6.000000</td>      <td>0.750000</td>      <td>15.260000</td>      <td>1039.000000</td>      <td>3960.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>34.000000</td>      <td>0.773333</td>    </tr>    <tr>      <th>75%</th>      <td>9.000000</td>      <td>0.800000</td>      <td>24.260000</td>      <td>1083.000000</td>      <td>6960.000000</td>      <td>50.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>57.000000</td>      <td>0.850253</td>    </tr>    <tr>      <th>max</th>      <td>12.000000</td>      <td>0.800000</td>      <td>54.560000</td>      <td>23122.000000</td>      <td>25920.000000</td>      <td>3600.000000</td>      <td>300.000000</td>      <td>45.000000</td>      <td>2.000000</td>      <td>89.000000</td>      <td>1.120437</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  重复值处理</span><br><br><span class="hljs-comment">#找出行重复的位置</span><br>dIndex = data.duplicated()<br>dIndex<br></code></pre></td></tr></table></figure><pre><code>0       False1       False2       False3       False4       False        ...  1192    False1193    False1194    False1195    False1196    FalseLength: 1197, dtype: bool</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  可以看出没有重复值</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">data.head()<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>X0</th>      <th>X1</th>      <th>X2</th>      <th>X3</th>      <th>X4</th>      <th>X5</th>      <th>X6</th>      <th>X7</th>      <th>X8</th>      <th>X9</th>      <th>X10</th>      <th>X11</th>      <th>X12</th>      <th>X13</th>      <th>X14</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1/1/2015</td>      <td>Quarter1</td>      <td>sweing</td>      <td>Thursday</td>      <td>8</td>      <td>0.80</td>      <td>26.16</td>      <td>1108.0</td>      <td>7080</td>      <td>98</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>59.0</td>      <td>0.940725</td>    </tr>    <tr>      <th>1</th>      <td>1/1/2015</td>      <td>Quarter1</td>      <td>finishing</td>      <td>Thursday</td>      <td>1</td>      <td>0.75</td>      <td>3.94</td>      <td>1039.0</td>      <td>960</td>      <td>0</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>8.0</td>      <td>0.886500</td>    </tr>    <tr>      <th>2</th>      <td>1/1/2015</td>      <td>Quarter1</td>      <td>sweing</td>      <td>Thursday</td>      <td>11</td>      <td>0.80</td>      <td>11.41</td>      <td>968.0</td>      <td>3660</td>      <td>50</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>30.5</td>      <td>0.800570</td>    </tr>    <tr>      <th>3</th>      <td>1/1/2015</td>      <td>Quarter1</td>      <td>sweing</td>      <td>Thursday</td>      <td>12</td>      <td>0.80</td>      <td>11.41</td>      <td>968.0</td>      <td>3660</td>      <td>50</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>30.5</td>      <td>0.800570</td>    </tr>    <tr>      <th>4</th>      <td>1/1/2015</td>      <td>Quarter1</td>      <td>sweing</td>      <td>Thursday</td>      <td>6</td>      <td>0.80</td>      <td>25.90</td>      <td>1170.0</td>      <td>1920</td>      <td>50</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>56.0</td>      <td>0.800382</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br>plt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>]=<span class="hljs-string">&#x27;SimHei&#x27;</span><br><br>corr = data[[<span class="hljs-string">&#x27;X0&#x27;</span>,<span class="hljs-string">&#x27;X1&#x27;</span>,<span class="hljs-string">&#x27;X2&#x27;</span>,<span class="hljs-string">&#x27;X3&#x27;</span>,<span class="hljs-string">&#x27;X4&#x27;</span>,<span class="hljs-string">&#x27;X5&#x27;</span>,<span class="hljs-string">&#x27;X6&#x27;</span>,<span class="hljs-string">&#x27;X7&#x27;</span>,<span class="hljs-string">&#x27;X8&#x27;</span>,<span class="hljs-string">&#x27;X9&#x27;</span>,<span class="hljs-string">&#x27;X10&#x27;</span>,<span class="hljs-string">&#x27;X11&#x27;</span>,<span class="hljs-string">&#x27;X12&#x27;</span>,<span class="hljs-string">&#x27;X13&#x27;</span>,<span class="hljs-string">&#x27;X14&#x27;</span>]].corr()<br>plt.figure(figsize=(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>))  <span class="hljs-comment"># 指定宽和高（单位：英寸）</span><br>sns.heatmap(corr,vmax=<span class="hljs-number">0.8</span>,annot=<span class="hljs-literal">True</span>) <span class="hljs-comment"># vmax设置热力图颜色取值的最大值；annot设置是否显示格子数字</span><br>plt.show()<br></code></pre></td></tr></table></figure><p><a href="https://postimg.cc/fSYgPWKc"><img src="https://i.postimg.cc/yxG4kk3b/output-10-0.png" alt="output-10-0.png"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  可以看出各个特征对期望生产率和实际生产率的影响率差异并不大，所以就有可能是期望的生产率没有切合一定的实际问题才导致的这样的差异</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">x = data[<span class="hljs-string">&#x27;X0&#x27;</span>]<br>y = data[<span class="hljs-string">&#x27;X5&#x27;</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.plot(x,y)<br>plt.show()<br><span class="hljs-comment"># seaborn</span><br>data= &#123;<br>    <span class="hljs-string">&#x27;x&#x27;</span>:x,<br>    <span class="hljs-string">&#x27;y&#x27;</span>:y<br>      &#125;<br>df = pd.DataFrame(data)<br>sns.lineplot(x=<span class="hljs-string">&#x27;x&#x27;</span>,y=<span class="hljs-string">&#x27;y&#x27;</span>,data=df)<br>plt.show()<br></code></pre></td></tr></table></figure><p><a href="https://postimg.cc/87ZX90h0"><img src="https://i.postimg.cc/1zSxnx4s/output-13-0.png" alt="output-13-0.png"></a></p><p><a href="https://postimg.cc/D43x1kT8"><img src="https://i.postimg.cc/Vvd2QmZB/output-13-1.png" alt="output-13-1.png"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">x = data[<span class="hljs-string">&#x27;X0&#x27;</span>]<br>y = data[<span class="hljs-string">&#x27;X14&#x27;</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.plot(x,y)<br>plt.show()<br><span class="hljs-comment"># seaborn</span><br>data= &#123;<br>    <span class="hljs-string">&#x27;x&#x27;</span>:x,<br>    <span class="hljs-string">&#x27;y&#x27;</span>:y<br>      &#125;<br>df = pd.DataFrame(data)<br>sns.lineplot(x=<span class="hljs-string">&#x27;x&#x27;</span>,y=<span class="hljs-string">&#x27;y&#x27;</span>,data=df)<br>plt.show()<br></code></pre></td></tr></table></figure><p><a href="https://postimg.cc/JtWwbSKN"><img src="https://i.postimg.cc/J7s1WLk2/output-15-0.png" alt="output-15-0.png"></a></p><p><a href="https://postimg.cc/MvWhLRCX"><img src="https://i.postimg.cc/4NtsmQwv/output-15-1.png" alt="output-15-1.png"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">data.head()<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>X0</th>      <th>X1</th>      <th>X2</th>      <th>X3</th>      <th>X4</th>      <th>X5</th>      <th>X6</th>      <th>X7</th>      <th>X8</th>      <th>X9</th>      <th>X10</th>      <th>X11</th>      <th>X12</th>      <th>X13</th>      <th>X14</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1/1/2015</td>      <td>Quarter1</td>      <td>sweing</td>      <td>Thursday</td>      <td>8</td>      <td>0.80</td>      <td>26.16</td>      <td>1108.0</td>      <td>7080</td>      <td>98</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>59.0</td>      <td>0.940725</td>    </tr>    <tr>      <th>1</th>      <td>1/1/2015</td>      <td>Quarter1</td>      <td>finishing</td>      <td>Thursday</td>      <td>1</td>      <td>0.75</td>      <td>3.94</td>      <td>NaN</td>      <td>960</td>      <td>0</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>8.0</td>      <td>0.886500</td>    </tr>    <tr>      <th>2</th>      <td>1/1/2015</td>      <td>Quarter1</td>      <td>sweing</td>      <td>Thursday</td>      <td>11</td>      <td>0.80</td>      <td>11.41</td>      <td>968.0</td>      <td>3660</td>      <td>50</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>30.5</td>      <td>0.800570</td>    </tr>    <tr>      <th>3</th>      <td>1/1/2015</td>      <td>Quarter1</td>      <td>sweing</td>      <td>Thursday</td>      <td>12</td>      <td>0.80</td>      <td>11.41</td>      <td>968.0</td>      <td>3660</td>      <td>50</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>30.5</td>      <td>0.800570</td>    </tr>    <tr>      <th>4</th>      <td>1/1/2015</td>      <td>Quarter1</td>      <td>sweing</td>      <td>Thursday</td>      <td>6</td>      <td>0.80</td>      <td>25.90</td>      <td>1170.0</td>      <td>1920</td>      <td>50</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>56.0</td>      <td>0.800382</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">data[<span class="hljs-string">&#x27;X4&#x27;</span>].unique()<br></code></pre></td></tr></table></figure><pre><code>array([ 8,  1, 11, 12,  6,  7,  2,  3,  9, 10,  5,  4], dtype=int64)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  一共有12个团队</span><br>data1=data.drop([<span class="hljs-string">&#x27;X0&#x27;</span>,<span class="hljs-string">&#x27;X1&#x27;</span>,<span class="hljs-string">&#x27;X2&#x27;</span>,<span class="hljs-string">&#x27;X3&#x27;</span>],axis=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">data1.head()<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>X4</th>      <th>X5</th>      <th>X6</th>      <th>X7</th>      <th>X8</th>      <th>X9</th>      <th>X10</th>      <th>X11</th>      <th>X12</th>      <th>X13</th>      <th>X14</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>8</td>      <td>0.80</td>      <td>26.16</td>      <td>1108.0</td>      <td>7080</td>      <td>98</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>59.0</td>      <td>0.940725</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>0.75</td>      <td>3.94</td>      <td>1039.0</td>      <td>960</td>      <td>0</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>8.0</td>      <td>0.886500</td>    </tr>    <tr>      <th>2</th>      <td>11</td>      <td>0.80</td>      <td>11.41</td>      <td>968.0</td>      <td>3660</td>      <td>50</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>30.5</td>      <td>0.800570</td>    </tr>    <tr>      <th>3</th>      <td>12</td>      <td>0.80</td>      <td>11.41</td>      <td>968.0</td>      <td>3660</td>      <td>50</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>30.5</td>      <td>0.800570</td>    </tr>    <tr>      <th>4</th>      <td>6</td>      <td>0.80</td>      <td>25.90</td>      <td>1170.0</td>      <td>1920</td>      <td>50</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>56.0</td>      <td>0.800382</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 求出簇内误方差</span><br><span class="hljs-keyword">from</span> sklearn.cluster <span class="hljs-keyword">import</span> KMeans<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> scale<br>x=pd.DataFrame(scale(data1))<br>SSE = [] <br>k_range = <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">20</span>)<br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> k_range:<br>    km = KMeans(n_clusters = k)<br>    km.fit(x)<br>    SSE.append(km.inertia_)<br>SSE<br></code></pre></td></tr></table></figure><pre><code>[13167.000000000002, 10368.001747788787, 8985.612362104612, 7956.326143721504, 6934.1999209667265, 6364.89500698171, 5600.08786819714, 4740.428352871961, 4360.332443867376, 3918.830271323268, 3613.3367590027497, 3302.354785621584, 3095.576217636003, 2963.791234943202, 2686.863451514291, 2584.874003399748, 2427.534059702044, 2337.8239778345887, 2250.377455323783]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 然后利用手肘法找出最佳的k值</span><br><br><span class="hljs-keyword">from</span> sklearn.cluster <span class="hljs-keyword">import</span> KMeans<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br> <br>df_features = data1 <span class="hljs-comment"># 读入数据</span><br><br><span class="hljs-comment"># 利用SSE选择k</span><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">20</span>):<br>    estimator = KMeans(n_clusters=k)  <span class="hljs-comment"># 构造聚类器</span><br>    estimator.fit(df_features[[ <span class="hljs-string">&#x27;X4&#x27;</span>, <span class="hljs-string">&#x27;X14&#x27;</span>]])<br>X = <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">20</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;k&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;sse&#x27;</span>)<br>plt.plot(X,SSE,<span class="hljs-string">&#x27;o-&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><a href="https://postimg.cc/ygmbQYnF"><img src="https://i.postimg.cc/gJQb0xZB/output-21-0.png" alt="output-21-0.png"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 可以看出最佳k值为5</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">data2 = data1[[<span class="hljs-string">&#x27;X4&#x27;</span>,<span class="hljs-string">&#x27;X14&#x27;</span>]]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># k-means </span><br>clf = KMeans(n_clusters=<span class="hljs-number">5</span>)<br><span class="hljs-comment">#print(data2)</span><br>clf = clf.fit(data2)<br>clf.labels_<br></code></pre></td></tr></table></figure><pre><code>array([4, 0, 3, ..., 4, 1, 4])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#获取中心值</span><br>centroids=clf.cluster_centers_<br>centroids<br></code></pre></td></tr></table></figure><pre><code>array([[ 1.50934579,  0.7954856 ],       [ 9.49019608,  0.72724343],       [ 3.99317406,  0.75813807],       [11.52941176,  0.73337501],       [ 7.05016722,  0.67570864]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  用每簇的中心值来代表这一类的水平</span><br><br>columns=[<span class="hljs-string">&#x27;X4&#x27;</span>, <span class="hljs-string">&#x27;X14&#x27;</span>]<br>result=pd.DataFrame(centroids,columns=columns)<br><br>result<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>X4</th>      <th>X14</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.509346</td>      <td>0.795486</td>    </tr>    <tr>      <th>1</th>      <td>9.490196</td>      <td>0.727243</td>    </tr>    <tr>      <th>2</th>      <td>3.993174</td>      <td>0.758138</td>    </tr>    <tr>      <th>3</th>      <td>11.529412</td>      <td>0.733375</td>    </tr>    <tr>      <th>4</th>      <td>7.050167</td>      <td>0.675709</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 数据归一</span><br>result=(result-result.mean(axis=<span class="hljs-number">0</span>))/(result.std(axis=<span class="hljs-number">0</span>))<br>result<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>X4</th>      <th>X14</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>-1.286294</td>      <td>1.308114</td>    </tr>    <tr>      <th>1</th>      <td>0.685944</td>      <td>-0.244505</td>    </tr>    <tr>      <th>2</th>      <td>-0.672487</td>      <td>0.458397</td>    </tr>    <tr>      <th>3</th>      <td>1.189877</td>      <td>-0.105002</td>    </tr>    <tr>      <th>4</th>      <td>0.082961</td>      <td>-1.417004</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;SimHei&#x27;</span>]<br>plt.rcParams[<span class="hljs-string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="hljs-literal">False</span><br><br>result[<span class="hljs-string">&#x27;团队分类&#x27;</span>]=<span class="hljs-built_in">list</span>([<span class="hljs-string">&#x27;团队1&#x27;</span>,<span class="hljs-string">&#x27;团队2&#x27;</span>,<span class="hljs-string">&#x27;团队3&#x27;</span>,<span class="hljs-string">&#x27;团队4&#x27;</span>,<span class="hljs-string">&#x27;团队5&#x27;</span>]) <br>p=result.plot.bar(figsize=(<span class="hljs-number">20</span>,<span class="hljs-number">16</span>),x=<span class="hljs-string">&#x27;团队分类&#x27;</span>,title=<span class="hljs-string">&#x27;团队分类&#x27;</span>,legend=<span class="hljs-string">&#x27;beast&#x27;</span>)<br>p.grid(linestyle=<span class="hljs-string">&#x27;--&#x27;</span>)<br>p.legend(fontsize=<span class="hljs-number">11</span>)<br></code></pre></td></tr></table></figure><pre><code>&lt;matplotlib.legend.Legend at 0x290ef9f0940&gt;</code></pre><p><a href="https://postimg.cc/s1JL5xMz"><img src="https://i.postimg.cc/RVrz5n9W/output-28-1.png" alt="output-28-1.png"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 求出簇内误方差</span><br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> scale<br>x=pd.DataFrame(scale(data1))<br>SSE = [] <br>k_range = <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">20</span>)<br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> k_range:<br>    km = KMeans(n_clusters = k)<br>    km.fit(x)<br>    SSE.append(km.inertia_)<br>SSE<br></code></pre></td></tr></table></figure><pre><code>[13167.000000000002, 10368.001747788787, 9059.320705761347, 7910.63025239119, 6956.651138200236, 6077.878903205976, 5511.898303743294, 4795.324291351495, 4429.152799214559, 3906.8041968464554, 3603.2482162246365, 3316.165899966484, 3147.436870420017, 2878.2859554852253, 2684.5121690958435, 2563.069034412572, 2421.7083978310657, 2315.6588424369897, 2228.865852777383]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">from</span> sklearn.cluster <span class="hljs-keyword">import</span> KMeans<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br> <br>df_features = data1 <span class="hljs-comment"># 读入数据</span><br><br><span class="hljs-comment"># 利用SSE选择k</span><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">20</span>):<br>    estimator = KMeans(n_clusters=k)  <span class="hljs-comment"># 构造聚类器</span><br>    estimator.fit(df_features[[ <span class="hljs-string">&#x27;X4&#x27;</span>,<span class="hljs-string">&#x27;X5&#x27;</span>,<span class="hljs-string">&#x27;X6&#x27;</span>,<span class="hljs-string">&#x27;X7&#x27;</span>,<span class="hljs-string">&#x27;X8&#x27;</span>,<span class="hljs-string">&#x27;X9&#x27;</span>,<span class="hljs-string">&#x27;X10&#x27;</span>,<span class="hljs-string">&#x27;X11&#x27;</span>,<span class="hljs-string">&#x27;X12&#x27;</span>,<span class="hljs-string">&#x27;X13&#x27;</span>,<span class="hljs-string">&#x27;X14&#x27;</span>]])<br>X = <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">20</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;k&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;sse&#x27;</span>)<br>plt.plot(X,SSE,<span class="hljs-string">&#x27;o-&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><a href="https://postimg.cc/JG6ddF3d"><img src="https://i.postimg.cc/FHN515Ym/output-30-0.png" alt="output-30-0.png"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># k-means </span><br>clf = KMeans(n_clusters=<span class="hljs-number">5</span>)<br><br>clf = clf.fit(data1)<br>clf.labels_<br></code></pre></td></tr></table></figure><pre><code>array([1, 4, 0, ..., 4, 4, 4])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#获取中心值</span><br>centroids=clf.cluster_centers_<br>centroids<br></code></pre></td></tr></table></figure><pre><code>array([[ 7.64179104e+00,  7.33582090e-01,  1.41852239e+01,         9.67542289e+02,  3.75223881e+03,  2.67114428e+01,         2.23880597e-02,  1.49253731e-01,  2.43781095e-01,         3.34527363e+01,  7.22864179e-01],       [ 5.97450425e+00,  7.15212465e-01,  2.35174788e+01,         1.06944476e+03,  6.65855524e+03,  4.08356941e+01,         2.37960340e+00,  7.13881020e-01,  3.03116147e-01,         5.24617564e+01,  7.15187532e-01],       [ 5.93333333e+00,  7.23939394e-01,  2.39216364e+01,         1.08087273e+03,  1.05087273e+04,  4.88242424e+01,         7.77156117e-16,  7.21644966e-16, -1.66533454e-16,         5.49757576e+01,  7.34676496e-01],       [ 5.33333333e+00,  8.00000000e-01,  2.13800000e+01,         1.94093333e+04,  6.19000000e+03,  7.86666667e+01,         1.11022302e-16,  0.00000000e+00,  0.00000000e+00,         5.35833333e+01,  8.83637858e-01],       [ 6.43432203e+00,  7.39830508e-01,  5.93468220e+00,         1.02024576e+03,  1.25317797e+03,  3.69194915e+01,         6.25000000e-02,  3.38983051e-01,  5.08474576e-02,         1.43908898e+01,  7.53440033e-01]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  用每簇的中心值来代表这一类的水平</span><br><br>columns=[ <span class="hljs-string">&#x27;X4&#x27;</span>,<span class="hljs-string">&#x27;X5&#x27;</span>,<span class="hljs-string">&#x27;X6&#x27;</span>,<span class="hljs-string">&#x27;X7&#x27;</span>,<span class="hljs-string">&#x27;X8&#x27;</span>,<span class="hljs-string">&#x27;X9&#x27;</span>,<span class="hljs-string">&#x27;X10&#x27;</span>,<span class="hljs-string">&#x27;X11&#x27;</span>,<span class="hljs-string">&#x27;X12&#x27;</span>,<span class="hljs-string">&#x27;X13&#x27;</span>,<span class="hljs-string">&#x27;X14&#x27;</span>]<br>result=pd.DataFrame(centroids,columns=columns)<br><br>result<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>X4</th>      <th>X5</th>      <th>X6</th>      <th>X7</th>      <th>X8</th>      <th>X9</th>      <th>X10</th>      <th>X11</th>      <th>X12</th>      <th>X13</th>      <th>X14</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>7.641791</td>      <td>0.733582</td>      <td>14.185224</td>      <td>967.542289</td>      <td>3752.238806</td>      <td>26.711443</td>      <td>2.238806e-02</td>      <td>1.492537e-01</td>      <td>2.437811e-01</td>      <td>33.452736</td>      <td>0.722864</td>    </tr>    <tr>      <th>1</th>      <td>5.974504</td>      <td>0.715212</td>      <td>23.517479</td>      <td>1069.444759</td>      <td>6658.555241</td>      <td>40.835694</td>      <td>2.379603e+00</td>      <td>7.138810e-01</td>      <td>3.031161e-01</td>      <td>52.461756</td>      <td>0.715188</td>    </tr>    <tr>      <th>2</th>      <td>5.933333</td>      <td>0.723939</td>      <td>23.921636</td>      <td>1080.872727</td>      <td>10508.727273</td>      <td>48.824242</td>      <td>7.771561e-16</td>      <td>7.216450e-16</td>      <td>-1.665335e-16</td>      <td>54.975758</td>      <td>0.734676</td>    </tr>    <tr>      <th>3</th>      <td>5.333333</td>      <td>0.800000</td>      <td>21.380000</td>      <td>19409.333333</td>      <td>6190.000000</td>      <td>78.666667</td>      <td>1.110223e-16</td>      <td>0.000000e+00</td>      <td>0.000000e+00</td>      <td>53.583333</td>      <td>0.883638</td>    </tr>    <tr>      <th>4</th>      <td>6.434322</td>      <td>0.739831</td>      <td>5.934682</td>      <td>1020.245763</td>      <td>1253.177966</td>      <td>36.919492</td>      <td>6.250000e-02</td>      <td>3.389831e-01</td>      <td>5.084746e-02</td>      <td>14.390890</td>      <td>0.753440</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 数据归一</span><br>result=(result-result.mean(axis=<span class="hljs-number">0</span>))/(result.std(axis=<span class="hljs-number">0</span>))<br>result<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>X4</th>      <th>X5</th>      <th>X6</th>      <th>X7</th>      <th>X8</th>      <th>X9</th>      <th>X10</th>      <th>X11</th>      <th>X12</th>      <th>X13</th>      <th>X14</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.595128</td>      <td>-0.266799</td>      <td>-0.468191</td>      <td>-0.455358</td>      <td>-0.555229</td>      <td>-0.997981</td>      <td>-0.445977</td>      <td>-0.304834</td>      <td>0.865386</td>      <td>-0.471215</td>      <td>-0.562291</td>    </tr>    <tr>      <th>1</th>      <td>-0.334401</td>      <td>-0.815573</td>      <td>0.744629</td>      <td>-0.442958</td>      <td>0.285093</td>      <td>-0.281737</td>      <td>1.788331</td>      <td>1.583047</td>      <td>1.278707</td>      <td>0.605367</td>      <td>-0.672696</td>    </tr>    <tr>      <th>2</th>      <td>-0.382048</td>      <td>-0.554865</td>      <td>0.797153</td>      <td>-0.441567</td>      <td>1.398317</td>      <td>0.123365</td>      <td>-0.467198</td>      <td>-0.803878</td>      <td>-0.832763</td>      <td>0.747749</td>      <td>-0.392407</td>    </tr>    <tr>      <th>3</th>      <td>-1.076420</td>      <td>1.717371</td>      <td>0.466842</td>      <td>1.788828</td>      <td>0.149616</td>      <td>1.636681</td>      <td>-0.467198</td>      <td>-0.803878</td>      <td>-0.832763</td>      <td>0.668888</td>      <td>1.749945</td>    </tr>    <tr>      <th>4</th>      <td>0.197740</td>      <td>-0.080134</td>      <td>-1.540432</td>      <td>-0.448945</td>      <td>-1.277798</td>      <td>-0.480328</td>      <td>-0.407957</td>      <td>0.329542</td>      <td>-0.478566</td>      <td>-1.550789</td>      <td>-0.122551</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;SimHei&#x27;</span>]<br>plt.rcParams[<span class="hljs-string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="hljs-literal">False</span><br><br>result[<span class="hljs-string">&#x27;团队分类&#x27;</span>]=<span class="hljs-built_in">list</span>([<span class="hljs-string">&#x27;团队1&#x27;</span>,<span class="hljs-string">&#x27;团队2&#x27;</span>,<span class="hljs-string">&#x27;团队3&#x27;</span>,<span class="hljs-string">&#x27;团队4&#x27;</span>,<span class="hljs-string">&#x27;团队5&#x27;</span>]) <br>p=result.plot.bar(figsize=(<span class="hljs-number">20</span>,<span class="hljs-number">16</span>),x=<span class="hljs-string">&#x27;团队分类&#x27;</span>,title=<span class="hljs-string">&#x27;团队分类&#x27;</span>,legend=<span class="hljs-string">&#x27;beast&#x27;</span>)<br>p.grid(linestyle=<span class="hljs-string">&#x27;--&#x27;</span>)<br>p.legend(fontsize=<span class="hljs-number">11</span>)<br></code></pre></td></tr></table></figure><pre><code>&lt;matplotlib.legend.Legend at 0x290efa33780&gt;</code></pre><p><a href="https://postimg.cc/cgSDnGZ6"><img src="https://i.postimg.cc/W3DxxsHm/output-35-1.png" alt="output-35-1.png"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  把时间类型改成datatime类型</span><br><br>data[<span class="hljs-string">&#x27;X0&#x27;</span>] = pd.to_datetime(data[<span class="hljs-string">&#x27;X0&#x27;</span>], <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%m/%d/%Y&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  设置起始时间</span><br><span class="hljs-keyword">import</span> datetime<br>start = datetime.datetime(<span class="hljs-number">2015</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br>end = datetime.datetime(<span class="hljs-number">2015</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">subset = data[data[<span class="hljs-string">&#x27;X0&#x27;</span>]&gt;=start]<br>data3 = subset[subset[<span class="hljs-string">&#x27;X0&#x27;</span>]&lt;=end]<br>data3.shape<br></code></pre></td></tr></table></figure><pre><code>(1005, 15)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  选出我们要使用的数据</span><br>data3<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>X0</th>      <th>X1</th>      <th>X2</th>      <th>X3</th>      <th>X4</th>      <th>X5</th>      <th>X6</th>      <th>X7</th>      <th>X8</th>      <th>X9</th>      <th>X10</th>      <th>X11</th>      <th>X12</th>      <th>X13</th>      <th>X14</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>2015-01-01</td>      <td>Quarter1</td>      <td>sweing</td>      <td>Thursday</td>      <td>8</td>      <td>0.80</td>      <td>26.16</td>      <td>1108.0</td>      <td>7080</td>      <td>98</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>59.0</td>      <td>0.940725</td>    </tr>    <tr>      <th>1</th>      <td>2015-01-01</td>      <td>Quarter1</td>      <td>finishing</td>      <td>Thursday</td>      <td>1</td>      <td>0.75</td>      <td>3.94</td>      <td>1039.0</td>      <td>960</td>      <td>0</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>8.0</td>      <td>0.886500</td>    </tr>    <tr>      <th>2</th>      <td>2015-01-01</td>      <td>Quarter1</td>      <td>sweing</td>      <td>Thursday</td>      <td>11</td>      <td>0.80</td>      <td>11.41</td>      <td>968.0</td>      <td>3660</td>      <td>50</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>30.5</td>      <td>0.800570</td>    </tr>    <tr>      <th>3</th>      <td>2015-01-01</td>      <td>Quarter1</td>      <td>sweing</td>      <td>Thursday</td>      <td>12</td>      <td>0.80</td>      <td>11.41</td>      <td>968.0</td>      <td>3660</td>      <td>50</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>30.5</td>      <td>0.800570</td>    </tr>    <tr>      <th>4</th>      <td>2015-01-01</td>      <td>Quarter1</td>      <td>sweing</td>      <td>Thursday</td>      <td>6</td>      <td>0.80</td>      <td>25.90</td>      <td>1170.0</td>      <td>1920</td>      <td>50</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>56.0</td>      <td>0.800382</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>1000</th>      <td>2015-03-01</td>      <td>Quarter1</td>      <td>finishing</td>      <td>Sunday</td>      <td>2</td>      <td>0.70</td>      <td>3.90</td>      <td>1039.0</td>      <td>960</td>      <td>0</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>8.0</td>      <td>0.585000</td>    </tr>    <tr>      <th>1001</th>      <td>2015-03-01</td>      <td>Quarter1</td>      <td>sweing</td>      <td>Sunday</td>      <td>7</td>      <td>0.80</td>      <td>30.10</td>      <td>934.0</td>      <td>6960</td>      <td>0</td>      <td>3.5</td>      <td>15</td>      <td>0</td>      <td>58.0</td>      <td>0.579511</td>    </tr>    <tr>      <th>1002</th>      <td>2015-03-01</td>      <td>Quarter1</td>      <td>finishing</td>      <td>Sunday</td>      <td>1</td>      <td>0.60</td>      <td>3.94</td>      <td>1039.0</td>      <td>3360</td>      <td>0</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>8.0</td>      <td>0.448722</td>    </tr>    <tr>      <th>1003</th>      <td>2015-03-01</td>      <td>Quarter1</td>      <td>finishing</td>      <td>Sunday</td>      <td>9</td>      <td>0.75</td>      <td>2.90</td>      <td>1039.0</td>      <td>960</td>      <td>0</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>8.0</td>      <td>0.447083</td>    </tr>    <tr>      <th>1004</th>      <td>2015-03-01</td>      <td>Quarter1</td>      <td>finishing</td>      <td>Sunday</td>      <td>7</td>      <td>0.80</td>      <td>4.60</td>      <td>1039.0</td>      <td>3360</td>      <td>0</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>8.0</td>      <td>0.350417</td>    </tr>  </tbody></table><p>1005 rows × 15 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">data3[<span class="hljs-string">&#x27;X2&#x27;</span>].unique()<br><br><span class="hljs-comment">#  一共有三个部门</span><br></code></pre></td></tr></table></figure><pre><code>array([&#39;sweing&#39;, &#39;finishing &#39;, &#39;finishing&#39;], dtype=object)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  因为我们更注重实际生产率，所以我们需要观察各个因素对实际生产率的影响</span><br><br><span class="hljs-comment">#  通过做corr（）相关系数热力图来查看皮尔逊相关系数比较相关性的大小</span><br><br><span class="hljs-comment"># 但是我们可以看出各个因素对实际生产率的影响都不是很大，所以我选择把相关系数大于0.1的因素当成主要因素，当然我们可以考虑把小于0.1的因素去除</span><br><span class="hljs-comment">#  X7 X8 X9 X10 X13相关系数小于0.1</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">data4=data3.drop([<span class="hljs-string">&#x27;X0&#x27;</span>,<span class="hljs-string">&#x27;X1&#x27;</span>,<span class="hljs-string">&#x27;X2&#x27;</span>,<span class="hljs-string">&#x27;X3&#x27;</span>],axis=<span class="hljs-number">1</span>)<br>data4.head()<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>X4</th>      <th>X5</th>      <th>X6</th>      <th>X7</th>      <th>X8</th>      <th>X9</th>      <th>X10</th>      <th>X11</th>      <th>X12</th>      <th>X13</th>      <th>X14</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>8</td>      <td>0.80</td>      <td>26.16</td>      <td>1108.0</td>      <td>7080</td>      <td>98</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>59.0</td>      <td>0.940725</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>0.75</td>      <td>3.94</td>      <td>1039.0</td>      <td>960</td>      <td>0</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>8.0</td>      <td>0.886500</td>    </tr>    <tr>      <th>2</th>      <td>11</td>      <td>0.80</td>      <td>11.41</td>      <td>968.0</td>      <td>3660</td>      <td>50</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>30.5</td>      <td>0.800570</td>    </tr>    <tr>      <th>3</th>      <td>12</td>      <td>0.80</td>      <td>11.41</td>      <td>968.0</td>      <td>3660</td>      <td>50</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>30.5</td>      <td>0.800570</td>    </tr>    <tr>      <th>4</th>      <td>6</td>      <td>0.80</td>      <td>25.90</td>      <td>1170.0</td>      <td>1920</td>      <td>50</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>56.0</td>      <td>0.800382</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  处理完后的数据</span><br><br>y = data4.X14.values<br>X = data4.drop([<span class="hljs-string">&#x27;X14&#x27;</span>], axis = <span class="hljs-number">1</span>)<br>X.shape<br></code></pre></td></tr></table></figure><pre><code>(1005, 10)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  对数据进行分割并进行归一化处理</span><br><span class="hljs-comment">#  作用：去均值和方差归一化。且是针对每一个特征维度来做的，而不是针对样本。（StandardScaler） </span><br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br>X_train,X_test,y_train,y_test = train_test_split(X,y,random_state=<span class="hljs-number">6</span>)  <span class="hljs-comment">#随机种子6</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> StandardScaler<br><br>standardScaler = StandardScaler()<br>standardScaler.fit(X_train)<br>X_train = standardScaler.transform(X_train)<br>X_test = standardScaler.transform(X_test) <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#模型构建（逻辑回归）</span><br><br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LogisticRegression <br><br>log_reg = LogisticRegression()<br>log_reg.fit(X_train,y_train.astype(<span class="hljs-string">&#x27;int&#x27;</span>))<br></code></pre></td></tr></table></figure><pre><code>LogisticRegression()</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># LogisticRegression的一些参数</span><br><br>LogisticRegression(C=<span class="hljs-number">1.0</span>, class_weight=<span class="hljs-literal">None</span>, dual=<span class="hljs-literal">False</span>, fit_intercept=<span class="hljs-literal">True</span>,<br>          intercept_scaling=<span class="hljs-number">1</span>, max_iter=<span class="hljs-number">100</span>, multi_class=<span class="hljs-string">&#x27;ovr&#x27;</span>, n_jobs=<span class="hljs-number">1</span>,<br>          penalty=<span class="hljs-string">&#x27;l2&#x27;</span>, random_state=<span class="hljs-literal">None</span>, solver=<span class="hljs-string">&#x27;liblinear&#x27;</span>, tol=<span class="hljs-number">0.0001</span>,<br>          verbose=<span class="hljs-number">0</span>, warm_start=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><pre><code>LogisticRegression(multi_class=&#39;ovr&#39;, n_jobs=1, solver=&#39;liblinear&#39;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">log_reg.score(X_train,y_train.astype(<span class="hljs-string">&#x27;int&#x27;</span>))<br></code></pre></td></tr></table></figure><pre><code>0.9867197875166003</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">log_reg.score(X_test,y_test.astype(<span class="hljs-string">&#x27;int&#x27;</span>))<br></code></pre></td></tr></table></figure><pre><code>0.9761904761904762</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score<br><br><br>y_predict_log = log_reg.predict(X_test)<br><br><span class="hljs-comment"># 调用accuracy_score计算分类准确度（metrices模型评估，指标这里面有accuracy_score这个就是准确率的计算）</span><br>accuracy_score(y_test.astype(<span class="hljs-string">&#x27;int&#x27;</span>),y_predict_log)<br></code></pre></td></tr></table></figure><pre><code>0.9761904761904762</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  使用网格搜索找出更好的模型参数</span><br><span class="hljs-comment">#  param_grid字典或字典列表（参数）</span><br><span class="hljs-comment"># 下面是构建parameter grid，其结构是key为参数名称，value是待搜索的数值列表的一个字典结构</span><br>param_grid = [<br>    &#123;<br>        <span class="hljs-string">&#x27;C&#x27;</span>:[<span class="hljs-number">0.01</span>,<span class="hljs-number">0.1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">100</span>],<br>        <span class="hljs-string">&#x27;penalty&#x27;</span>:[<span class="hljs-string">&#x27;l2&#x27;</span>,<span class="hljs-string">&#x27;l1&#x27;</span>],<br>        <span class="hljs-string">&#x27;class_weight&#x27;</span>:[<span class="hljs-string">&#x27;balanced&#x27;</span>,<span class="hljs-literal">None</span>]<br>    &#125;<br>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> GridSearchCV<br><br>grid_search = GridSearchCV(log_reg,param_grid,cv=<span class="hljs-number">10</span>,n_jobs=-<span class="hljs-number">1</span>)<br><span class="hljs-comment"># 使用 GridSearchCV 高效调参</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">%%time<br>grid_search.fit(X_train,y_train.astype(<span class="hljs-string">&#x27;int&#x27;</span>))<br></code></pre></td></tr></table></figure><pre><code>Wall time: 1.69 sGridSearchCV(cv=10, estimator=LogisticRegression(), n_jobs=-1,             param_grid=[&#123;&#39;C&#39;: [0.01, 0.1, 1, 10, 100],                          &#39;class_weight&#39;: [&#39;balanced&#39;, None],                          &#39;penalty&#39;: [&#39;l2&#39;, &#39;l1&#39;]&#125;])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  获取最佳估算器(模型)</span><br><br>grid_search.best_estimator_<br></code></pre></td></tr></table></figure><pre><code>LogisticRegression(C=1)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">LogisticRegression(C=<span class="hljs-number">0.01</span>, class_weight=<span class="hljs-literal">None</span>, dual=<span class="hljs-literal">False</span>, fit_intercept=<span class="hljs-literal">True</span>,<br>          intercept_scaling=<span class="hljs-number">1</span>, max_iter=<span class="hljs-number">100</span>, multi_class=<span class="hljs-string">&#x27;ovr&#x27;</span>, n_jobs=<span class="hljs-number">1</span>,<br>          penalty=<span class="hljs-string">&#x27;l2&#x27;</span>, random_state=<span class="hljs-literal">None</span>, solver=<span class="hljs-string">&#x27;liblinear&#x27;</span>, tol=<span class="hljs-number">0.0001</span>,<br>          verbose=<span class="hljs-number">0</span>, warm_start=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><pre><code>LogisticRegression(C=0.01, multi_class=&#39;ovr&#39;, n_jobs=1, solver=&#39;liblinear&#39;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查看最佳分数</span><br><br>grid_search.best_score_<br></code></pre></td></tr></table></figure><pre><code>0.9853859649122807</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  查看最佳参数</span><br><br>grid_search.best_params_<br></code></pre></td></tr></table></figure><pre><code>&#123;&#39;C&#39;: 1, &#39;class_weight&#39;: None, &#39;penalty&#39;: &#39;l2&#39;&#125;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">log_reg = grid_search.best_estimator_<br>log_reg.score(X_train,y_train.astype(<span class="hljs-string">&#x27;int&#x27;</span>))<br></code></pre></td></tr></table></figure><pre><code>0.9867197875166003</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">log_reg.score(X_test,y_test.astype(<span class="hljs-string">&#x27;int&#x27;</span>))<br></code></pre></td></tr></table></figure><pre><code>0.9761904761904762</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#查看F1指标</span><br><span class="hljs-comment">#  F1分数（F1-Score），又称为平衡F分数（BalancedScore），它被定义为精确率和召回率的调和平均数。</span><br><span class="hljs-comment">#  F1 = 2*（p*r）/(p+r)</span><br><br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> f1_score<br><br>f1_score(y_test.astype(<span class="hljs-string">&#x27;int&#x27;</span>),y_predict_log)<br></code></pre></td></tr></table></figure><pre><code>0.5</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> classification_report<br><br><br><span class="hljs-built_in">print</span>(classification_report(y_test.astype(<span class="hljs-string">&#x27;int&#x27;</span>),y_predict_log))<br></code></pre></td></tr></table></figure><pre><code>              precision    recall  f1-score   support           0       0.98      1.00      0.99       244           1       0.75      0.38      0.50         8    accuracy                           0.98       252   macro avg       0.86      0.69      0.74       252weighted avg       0.97      0.98      0.97       252</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#绘制混淆矩阵（可能性表格或是错误矩阵），评估分类的准确性</span><br><br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> confusion_matrix<br>cnf_matrix = confusion_matrix(y_test.astype(<span class="hljs-string">&#x27;int&#x27;</span>),y_predict_log)<br>cnf_matrix<br></code></pre></td></tr></table></figure><pre><code>array([[243,   1],       [  5,   3]], dtype=int64)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">plot_cnf_matirx</span>(<span class="hljs-params">cnf_matrix,description</span>):</span><br>    class_names = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]<br>    fig,ax = plt.subplots()<br>    tick_marks = np.arange(<span class="hljs-built_in">len</span>(class_names))<br>    plt.xticks(tick_marks,class_names)<br>    plt.yticks(tick_marks,class_names)<br><br><span class="hljs-comment">#create a heat map</span><br>    sns.heatmap(pd.DataFrame(cnf_matrix), annot = <span class="hljs-literal">True</span>, cmap = <span class="hljs-string">&#x27;OrRd&#x27;</span>,<br>               fmt = <span class="hljs-string">&#x27;g&#x27;</span>)<br>    ax.xaxis.set_label_position(<span class="hljs-string">&#x27;top&#x27;</span>)<br>    plt.tight_layout()<br>    plt.title(description, y = <span class="hljs-number">1.1</span>,fontsize=<span class="hljs-number">16</span>)<br>    plt.ylabel(<span class="hljs-string">&#x27;实际值0/1&#x27;</span>,fontsize=<span class="hljs-number">12</span>)<br>    plt.xlabel(<span class="hljs-string">&#x27;预测值0/1&#x27;</span>,fontsize=<span class="hljs-number">12</span>)<br>    plt.show()<br>    <br>plot_cnf_matirx(cnf_matrix,<span class="hljs-string">&#x27;Confusion matrix -- Logistic Regression&#x27;</span>)<br></code></pre></td></tr></table></figure><p><a href="https://postimg.cc/3dRtpBMj"><img src="https://i.postimg.cc/CLCX3Pm2/output-63-0.png" alt="output-63-0.png"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">decision_scores = log_reg.decision_function(X_test)<br><span class="hljs-comment"># 数据X上的异常打分，分数越高，则该数据点的异常程度越高</span><br><br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> precision_recall_curve<br><br>precisions,recalls,thresholds = precision_recall_curve(y_test.astype(<span class="hljs-string">&#x27;int&#x27;</span>),decision_scores)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  绘制AUC图</span><br><br>plt.plot(thresholds,precisions[:-<span class="hljs-number">1</span>])<br>plt.plot(thresholds,recalls[:-<span class="hljs-number">1</span>])<br>plt.grid()<br>plt.show()<br></code></pre></td></tr></table></figure><p><a href="https://postimg.cc/VSygxPJ4"><img src="https://i.postimg.cc/MGHLjWqk/output-65-0.png" alt="output-65-0.png"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 绘制ROC曲线</span><br><br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> roc_curve<br><br>fprs,tprs,thresholds = roc_curve(y_test.astype(<span class="hljs-string">&#x27;int&#x27;</span>),decision_scores)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">plot_roc_curve</span>(<span class="hljs-params">fprs,tprs</span>):</span><br>    plt.figure(figsize=(<span class="hljs-number">8</span>,<span class="hljs-number">6</span>),dpi=<span class="hljs-number">80</span>)<br>    plt.plot(fprs,tprs)<br>    plt.plot([<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],linestyle=<span class="hljs-string">&#x27;--&#x27;</span>)<br>    plt.xticks(fontsize=<span class="hljs-number">13</span>)<br>    plt.yticks(fontsize=<span class="hljs-number">13</span>)<br>    plt.ylabel(<span class="hljs-string">&#x27;TP rate&#x27;</span>,fontsize=<span class="hljs-number">15</span>)<br>    plt.xlabel(<span class="hljs-string">&#x27;FP rate&#x27;</span>,fontsize=<span class="hljs-number">15</span>)<br>    plt.title(<span class="hljs-string">&#x27;ROC&#x27;</span>,fontsize=<span class="hljs-number">17</span>)<br>    plt.show()<br>    <br>plot_roc_curve(fprs,tprs)<br></code></pre></td></tr></table></figure><p><a href="https://postimg.cc/HjS2pyJr"><img src="https://i.postimg.cc/CL06sCSs/output-67-0.png" alt="output-67-0.png"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 求面积,相当于求得分（AUC,ROC的面积）</span><br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> roc_auc_score  <span class="hljs-comment">#auc:area under curve</span><br><br>roc_auc_score(y_test.astype(<span class="hljs-string">&#x27;int&#x27;</span>),decision_scores)<br></code></pre></td></tr></table></figure><pre><code>0.825563524590164</code></pre><h1 id="逻辑回归模型得分0-82556"><a href="#逻辑回归模型得分0-82556" class="headerlink" title="逻辑回归模型得分0.82556"></a>逻辑回归模型得分0.82556</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#模型创建–KNN临近算法，略过基本模型的创建,直接使用网格搜索进行参数调优</span><br><br>param_grid = [<br>    &#123;<br>        <span class="hljs-string">&#x27;weights&#x27;</span>:[<span class="hljs-string">&#x27;uniform&#x27;</span>],<br>        <span class="hljs-string">&#x27;n_neighbors&#x27;</span>:[i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">31</span>)]<br>    &#125;,<br>    &#123;<br>        <span class="hljs-string">&#x27;weights&#x27;</span>:[<span class="hljs-string">&#x27;distance&#x27;</span>],<br>        <span class="hljs-string">&#x27;n_neighbors&#x27;</span>:[i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">31</span>)],<br>        <span class="hljs-string">&#x27;p&#x27;</span>:[i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>)]<br>    &#125;<br>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">%%time<br><span class="hljs-keyword">from</span> sklearn.neighbors <span class="hljs-keyword">import</span> KNeighborsClassifier<br>knn_clf = KNeighborsClassifier()<br><br>grid_search = GridSearchCV(knn_clf,param_grid)<br><br>grid_search.fit(X_train,y_train.astype(<span class="hljs-string">&#x27;int&#x27;</span>))<br></code></pre></td></tr></table></figure><pre><code>Wall time: 14.3 sGridSearchCV(estimator=KNeighborsClassifier(),             param_grid=[&#123;&#39;n_neighbors&#39;: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,                                          13, 14, 15, 16, 17, 18, 19, 20, 21,                                          22, 23, 24, 25, 26, 27, 28, 29, 30],                          &#39;weights&#39;: [&#39;uniform&#39;]&#125;,                         &#123;&#39;n_neighbors&#39;: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,                                          13, 14, 15, 16, 17, 18, 19, 20, 21,                                          22, 23, 24, 25, 26, 27, 28, 29, 30],                          &#39;p&#39;: [1, 2, 3, 4, 5], &#39;weights&#39;: [&#39;distance&#39;]&#125;])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">grid_search.best_estimator_<br></code></pre></td></tr></table></figure><pre><code>KNeighborsClassifier(n_neighbors=3)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">KNeighborsClassifier(algorithm=<span class="hljs-string">&#x27;auto&#x27;</span>, leaf_size=<span class="hljs-number">30</span>, metric=<span class="hljs-string">&#x27;minkowski&#x27;</span>,<br>           metric_params=<span class="hljs-literal">None</span>, n_jobs=<span class="hljs-number">1</span>, n_neighbors=<span class="hljs-number">24</span>, p=<span class="hljs-number">3</span>,<br>           weights=<span class="hljs-string">&#x27;distance&#x27;</span>)<br></code></pre></td></tr></table></figure><pre><code>KNeighborsClassifier(n_jobs=1, n_neighbors=24, p=3, weights=&#39;distance&#39;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">grid_search.best_score_<br></code></pre></td></tr></table></figure><pre><code>0.9840618101545253</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">grid_search.best_params_<br></code></pre></td></tr></table></figure><pre><code>&#123;&#39;n_neighbors&#39;: 3, &#39;weights&#39;: &#39;uniform&#39;&#125;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">knn_clf = grid_search.best_estimator_<br>knn_clf.score(X_train,y_train.astype(<span class="hljs-string">&#x27;int&#x27;</span>))<br></code></pre></td></tr></table></figure><pre><code>0.9853917662682603</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">knn_clf.score(X_test,y_test.astype(<span class="hljs-string">&#x27;int&#x27;</span>))<br></code></pre></td></tr></table></figure><pre><code>0.9801587301587301</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">y_predict_knn = knn_clf.predict(X_test)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  查看F1指标</span><br><br>f1_score(y_test.astype(<span class="hljs-string">&#x27;int&#x27;</span>),y_predict_knn)<br></code></pre></td></tr></table></figure><pre><code>0.5454545454545454</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(classification_report(y_test.astype(<span class="hljs-string">&#x27;int&#x27;</span>),y_predict_knn))<br></code></pre></td></tr></table></figure><pre><code>              precision    recall  f1-score   support           0       0.98      1.00      0.99       244           1       1.00      0.38      0.55         8    accuracy                           0.98       252   macro avg       0.99      0.69      0.77       252weighted avg       0.98      0.98      0.98       252</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  绘制混淆矩阵</span><br><br>cnf_matrix = confusion_matrix(y_test.astype(<span class="hljs-string">&#x27;int&#x27;</span>),y_predict_knn)<br>cnf_matrix<br></code></pre></td></tr></table></figure><pre><code>array([[244,   0],       [  5,   3]], dtype=int64)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 此处调用前面的绘制函数</span><br>plot_cnf_matirx(cnf_matrix,<span class="hljs-string">&#x27;Confusion matrix -- KNN&#x27;</span>)<br></code></pre></td></tr></table></figure><p><a href="https://postimg.cc/4YpVh73b"><img src="https://i.postimg.cc/dVxBpGPX/output-82-0.png" alt="output-82-0.png"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  绘制AUC图</span><br><br>y_probabilities = knn_clf.predict_proba(X_test)[:,<span class="hljs-number">1</span>]<br><br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> precision_recall_curve<br><br>precisions,recalls,thresholds = precision_recall_curve(y_test.astype(<span class="hljs-string">&#x27;int&#x27;</span>),y_probabilities)<br><br>plt.plot(thresholds,precisions[:-<span class="hljs-number">1</span>])<br>plt.plot(thresholds,recalls[:-<span class="hljs-number">1</span>])<br>plt.grid()<br>plt.show()<br></code></pre></td></tr></table></figure><p><a href="https://postimg.cc/NyYT8s9h"><img src="https://i.postimg.cc/9fwphzcf/output-83-0.png" alt="output-83-0.png"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  绘制ROC曲线</span><br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> roc_curve<br><br>fprs2,tprs2,thresholds = roc_curve(y_test.astype(<span class="hljs-string">&#x27;int&#x27;</span>),decision_scores)<br><span class="hljs-comment"># 此处调用前面的绘制函数</span><br>plot_roc_curve(fprs2,tprs2)<br></code></pre></td></tr></table></figure><p><a href="https://postimg.cc/HjS2pyJr"><img src="https://i.postimg.cc/CL06sCSs/output-67-0.png" alt="output-67-0.png"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 求面积,相当于求得分</span><br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> roc_auc_score  <span class="hljs-comment">#auc:area under curve</span><br><br>roc_auc_score(y_test.astype(<span class="hljs-string">&#x27;int&#x27;</span>),y_probabilities)<br></code></pre></td></tr></table></figure><pre><code>0.7984118852459017</code></pre><h1 id="KNN模型的得分为0-798411"><a href="#KNN模型的得分为0-798411" class="headerlink" title="KNN模型的得分为0.798411"></a>KNN模型的得分为0.798411</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  模型创建–DecisionTree</span><br><br><span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> DecisionTreeClassifier<br>dt_clf= DecisionTreeClassifier(random_state=<span class="hljs-number">6</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> GridSearchCV<br>param_grid = [<br>    &#123;<br>        <span class="hljs-string">&#x27;max_features&#x27;</span>:[<span class="hljs-string">&#x27;auto&#x27;</span>,<span class="hljs-string">&#x27;sqrt&#x27;</span>,<span class="hljs-string">&#x27;log2&#x27;</span>],<br>        <span class="hljs-string">&#x27;min_samples_split&#x27;</span>:[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>],<br>        <span class="hljs-string">&#x27;min_samples_leaf&#x27;</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>]<br>    &#125;<br>]<br><br>grid_search = GridSearchCV(dt_clf,param_grid)<br><br>grid_search.fit(X_train,y_train.astype(<span class="hljs-string">&#x27;int&#x27;</span>))<br></code></pre></td></tr></table></figure><pre><code>GridSearchCV(estimator=DecisionTreeClassifier(random_state=6),             param_grid=[&#123;&#39;max_features&#39;: [&#39;auto&#39;, &#39;sqrt&#39;, &#39;log2&#39;],                          &#39;min_samples_leaf&#39;: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,                                               11],                          &#39;min_samples_split&#39;: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11,                                                12, 13, 14, 15, 16, 17, 18]&#125;])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">grid_search.best_estimator_<br></code></pre></td></tr></table></figure><pre><code>DecisionTreeClassifier(max_features=&#39;auto&#39;, min_samples_split=9, random_state=6)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">grid_search.best_score_<br></code></pre></td></tr></table></figure><pre><code>0.9814128035320089</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">grid_search.best_params_<br></code></pre></td></tr></table></figure><pre><code>&#123;&#39;max_features&#39;: &#39;auto&#39;, &#39;min_samples_leaf&#39;: 1, &#39;min_samples_split&#39;: 9&#125;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">dt_clf = grid_search.best_estimator_<br>dt_clf.score(X_train,y_train.astype(<span class="hljs-string">&#x27;int&#x27;</span>))<br></code></pre></td></tr></table></figure><pre><code>0.9814077025232404</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">dt_clf.score(X_test,y_test.astype(<span class="hljs-string">&#x27;int&#x27;</span>))<br></code></pre></td></tr></table></figure><pre><code>0.9761904761904762</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">y_predict_dt = dt_clf.predict(X_test)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  查看F1指标</span><br><br>f1_score(y_test.astype(<span class="hljs-string">&#x27;int&#x27;</span>),y_predict_dt)<br></code></pre></td></tr></table></figure><pre><code>0.4</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(classification_report(y_test.astype(<span class="hljs-string">&#x27;int&#x27;</span>),y_predict_dt))<br></code></pre></td></tr></table></figure><pre><code>              precision    recall  f1-score   support           0       0.98      1.00      0.99       244           1       1.00      0.25      0.40         8    accuracy                           0.98       252   macro avg       0.99      0.62      0.69       252weighted avg       0.98      0.98      0.97       252</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  绘制混淆矩阵</span><br><br>cnf_matrix = confusion_matrix(y_test.astype(<span class="hljs-string">&#x27;int&#x27;</span>),y_predict_dt)<br>cnf_matrix<br></code></pre></td></tr></table></figure><pre><code>array([[244,   0],       [  6,   2]], dtype=int64)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 此处调用前面的绘制函数</span><br>plot_cnf_matirx(cnf_matrix,<span class="hljs-string">&#x27;Confusion matrix -- DecisionTree&#x27;</span>)<br></code></pre></td></tr></table></figure><p><a href="https://postimg.cc/HcvyCbSH"><img src="https://i.postimg.cc/FzNg3Z3f/output-98-0.png" alt="output-98-0.png"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">y_probabilities = dt_clf.predict_proba(X_test)[:,<span class="hljs-number">1</span>]<br><br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> precision_recall_curve<br><br>precisions,recalls,thresholds = precision_recall_curve(y_test.astype(<span class="hljs-string">&#x27;int&#x27;</span>),y_probabilities)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.plot(thresholds,precisions[:-<span class="hljs-number">1</span>])<br>plt.plot(thresholds,recalls[:-<span class="hljs-number">1</span>])<br>plt.grid()<br>plt.show() <br></code></pre></td></tr></table></figure><p><a href="https://postimg.cc/SXy22g3k"><img src="https://i.postimg.cc/yNRFG5Tg/output-100-0.png" alt="output-100-0.png"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  绘制ROC曲线</span><br><br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> roc_curve<br>fprs3,tprs3,thresholds3 = roc_curve(y_test.astype(<span class="hljs-string">&#x27;int&#x27;</span>),y_probabilities)<br><span class="hljs-comment"># 此处调用前面的绘制函数</span><br>plot_roc_curve(fprs3,tprs3)<br></code></pre></td></tr></table></figure><p><a href="https://postimg.cc/m1FtfJzN"><img src="https://i.postimg.cc/BbmDDGJy/output-101-0.png" alt="output-101-0.png"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 求面积,相当于求得分</span><br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> roc_auc_score  <span class="hljs-comment">#auc:area under curve</span><br><br>roc_auc_score(y_test.astype(<span class="hljs-string">&#x27;int&#x27;</span>),y_probabilities)<br></code></pre></td></tr></table></figure><pre><code>0.8539959016393442</code></pre><h1 id="决策树模型的得分为0-85399"><a href="#决策树模型的得分为0-85399" class="headerlink" title="决策树模型的得分为0.85399"></a>决策树模型的得分为0.85399</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  通过对比，我们选择XGboost模型</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  利用XGboost来预测数据</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  X7 X8 X9 X10 X13相关系数小于0.1</span><br><br>data5=data3.drop([<span class="hljs-string">&#x27;X0&#x27;</span>,<span class="hljs-string">&#x27;X1&#x27;</span>,<span class="hljs-string">&#x27;X2&#x27;</span>,<span class="hljs-string">&#x27;X3&#x27;</span>,<span class="hljs-string">&#x27;X7&#x27;</span>,<span class="hljs-string">&#x27;X8&#x27;</span>,<span class="hljs-string">&#x27;X9&#x27;</span>,<span class="hljs-string">&#x27;X10&#x27;</span>,<span class="hljs-string">&#x27;X13&#x27;</span>],axis=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">data5.head()<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>X4</th>      <th>X5</th>      <th>X6</th>      <th>X11</th>      <th>X12</th>      <th>X14</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>8</td>      <td>0.80</td>      <td>26.16</td>      <td>0</td>      <td>0</td>      <td>0.940725</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>0.75</td>      <td>3.94</td>      <td>0</td>      <td>0</td>      <td>0.886500</td>    </tr>    <tr>      <th>2</th>      <td>11</td>      <td>0.80</td>      <td>11.41</td>      <td>0</td>      <td>0</td>      <td>0.800570</td>    </tr>    <tr>      <th>3</th>      <td>12</td>      <td>0.80</td>      <td>11.41</td>      <td>0</td>      <td>0</td>      <td>0.800570</td>    </tr>    <tr>      <th>4</th>      <td>6</td>      <td>0.80</td>      <td>25.90</td>      <td>0</td>      <td>0</td>      <td>0.800382</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  进行训练和预测</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 为了正确评估模型性能，将数据划分为训练集和测试集，并在训练集上训练模型，在测试集上验证模型性能。</span><br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><br><span class="hljs-comment">## 选择其类别为0和1的样本 （不包括类别为2的样本）</span><br>data_target_part = data5[<span class="hljs-string">&#x27;X14&#x27;</span>]<br>data_features_part = data5[[x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> data5.columns <span class="hljs-keyword">if</span> x != <span class="hljs-string">&#x27;X14&#x27;</span>]]<br><br><span class="hljs-comment">## 测试集大小为20%， 80%/20%分</span><br>x_train, x_test, y_train, y_test = train_test_split(data_features_part, data_target_part, test_size = <span class="hljs-number">0.2</span>, random_state = <span class="hljs-number">2020</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> xgboost.sklearn <span class="hljs-keyword">import</span> XGBClassifier<br><span class="hljs-comment">## 定义 XGBoost模型 </span><br>clf = XGBClassifier()<br><span class="hljs-comment"># 在训练集上训练XGBoost模型</span><br>clf.fit(x_train, y_train)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在训练集和测试集上分布利用训练好的模型进行预测</span><br>train_predict = clf.predict(x_train)<br>test_predict = clf.predict(x_test)<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> metrics<br><br><span class="hljs-comment">## 利用accuracy（准确度）【预测正确的样本数目占总预测样本数目的比例】评估模型效果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;The accuracy of the Logistic Regression is:&#x27;</span>,metrics.accuracy_score(y_train,train_predict))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;The accuracy of the Logistic Regression is:&#x27;</span>,metrics.accuracy_score(y_test,test_predict))<br><br><span class="hljs-comment">## 查看混淆矩阵 (预测值和真实值的各类情况统计矩阵)</span><br>confusion_matrix_result = metrics.confusion_matrix(test_predict,y_test)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;The confusion matrix result:\n&#x27;</span>,confusion_matrix_result)<br><br><span class="hljs-comment"># 利用热力图对于结果进行可视化</span><br>plt.figure(figsize=(<span class="hljs-number">8</span>, <span class="hljs-number">6</span>))<br>sns.heatmap(confusion_matrix_result, annot=<span class="hljs-literal">True</span>, cmap=<span class="hljs-string">&#x27;Blues&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;Predicted labels&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;True labels&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 利用XGBoost进行特征选择</span><br><br>sns.barplot(y=data_features_part.columns, x=clf.feature_importances_)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#调参</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 从sklearn库中导入网格调参函数</span><br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> GridSearchCV<br><br><span class="hljs-comment">## 定义参数取值范围</span><br>learning_rate = [<span class="hljs-number">0.1</span>, <span class="hljs-number">0.3</span>, <span class="hljs-number">0.6</span>]<br>subsample = [<span class="hljs-number">0.8</span>, <span class="hljs-number">0.9</span>]<br>colsample_bytree = [<span class="hljs-number">0.6</span>, <span class="hljs-number">0.8</span>]<br>max_depth = [<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>]<br><br>parameters = &#123; <span class="hljs-string">&#x27;learning_rate&#x27;</span>: learning_rate,<br>              <span class="hljs-string">&#x27;subsample&#x27;</span>: subsample,<br>              <span class="hljs-string">&#x27;colsample_bytree&#x27;</span>:colsample_bytree,<br>              <span class="hljs-string">&#x27;max_depth&#x27;</span>: max_depth&#125;<br>model = XGBClassifier(n_estimators = <span class="hljs-number">50</span>)<br><br><span class="hljs-comment">## 进行网格搜索</span><br>clf = GridSearchCV(model, parameters, cv=<span class="hljs-number">3</span>, scoring=<span class="hljs-string">&#x27;accuracy&#x27;</span>,verbose=<span class="hljs-number">1</span>,n_jobs=-<span class="hljs-number">1</span>)<br>clf = clf.fit(x_train, y_train)<br>clf.best_params_<span class="hljs-comment">##网格搜索后的最优参数</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在训练集和测试集上分布利用最好的模型参数进行预测</span><br><br><span class="hljs-comment">## 定义带参数的 XGBoost模型 </span><br>clf = XGBClassifier(colsample_bytree = <span class="hljs-number">0.6</span>, learning_rate = <span class="hljs-number">0.3</span>, max_depth= <span class="hljs-number">8</span>, subsample = <span class="hljs-number">0.9</span>)<br><span class="hljs-comment"># 在训练集上训练XGBoost模型</span><br>clf.fit(x_train, y_train)<br><br>train_predict = clf.predict(x_train)<br>test_predict = clf.predict(x_test)<br><br><span class="hljs-comment">## 利用accuracy（准确度）【预测正确的样本数目占总预测样本数目的比例】评估模型效果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;The accuracy of the Logistic Regression is:&#x27;</span>,metrics.accuracy_score(y_train,train_predict))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;The accuracy of the Logistic Regression is:&#x27;</span>,metrics.accuracy_score(y_test,test_predict))<br><br><span class="hljs-comment">## 查看混淆矩阵 (预测值和真实值的各类情况统计矩阵)</span><br>confusion_matrix_result = metrics.confusion_matrix(test_predict,y_test)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;The confusion matrix result:\n&#x27;</span>,confusion_matrix_result)<br><br><span class="hljs-comment"># 利用热力图对于结果进行可视化</span><br>plt.figure(figsize=(<span class="hljs-number">8</span>, <span class="hljs-number">6</span>))<br>sns.heatmap(confusion_matrix_result, annot=<span class="hljs-literal">True</span>, cmap=<span class="hljs-string">&#x27;Blues&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;Predicted labels&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;True labels&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p>大家可以根据以下链接下载信息素养大赛校赛题，每年大同小异，考的基本都是那些，本人在21年参加素养大赛校赛时是刷的20年的题，适用。<br>此链接永久有效<br>链接：<a href="https://pan.baidu.com/s/1svu1k3AfeZfvsHoTbAs_eg">https://pan.baidu.com/s/1svu1k3AfeZfvsHoTbAs_eg</a><br>提取码：8888</p>]]></content>
    
    
    <categories>
      
      <category>python+机器学习+数据分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>素养大赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据分析算法-KNN算法例子</title>
    <link href="/2022/07/15/KNN%E7%AE%97%E6%B3%95/"/>
    <url>/2022/07/15/KNN%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="KNN的原理就是当预测一个新的值x的时候，根据它距离最近的K个点是什么类别来判断x属于哪个类别。"><a href="#KNN的原理就是当预测一个新的值x的时候，根据它距离最近的K个点是什么类别来判断x属于哪个类别。" class="headerlink" title="# KNN的原理就是当预测一个新的值x的时候，根据它距离最近的K个点是什么类别来判断x属于哪个类别。"></a># KNN的原理就是当预测一个新的值x的时候，根据它距离最近的K个点是什么类别来判断x属于哪个类别。</h5><h5 id="对重要的两点就是-K值的选取和点距离的计算"><a href="#对重要的两点就是-K值的选取和点距离的计算" class="headerlink" title="#  对重要的两点就是  K值的选取和点距离的计算"></a>#  对重要的两点就是  K值的选取和点距离的计算</h5><h5 id="——————————————————————————"><a href="#——————————————————————————" class="headerlink" title="——————————————————————————"></a>——————————————————————————</h5><h3 id="距离d的计算和K的取值"><a href="#距离d的计算和K的取值" class="headerlink" title="距离d的计算和K的取值"></a>距离d的计算和K的取值</h3><h5 id="如何确定K取多少值好呢？"><a href="#如何确定K取多少值好呢？" class="headerlink" title="#  如何确定K取多少值好呢？"></a>#  如何确定K取多少值好呢？</h5><h5 id="通过交叉验证（将样本数据按照一定比例，拆分出训练用的数据和验证用的数据，比如6：4拆分出部分训练数据和验证数据）"><a href="#通过交叉验证（将样本数据按照一定比例，拆分出训练用的数据和验证用的数据，比如6：4拆分出部分训练数据和验证数据）" class="headerlink" title="#  通过交叉验证（将样本数据按照一定比例，拆分出训练用的数据和验证用的数据，比如6：4拆分出部分训练数据和验证数据）"></a>#  通过交叉验证（将样本数据按照一定比例，拆分出训练用的数据和验证用的数据，比如6：4拆分出部分训练数据和验证数据）</h5><h5 id="从选取一个较小的K值开始，不断增加K的值，然后计算验证集合的方差，最终找到一个比较合适的K值。"><a href="#从选取一个较小的K值开始，不断增加K的值，然后计算验证集合的方差，最终找到一个比较合适的K值。" class="headerlink" title="#  从选取一个较小的K值开始，不断增加K的值，然后计算验证集合的方差，最终找到一个比较合适的K值。"></a>#  从选取一个较小的K值开始，不断增加K的值，然后计算验证集合的方差，最终找到一个比较合适的K值。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> load_iris<br><span class="hljs-keyword">from</span> sklearn.model_selection  <span class="hljs-keyword">import</span> cross_val_score<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.neighbors <span class="hljs-keyword">import</span> KNeighborsClassifier<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  KNN算法基本参数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">KNeighborsClassifier</span>(<span class="hljs-params">n_neighbors = <span class="hljs-number">5</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                       weights=<span class="hljs-string">&#x27;uniform&#x27;</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                       algorithm = <span class="hljs-string">&#x27;&#x27;</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                       leaf_size = <span class="hljs-string">&#x27;30&#x27;</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                       p = <span class="hljs-number">2</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                       metric = <span class="hljs-string">&#x27;minkowski&#x27;</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                       metric_params = <span class="hljs-literal">None</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                       n_jobs = <span class="hljs-literal">None</span></span>)</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  使用交叉验证方法选出最优的K值</span><br><span class="hljs-comment">#读取鸢尾花数据集</span><br>iris = load_iris()<br>x = iris.data<br>y = iris.target<br>k_range = <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">31</span>)<br>k_error = []<br><span class="hljs-comment">#循环，取k=1到k=31，查看误差效果</span><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> k_range:<br>    knn = KNeighborsClassifier(n_neighbors=k)<br>    <span class="hljs-comment">#cv参数决定数据集划分比例，这里是按照5:1划分训练集和测试集</span><br>    scores = cross_val_score(knn, x, y, cv=<span class="hljs-number">6</span>, scoring=<span class="hljs-string">&#x27;accuracy&#x27;</span>)<br>    k_error.append(<span class="hljs-number">1</span> - scores.mean())<br><span class="hljs-comment">#画图，x轴为k值，y值为误差值</span><br>plt.plot(k_range, k_error)<br>plt.xlabel(<span class="hljs-string">&#x27;Value of K for KNN&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;Error&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h5 id="明显在K-11的时候误差最小"><a href="#明显在K-11的时候误差最小" class="headerlink" title="#  明显在K=11的时候误差最小"></a>#  明显在K=11的时候误差最小</h5><h5 id="在实际问题当中，如果数据集比较大，为了较少训练时间，k的取值范围可以缩小"><a href="#在实际问题当中，如果数据集比较大，为了较少训练时间，k的取值范围可以缩小" class="headerlink" title="#  在实际问题当中，如果数据集比较大，为了较少训练时间，k的取值范围可以缩小"></a>#  在实际问题当中，如果数据集比较大，为了较少训练时间，k的取值范围可以缩小</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  有了 K 值我们就能运行 KNN 算法了</span><br><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> matplotlib.colors <span class="hljs-keyword">import</span> ListedColormap<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> neighbors, datasets<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>n_neighbors = <span class="hljs-number">11</span><br> <br> <span class="hljs-comment"># 导入一些要玩的数据</span><br>iris = datasets.load_iris()<br>x = iris.data[:, :<span class="hljs-number">2</span>]  <span class="hljs-comment"># 我们只采用前两个feature,方便画图在二维平面显示</span><br>y = iris.target<br> <br>h = <span class="hljs-number">.02</span>  <span class="hljs-comment"># 网格中的步长</span><br> <br> <span class="hljs-comment"># 创建彩色的图</span><br>cmap_light = ListedColormap([<span class="hljs-string">&#x27;#FFAAAA&#x27;</span>, <span class="hljs-string">&#x27;#AAFFAA&#x27;</span>, <span class="hljs-string">&#x27;#AAAAFF&#x27;</span>])<br>cmap_bold = ListedColormap([<span class="hljs-string">&#x27;#FF0000&#x27;</span>, <span class="hljs-string">&#x27;#00FF00&#x27;</span>, <span class="hljs-string">&#x27;#0000FF&#x27;</span>])<br> <br><span class="hljs-comment">#weights是KNN模型中的一个参数，上述参数介绍中有介绍，这里绘制两种权重参数下KNN的效果图</span><br><span class="hljs-keyword">for</span> weights <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;uniform&#x27;</span>, <span class="hljs-string">&#x27;distance&#x27;</span>]:<br>    <span class="hljs-comment"># 创建了一个knn分类器的实例，并拟合数据</span><br>    clf = neighbors.KNeighborsClassifier(n_neighbors, weights=weights)<br>    clf.fit(x, y)<br> <br>    <span class="hljs-comment"># 绘制决策边界，为此，我们将为每个分配一个颜色</span><br>    <span class="hljs-comment"># 来绘制网格中的点 [x_min, x_max]x[y_min, y_max].</span><br>    x_min, x_max = x[:, <span class="hljs-number">0</span>].<span class="hljs-built_in">min</span>() - <span class="hljs-number">1</span>, x[:, <span class="hljs-number">0</span>].<span class="hljs-built_in">max</span>() + <span class="hljs-number">1</span><br>    y_min, y_max = x[:, <span class="hljs-number">1</span>].<span class="hljs-built_in">min</span>() - <span class="hljs-number">1</span>, x[:, <span class="hljs-number">1</span>].<span class="hljs-built_in">max</span>() + <span class="hljs-number">1</span><br>    xx, yy = np.meshgrid(np.arange(x_min, x_max, h),<br>                         np.arange(y_min, y_max, h))<br>    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])<br> <br>    <span class="hljs-comment"># 将结果放入一个彩色图中</span><br>    Z = Z.reshape(xx.shape)<br>    plt.figure()<br>    plt.pcolormesh(xx, yy, Z, cmap=cmap_light)<br> <br>    <span class="hljs-comment"># 绘制训练点</span><br>    plt.scatter(x[:, <span class="hljs-number">0</span>], x[:, <span class="hljs-number">1</span>], c=y, cmap=cmap_bold)<br>    plt.xlim(xx.<span class="hljs-built_in">min</span>(), xx.<span class="hljs-built_in">max</span>())<br>    plt.ylim(yy.<span class="hljs-built_in">min</span>(), yy.<span class="hljs-built_in">max</span>())<br>    plt.title(<span class="hljs-string">&quot;3-Class classification (k = %i, weights = &#x27;%s&#x27;)&quot;</span> % (n_neighbors, weights))<br>    plt.show()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> load_iris<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#从sklearn中导入iris数据集</span><br><br>iris = load_iris()<br>X = iris.data<br>y = iris.target<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#计算data1和data2的欧几里得距离。</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">euclideanDistance</span>(<span class="hljs-params">data1, data2</span>):</span><br>    distance = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.neighbors <span class="hljs-keyword">import</span> NearestNeighbors<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>X = np.array([[-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>], [-<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>], [-<span class="hljs-number">3</span>, -<span class="hljs-number">2</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">2</span>]])<br>nbrs = NearestNeighbors(n_neighbors=<span class="hljs-number">2</span>, algorithm=<span class="hljs-string">&#x27;ball_tree&#x27;</span>).fit(X)<br>distances, indices = nbrs.kneighbors(X)<br>indices <br>distances<br></code></pre></td></tr></table></figure><h5 id="因为查询集匹配训练集，每个点的最邻近点是其自身，距离为0"><a href="#因为查询集匹配训练集，每个点的最邻近点是其自身，距离为0" class="headerlink" title="#  因为查询集匹配训练集，每个点的最邻近点是其自身，距离为0"></a>#  因为查询集匹配训练集，每个点的最邻近点是其自身，距离为0</h5><h5 id="还可以有效地生成一个稀疏图来标识相连点之间的连接情况"><a href="#还可以有效地生成一个稀疏图来标识相连点之间的连接情况" class="headerlink" title="#还可以有效地生成一个稀疏图来标识相连点之间的连接情况"></a>#还可以有效地生成一个稀疏图来标识相连点之间的连接情况</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">nbrs.kneighbors_graph(X).toarray()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.neighbors <span class="hljs-keyword">import</span> KDTree<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>X = np.array([[-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>], [-<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>], [-<span class="hljs-number">3</span>, -<span class="hljs-number">2</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">2</span>]])<br>kdt = KDTree(X, leaf_size=<span class="hljs-number">30</span>, metric=<span class="hljs-string">&#x27;euclidean&#x27;</span>)<br>kdt.query(X, k=<span class="hljs-number">2</span>, return_distance=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  最近质心分类</span><br><br><span class="hljs-keyword">from</span> sklearn.neighbors.nearest_centroid <span class="hljs-keyword">import</span> NearestCentroid<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>X = np.array([[-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>], [-<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>], [-<span class="hljs-number">3</span>, -<span class="hljs-number">2</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">2</span>]])<br>y = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>])<br>clf = NearestCentroid()<br><span class="hljs-built_in">print</span>(clf.fit(X, y))<br><br><span class="hljs-built_in">print</span>(clf.predict([[-<span class="hljs-number">0.8</span>, -<span class="hljs-number">1</span>]]))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  利用 scikit-learn 包中的 train_test_split 辅助函数</span><br><span class="hljs-comment">#  可以很快地将实验数据集划分为任何训练集（training sets）和测试集（test sets）。</span><br><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> svm<br><br>iris = datasets.load_iris()<br>iris.data.shape, iris.target.shape<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  我们能快速采样到原数据集的 40% 作为测试集，从而测评（评估）我们的分类器</span><br><br>X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=<span class="hljs-number">0.4</span>, random_state=<span class="hljs-number">0</span>)<br><br>X_train.shape, y_train.shape<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">X_test.shape, y_test.shape<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">clf = svm.SVC(kernel=<span class="hljs-string">&#x27;linear&#x27;</span>, C=<span class="hljs-number">1</span>).fit(X_train, y_train)<br>clf.score(X_test, y_test)    <span class="hljs-comment">#  交叉验证评估估计器性能</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python+机器学习+数据分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python-重点工具(Numpy)</title>
    <link href="/2022/07/15/python%E9%87%8D%E7%82%B9%E5%B7%A5%E5%85%B7%E6%8E%8C%E6%8F%A1%EF%BC%88numpy%EF%BC%89/"/>
    <url>/2022/07/15/python%E9%87%8D%E7%82%B9%E5%B7%A5%E5%85%B7%E6%8E%8C%E6%8F%A1%EF%BC%88numpy%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="Numpy基础数据结构"><a href="#Numpy基础数据结构" class="headerlink" title="Numpy基础数据结构"></a>Numpy基础数据结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy  <span class="hljs-keyword">as</span> np<br><br>ar = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]])    <span class="hljs-comment">#数组没有逗号</span><br><span class="hljs-built_in">print</span>(ar)<br><br><span class="hljs-built_in">print</span>(ar.ndim)     <span class="hljs-comment">#几维数组</span><br><br><span class="hljs-built_in">print</span>(ar.shape)<br><br><span class="hljs-built_in">print</span>(ar.size)  <span class="hljs-comment">#总共元素的个数</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(ar),ar.dtype)<br><br><span class="hljs-built_in">print</span>(ar.itemsize)   <span class="hljs-comment">#字节大小、</span><br><br><span class="hljs-built_in">print</span>(ar.data)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  如何创建数组</span><br><br>ar1 = np.array(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))<br>ar2 = np.arange(<span class="hljs-number">10</span>)<br>ar3 = np.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])<br><span class="hljs-built_in">print</span>(ar1)<br><span class="hljs-built_in">print</span>(ar2)<br><span class="hljs-built_in">print</span>(ar3)<br><br><span class="hljs-built_in">print</span>(np.random.rand(<span class="hljs-number">10</span>).reshape(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#linspace():创建num个均匀间隔的样本</span><br><br><span class="hljs-built_in">print</span>(np.linspace(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,num = <span class="hljs-number">21</span>))<br><br><span class="hljs-built_in">print</span>(np.linspace(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,num = <span class="hljs-number">21</span>,endpoint = <span class="hljs-literal">True</span>))   <span class="hljs-comment">#最后是否被包含</span><br><br><span class="hljs-built_in">print</span>(np.linspace(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,num = <span class="hljs-number">21</span>,retstep = <span class="hljs-literal">True</span>))   <span class="hljs-comment">#元素本身和步长</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#   zeros()   zeros_like()      ///  ones()    ones_like()-----和前边一样，只不过是用“1”来填充</span><br><br><span class="hljs-built_in">print</span>(np.zeros((<span class="hljs-number">3</span>,<span class="hljs-number">5</span>)), )  <span class="hljs-comment">#用“0”来填充</span><br><br>ar = np.array([<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)),<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>))])<br><span class="hljs-built_in">print</span>(ar)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(ar))<br><span class="hljs-built_in">print</span>(np.zeros_like(ar))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#eye()</span><br><br><span class="hljs-built_in">print</span>(np.eye(<span class="hljs-number">5</span>))  <span class="hljs-comment">#矩阵的数组</span><br></code></pre></td></tr></table></figure><h3 id="Numpy通用函数"><a href="#Numpy通用函数" class="headerlink" title="Numpy通用函数"></a>Numpy通用函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">ar1 = np.arange(<span class="hljs-number">10</span>)<br>ar2 = np.ones((<span class="hljs-number">5</span>,<span class="hljs-number">2</span>))<br><br><span class="hljs-built_in">print</span>(ar1)<br><span class="hljs-built_in">print</span>(ar1.T)<br><span class="hljs-built_in">print</span>(ar2)<br><span class="hljs-built_in">print</span>(ar2.T)<br><br>ar3 = ar1.reshape(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>)<br>ar4 = np.zeros((<span class="hljs-number">4</span>,<span class="hljs-number">6</span>)).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">8</span>)<br>ar5 = np.reshape(np.arange(<span class="hljs-number">12</span>),(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><br><span class="hljs-built_in">print</span>(ar3)<br><span class="hljs-built_in">print</span>(ar4)<br><span class="hljs-built_in">print</span>(ar5)<br><br>ar6 = np.resize(np.arange(<span class="hljs-number">5</span>),(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(ar6)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#数组的复制</span><br>ar1 = np.arange(<span class="hljs-number">10</span>)<br>ar2 = ar1<br><span class="hljs-built_in">print</span>(ar1 <span class="hljs-keyword">is</span> ar2)<br>ar1[<span class="hljs-number">2</span>] = <span class="hljs-number">100</span><br><span class="hljs-built_in">print</span>(ar1,ar2)<br><br>s = (np.arange(<span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(np.resize(s,(<span class="hljs-number">2</span>,<span class="hljs-number">6</span>)))    <span class="hljs-comment">#形成了新的数组</span><br><span class="hljs-built_in">print</span>(s.resize(<span class="hljs-number">2</span>,<span class="hljs-number">6</span>))    <span class="hljs-comment">#改变了原来的数组</span><br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#数组类型转变  ：  astype()</span><br><br>ar1 = np.arange(<span class="hljs-number">10</span>,dtype = <span class="hljs-built_in">float</span>)<br>ar2 = ar1.astype(np.int64)<br><span class="hljs-built_in">print</span>(ar1,ar1.dtype)<br><span class="hljs-built_in">print</span>(ar2,ar2.dtype)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#数组的堆叠</span><br>a = np.arange(<span class="hljs-number">5</span>)<br>b = np.arange(<span class="hljs-number">5</span>,<span class="hljs-number">10</span>)<br><br><span class="hljs-built_in">print</span>(np.hstack((a,b)))     <span class="hljs-comment">#横向连接</span><br><span class="hljs-built_in">print</span>(np.vstack((a,b)))     <span class="hljs-comment">#纵向连接</span><br><br><span class="hljs-built_in">print</span>(np.stack((a,b)))  <span class="hljs-comment">#默认是纵向连接</span><br><span class="hljs-built_in">print</span>(np.stack((a,b),axis=<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#数组的拆分</span><br>ar = np.arange(<span class="hljs-number">16</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(np.hsplit(ar,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>])  <span class="hljs-comment">#横向拆分 </span><br><span class="hljs-built_in">print</span>(np.vsplit(ar,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>])   <span class="hljs-comment">#纵向拆分</span><br></code></pre></td></tr></table></figure><h3 id="Numpy的索引及切片"><a href="#Numpy的索引及切片" class="headerlink" title="Numpy的索引及切片"></a>Numpy的索引及切片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">ar = np.arange(<span class="hljs-number">20</span>)<br><span class="hljs-built_in">print</span>(ar)<br><span class="hljs-built_in">print</span>(ar[<span class="hljs-number">4</span>])<br><span class="hljs-built_in">print</span>(ar[<span class="hljs-number">3</span>:<span class="hljs-number">6</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----&#x27;</span>)<br><br>ar = np.arange(<span class="hljs-number">16</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(ar,<span class="hljs-string">&#x27;数组的轴数是%i&#x27;</span>%ar.ndim)<br><span class="hljs-built_in">print</span>(ar[<span class="hljs-number">2</span>],<span class="hljs-string">&#x27;数组轴数为%i&#x27;</span>%ar[<span class="hljs-number">2</span>].ndim)<br><span class="hljs-built_in">print</span>(ar[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(ar[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(ar[<span class="hljs-number">2</span>,<span class="hljs-number">2</span>])<br><span class="hljs-built_in">print</span>(ar[:<span class="hljs-number">2</span>,<span class="hljs-number">1</span>:])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-------&#x27;</span>)<br><br>ar1 = np.arange(<span class="hljs-number">8</span>).reshape(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(ar1,<span class="hljs-string">&#x27;数组的轴数是%i&#x27;</span>%ar1.ndim)<br><span class="hljs-built_in">print</span>(ar1[<span class="hljs-number">0</span>],<span class="hljs-string">&#x27;数组轴数为%i&#x27;</span>%ar1[<span class="hljs-number">0</span>].ndim)<br><span class="hljs-built_in">print</span>(ar1[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],<span class="hljs-string">&#x27;数组轴数为%i&#x27;</span>%ar1[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>].ndim)<br><span class="hljs-built_in">print</span>(ar1[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>],<span class="hljs-string">&#x27;数组轴数为%i&#x27;</span>%ar1[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>].ndim)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#布尔型索引及切片(只保留True的值)</span><br>ar = np.arange(<span class="hljs-number">12</span>).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(ar)<br>i = np.array([<span class="hljs-literal">True</span>,<span class="hljs-literal">False</span>,<span class="hljs-literal">True</span>])<br>j = np.array([<span class="hljs-literal">True</span>,<span class="hljs-literal">True</span>,<span class="hljs-literal">False</span>,<span class="hljs-literal">False</span>])<br><span class="hljs-built_in">print</span>(i)<br><span class="hljs-built_in">print</span>(j)<br><span class="hljs-built_in">print</span>(ar[i])<br><span class="hljs-built_in">print</span>(ar[ar&gt;<span class="hljs-number">5</span>])<br></code></pre></td></tr></table></figure><h3 id="Numpy随机数"><a href="#Numpy随机数" class="headerlink" title="Numpy随机数"></a>Numpy随机数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#随机数生成</span><br>samples = np.random.normal(size=(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>))*<span class="hljs-number">100</span>     <span class="hljs-comment">#0-1之间的数字，在后面*100就会变成0-100之间的随机数</span><br><span class="hljs-built_in">print</span>(samples)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.random.rand()<br><span class="hljs-built_in">print</span>(a)<br><br><span class="hljs-built_in">print</span>( np.random.rand(<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>( np.random.rand(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>))<br><br>data1 = ( np.random.rand(<span class="hljs-number">500</span>))<br>data2 = ( np.random.rand(<span class="hljs-number">500</span>))   <span class="hljs-comment">#rand后边加一个n就会生成一个正态分布的图形</span><br><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt   <span class="hljs-comment">#  会生成一个均匀分布的散点图</span><br>% matplotlip inline<br>plt.scatter(data1,data2)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#随机整数</span><br><span class="hljs-built_in">print</span>(np.random.randint(<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(np.random.randint(<span class="hljs-number">2</span>,<span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(np.random.randint(<span class="hljs-number">2</span>,size=<span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(np.random.randint(<span class="hljs-number">2</span>,size=(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>)))<br></code></pre></td></tr></table></figure><h3 id="Numpy数据的输入和输出"><a href="#Numpy数据的输入和输出" class="headerlink" title="Numpy数据的输入和输出"></a>Numpy数据的输入和输出</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  存储数组数据 .npy文件</span><br><span class="hljs-keyword">import</span> os<br>os.chdir(<span class="hljs-string">&#x27;C:\\Users\\86155\\Desktop\\&#x27;</span>)<br><br>ar = np.random.rand(<span class="hljs-number">5</span>,<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(ar)<br>np.save(<span class="hljs-string">&#x27;arraydata.npy&#x27;</span>,ar)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#读取数组数据 .npy文件</span><br><br>ar_load = np.load(<span class="hljs-string">&#x27;arraydata.npy&#x27;</span>)<br><span class="hljs-built_in">print</span>(ar_load)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python+机器学习+数据分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python-重点工具(Matplotlib)</title>
    <link href="/2022/07/15/python%E9%87%8D%E7%82%B9%E5%B7%A5%E5%85%B7%E6%8E%8C%E6%8F%A1/"/>
    <url>/2022/07/15/python%E9%87%8D%E7%82%B9%E5%B7%A5%E5%85%B7%E6%8E%8C%E6%8F%A1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="下面这些代码均是在学习的过程中做的笔记和练习"><a href="#下面这些代码均是在学习的过程中做的笔记和练习" class="headerlink" title="下面这些代码均是在学习的过程中做的笔记和练习"></a>下面这些代码均是在学习的过程中做的笔记和练习</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#   图标窗口1      plt.show()</span><br>plt.plot(np.random.rand(<span class="hljs-number">10</span>))<br>plt.show()<br><span class="hljs-comment">#直接生成图表</span><br></code></pre></td></tr></table></figure><p><a href="https://postimg.cc/LnCvyCZs"><img src="https://i.postimg.cc/4xZMxjfp/1.png" alt="1.png"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  图标窗口2  魔法函数，嵌入图表   ######</span><br>%matplotlib inline<br><br>x = np.random.randn(<span class="hljs-number">1000</span>)<br>y = np.random.randn(<span class="hljs-number">1000</span>)<br>plt.scatter(x,y)<br><span class="hljs-comment">#直接嵌入图表</span><br></code></pre></td></tr></table></figure><br><a href="https://postimg.cc/G8LynRWn"><img src="https://i.postimg.cc/4dtbtNwy/2.png" alt="2.png"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  图标窗口3  魔法函数,弹出可交互的matplotlib窗口</span><br><br>%matplotlib notebook<br>s = pd.Series(np.random.randn(<span class="hljs-number">100</span>))<br>s.plot(style = <span class="hljs-string">&#x27;k-o&#x27;</span>,figsize=(<span class="hljs-number">10</span>,<span class="hljs-number">5</span>))<br><span class="hljs-comment">#可做一定调整</span><br></code></pre></td></tr></table></figure><br><a href="https://postimg.cc/9R0QBf30"><img src="https://i.postimg.cc/DZd4nWBr/3.png" alt="3.png"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  图标窗口4  魔法函数,弹出matplotlib控制台</span><br><br>%matplotlib qt5<br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">50</span>,<span class="hljs-number">2</span>),columns=[<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>])<br>df.hist(figsize=(<span class="hljs-number">12</span>,<span class="hljs-number">5</span>),color=<span class="hljs-string">&#x27;r&#x27;</span>,alpha=<span class="hljs-number">0.8</span>)<br><span class="hljs-comment">#网页嵌入的交互性窗口  和  控制台，  只能显示一个</span><br><span class="hljs-comment">#如果已经设置了显示方式，要重启一下再运行</span><br><br><span class="hljs-comment">#plt.close() 关闭窗口</span><br><span class="hljs-comment">#plt.gcf().clear()  清空</span><br></code></pre></td></tr></table></figure></p><h4 id="图表的基本元素"><a href="#图表的基本元素" class="headerlink" title="图表的基本元素"></a>图表的基本元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 图名 ，图例 ， 轴标签 ， 轴边界 ， 轴刻度 ， 轴刻度标签。。。。。</span><br><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>),columns=[<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>])<br>f = plt.figure(figsize=(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>))<br>fig = df.plot(figsize=(<span class="hljs-number">6</span>,<span class="hljs-number">4</span>))<br><br><span class="hljs-comment">#figsize  设置窗口大小</span><br><br><span class="hljs-built_in">print</span>(fig,<span class="hljs-built_in">type</span>(fig))<br><span class="hljs-built_in">print</span>(f,<span class="hljs-built_in">type</span>(f))<br><br><br>plt.title(<span class="hljs-string">&#x27;aa&#x27;</span>)   <span class="hljs-comment">#名字</span><br>plt.xlabel(<span class="hljs-string">&#x27;x&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;y&#x27;</span>)<br><br>plt.xlim([<span class="hljs-number">0</span>,<span class="hljs-number">12</span>])<span class="hljs-comment"># x轴边界</span><br>plt.ylim([<span class="hljs-number">0</span>,<span class="hljs-number">1.5</span>])<br>plt.xticks(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))  <span class="hljs-comment">#x刻度</span><br>plt.yticks([<span class="hljs-number">0</span>,<span class="hljs-number">0.2</span>,<span class="hljs-number">0.4</span>,<span class="hljs-number">0.6</span>,<span class="hljs-number">0.8</span>,<span class="hljs-number">1.0</span>,<span class="hljs-number">1.2</span>])<br><br>fig.set_xticklabels(<span class="hljs-string">&quot;%.1f&quot;</span>%i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))   <span class="hljs-comment">#x轴刻度标签</span><br>fig.set_yticklabels(<span class="hljs-string">&quot;%.2f&quot;</span>%i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">0.2</span>,<span class="hljs-number">0.4</span>,<span class="hljs-number">0.6</span>,<span class="hljs-number">0.8</span>,<span class="hljs-number">1.0</span>,<span class="hljs-number">1.2</span>])<br></code></pre></td></tr></table></figure><p><a href="https://postimg.cc/D8gR7P4V"><img src="https://i.postimg.cc/htWnbCSG/4.png" alt="4.png"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 其他元素可视性</span><br><br>x = np.linspace(-np.pi,np.pi,<span class="hljs-number">256</span>,endpoint = <span class="hljs-literal">True</span>)<br>c,  s = np.cos(x),np.sin(x)<br>plt.plot(x,c)<br>plt.plot(x,s)<br><span class="hljs-comment">#  通过ndarry创建图表</span><br><br>plt.grid()  <span class="hljs-comment">#设置图网</span><br><br><span class="hljs-keyword">import</span> matplotlib<br>frame = plt.gca()<br><br>frame.axes.get_xaxis().set_visible(<span class="hljs-literal">False</span>)  <span class="hljs-comment"># x轴不见</span><br>frame.axes.get_yaxis().set_visible(<span class="hljs-literal">False</span>)  <span class="hljs-comment">#y轴不见</span><br></code></pre></td></tr></table></figure><br><a href="https://postimg.cc/WhBSLDXR"><img src="https://i.postimg.cc/vZBKnfnm/5.png" alt="5.png"></a></p><h4 id="图表的样式参数"><a href="#图表的样式参数" class="headerlink" title="图表的样式参数"></a>图表的样式参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># linestyle参数</span><br><br>plt.plot([i**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>)],<br>        linestyle = <span class="hljs-string">&#x27;--&#x27;</span>)<br></code></pre></td></tr></table></figure><p><a href="https://postimg.cc/zyDvf7dT"><img src="https://i.postimg.cc/0yDwcHDX/6.png" alt="6.png"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  marker参数</span><br><br>s = pd.Series(np.random.rand(<span class="hljs-number">10</span>).cumsum())<br>s.plot(linestyle = <span class="hljs-string">&#x27;--&#x27;</span>,<br>      marker = <span class="hljs-string">&#x27;x&#x27;</span>)   <span class="hljs-comment">#   * o</span><br></code></pre></td></tr></table></figure><br><a href="https://postimg.cc/sQ3snDt7"><img src="https://i.postimg.cc/sXhxgMm6/7.png" alt="7.png"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># color参数</span><br><br>plt.hist(np.random.rand(<span class="hljs-number">30</span>),<br>        color = <span class="hljs-string">&#x27;r&#x27;</span>,alpha=<span class="hljs-number">0.8</span>)<br><span class="hljs-comment">#alpha:  0-1 透明度</span><br><span class="hljs-comment">#常用颜色简写： red-r, green-g , black--b , yellow--y</span><br><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">30</span>,<span class="hljs-number">4</span>),columns = <span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;ABCD&#x27;</span>))<br>df = df.cumsum()<br>df.plot(style = <span class="hljs-string">&#x27;--.&#x27;</span>,alpha = <span class="hljs-number">0.8</span>,colormap = <span class="hljs-string">&#x27;GnBu&#x27;</span>)<br><span class="hljs-comment">#colormap:  颜色板</span><br></code></pre></td></tr></table></figure><br><a href="https://postimg.cc/hz8bBMyN"><img src="https://i.postimg.cc/4dq8pSz4/8.png" alt="8.png"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  style 参数，可以包含linestyle,marker , color</span><br><br>ts = pd.Series(np.random.rand(<span class="hljs-number">1000</span>).cumsum(),index = pd.date_range(<span class="hljs-string">&#x27;1/1/2021&#x27;</span>,periods = <span class="hljs-number">1000</span>))<br>ts.plot(style = <span class="hljs-string">&#x27;--g.&#x27;</span>,grid = <span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><br><a href="https://postimg.cc/8sJNt3Yy"><img src="https://i.postimg.cc/9X10FHYj/9.png" alt="9.png"></a></p><h3 id="此后仅仅展示代码，效果可以自行尝试"><a href="#此后仅仅展示代码，效果可以自行尝试" class="headerlink" title="此后仅仅展示代码，效果可以自行尝试"></a>此后仅仅展示代码，效果可以自行尝试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  整体风格样式</span><br><br><span class="hljs-keyword">import</span> matplotlib.style <span class="hljs-keyword">as</span> ps1<br><span class="hljs-built_in">print</span>(plt.style.available)<br><span class="hljs-comment">#查看样式列表</span><br><br>ps1.use(<span class="hljs-string">&#x27;ggplot&#x27;</span>)<br>ts = pd.Series(np.random.rand(<span class="hljs-number">10</span>).cumsum(),index = pd.date_range(<span class="hljs-string">&#x27;1/1/2021&#x27;</span>,periods = <span class="hljs-number">10</span>))<br>ts.plot(style = <span class="hljs-string">&#x27;--g.&#x27;</span>,grid = <span class="hljs-literal">True</span>,figsize=(<span class="hljs-number">10</span>,<span class="hljs-number">6</span>))<br></code></pre></td></tr></table></figure><h3 id="刻度、注释、图表输出"><a href="#刻度、注释、图表输出" class="headerlink" title="刻度、注释、图表输出"></a>刻度、注释、图表输出</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  刻度</span><br><br><span class="hljs-keyword">from</span> matplotlib.ticker <span class="hljs-keyword">import</span> MultipleLocator,FormatStrFormatter<br><br>t = np.arange(<span class="hljs-number">0.0</span>,<span class="hljs-number">100.0</span>,<span class="hljs-number">1</span>)<br>s = np.sin(<span class="hljs-number">0.1</span>*np.pi*t)*np.exp(-t*<span class="hljs-number">0.01</span>)<br>ax = plt.subplot(<span class="hljs-number">111</span>)<br>plt.plot(t,s,<span class="hljs-string">&#x27;--*&#x27;</span>)<br>plt.grid(<span class="hljs-literal">True</span>,linestyle = <span class="hljs-string">&quot;--&quot;</span>,color = <span class="hljs-string">&quot;gray&quot;</span>,linewidth = <span class="hljs-string">&quot;0.5&quot;</span>,axis = <span class="hljs-string">&quot;both&quot;</span>)<br><span class="hljs-comment">#网格</span><br><span class="hljs-comment">#plt.legend()  图例</span><br><br>xmajorLocator = MultipleLocator(<span class="hljs-number">10</span>)   <span class="hljs-comment">#将x的主标签设置为10的倍数</span><br>amajorFormatter = FormatStrFormatter(<span class="hljs-string">&#x27;%.0f&#x27;</span>)<br>xminorLocator = MultipleLocator(<span class="hljs-number">5</span>)  <span class="hljs-comment">#将想的次标签设置为5的倍数</span><br><br>ax.xaxis.set_major_locator(xmajorLocator)   <span class="hljs-comment">#设置x轴主刻度</span><br>ax.xaxis.set_major_formatter(xmajorFormatter)  <span class="hljs-comment">#设置x轴标签文本格式</span><br>ax.xaxis.set_minor_locator(xminorLocator)<span class="hljs-comment"># 设置x轴次刻度</span><br><br>ax.xaxis.grid(<span class="hljs-literal">True</span>,which =<span class="hljs-string">&#x27;both&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 注释</span><br><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>))<br>df.plot(style = <span class="hljs-string">&#x27;--o&#x27;</span>)<br>plt.text(<span class="hljs-number">5</span>,<span class="hljs-number">0.5</span>,<span class="hljs-string">&#x27;hshhhh&#x27;</span>,fontsize=<span class="hljs-number">10</span>)<br><span class="hljs-comment">#注释  （横坐标，纵坐标，注释字符串）</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#   图表输出</span><br><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">100</span>,<span class="hljs-number">4</span>),columns = <span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;ABCD&#x27;</span>))<br>df = df.cumsum()<br>df.plot(style = <span class="hljs-string">&#x27;--.&#x27;</span>,alpha = <span class="hljs-number">0.5</span>)<br>plt.legend(loc = <span class="hljs-string">&#x27;upper left&#x27;</span>)<br>plt.savefig(<span class="hljs-string">&#x27;&#x27;</span>,<br>           dpi=<span class="hljs-number">400</span>,                  <span class="hljs-comment">#分辨率</span><br>           facecolor = <span class="hljs-string">&#x27;g&#x27;</span>,  <br>           bbox_inches = <span class="hljs-string">&#x27;tight&#x27;</span>,     <span class="hljs-comment">#图表需要保存的地方，如果设置成‘tight’，则尝试剪除图标周围的空白部分</span><br>           edgecolor = <span class="hljs-string">&#x27;b&#x27;</span>)   <span class="hljs-comment">#图像的背景图，默认为；w  白色</span><br></code></pre></td></tr></table></figure><h3 id="子图"><a href="#子图" class="headerlink" title="子图"></a>子图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">fig1 = plt.figure(num =<span class="hljs-number">1</span>,figsize=(<span class="hljs-number">4</span>,<span class="hljs-number">2</span>))<br>plt.plot(np.random.rand(<span class="hljs-number">50</span>).cumsum(),<span class="hljs-string">&#x27;k--&#x27;</span>)<br>fig2 = plt.figure(num =<span class="hljs-number">2</span>,figsize=(<span class="hljs-number">4</span>,<span class="hljs-number">2</span>))<br>plt.plot(<span class="hljs-number">50</span>-np.random.rand(<span class="hljs-number">50</span>).cumsum(),<span class="hljs-string">&#x27;k--&#x27;</span>)<br><br><span class="hljs-comment"># figsize设置图标大小</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  子图创建1  - 先建立子图然后填充图表</span><br>fig = plt.figure(figsize=(<span class="hljs-number">10</span>,<span class="hljs-number">6</span>),facecolor = <span class="hljs-string">&#x27;g&#x27;</span>)<br><br>ax1 = fig.add_subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br>plt.plot(np.random.rand(<span class="hljs-number">50</span>).cumsum(),<span class="hljs-string">&#x27;k--&#x27;</span>)<br>plt.plot(np.random.rand(<span class="hljs-number">50</span>).cumsum(),<span class="hljs-string">&#x27;b--&#x27;</span>)<br><br>ax2  = fig.add_subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br>ax2.hist(np.random.rand(<span class="hljs-number">50</span>),alpha=<span class="hljs-number">0.5</span>)<br><br>ax4  = fig.add_subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>)<br>df2 = pd.DataFrame(np.random.rand(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>),columns = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br>ax4.plot(df2,alpha=<span class="hljs-number">0.5</span>,linestyle=<span class="hljs-string">&#x27;--&#x27;</span>,marker=<span class="hljs-string">&#x27;.&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  子图创建2 - 创建一个新的figure ， 并返回一个subplot对象的numpy数组 --plt.subplot#######</span><br><br>fig,axes = plt.subplots(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,figsize=(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>))<br>ts = pd.Series(np.random.rand(<span class="hljs-number">100</span>).cumsum())<br><span class="hljs-built_in">print</span>(axes,axes.shape,<span class="hljs-built_in">type</span>(axes))<br><span class="hljs-comment">#生成图表对象的数组</span><br><br>ax1 = axes[<span class="hljs-number">0</span>,<span class="hljs-number">2</span>]<br>ax1.plot(ts)<br>axes[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>].plot(np.random.rand(<span class="hljs-number">100</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  plt.subplot  参数调整</span><br>fig,axes = plt.subplots(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,sharex=<span class="hljs-literal">True</span>,sharey=<span class="hljs-literal">True</span>)  <span class="hljs-comment">#是否共享x，y刻度</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>        axes[i,j].hist(np.random.rand(<span class="hljs-number">50</span>),color=<span class="hljs-string">&#x27;k&#x27;</span>,alpha=<span class="hljs-number">0.5</span>)<br>plt.subplots_adjust(wspace=<span class="hljs-number">0</span>,hspace=<span class="hljs-number">0</span>)<br><span class="hljs-comment">#控制宽度和高度的百分比</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建图表3 - 多系列图，分别绘画</span><br><br>df = pd.DataFrame(np.random.randn(<span class="hljs-number">100</span>,<span class="hljs-number">4</span>),index =ts.index,columns=<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;ABCD&#x27;</span>))<br>df = df.cumsum()<br>df.plot(style = <span class="hljs-string">&#x27;--.&#x27;</span>,alpha = <span class="hljs-number">0.4</span>,grid = <span class="hljs-literal">True</span> ,figsize = (<span class="hljs-number">8</span>,<span class="hljs-number">8</span>),<br>       subplots=  <span class="hljs-literal">True</span>,<br>       layout = (<span class="hljs-number">2</span>,<span class="hljs-number">3</span>),<br>      sharex = <span class="hljs-literal">False</span>)<br>plt.subplots_adjust(wspace=<span class="hljs-number">0</span>,hspace=<span class="hljs-number">0.2</span>)<br></code></pre></td></tr></table></figure><h3 id="基本图表绘制"><a href="#基本图表绘制" class="headerlink" title="基本图表绘制"></a>基本图表绘制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  Series  直接生成图表</span><br><br>ts = pd.Series(np.random.rand(<span class="hljs-number">20</span>),index = pd.date_range(<span class="hljs-string">&#x27;1/1/2021&#x27;</span>,periods=<span class="hljs-number">20</span>))<br>ts = ts.cumsum()<br>ts.plot(kind=<span class="hljs-string">&#x27;kde&#x27;</span>,      <span class="hljs-comment">#  line,bar,barth.....(折线图 ， 柱状图 ， 柱状图-横)</span><br>       label =<span class="hljs-string">&#x27;hehe&#x27;</span>,<br>       style =<span class="hljs-string">&#x27;--g.&#x27;</span>,<br>       alpha = <span class="hljs-number">0.4</span>,     <span class="hljs-comment">#透明度  0--1</span><br>        use_index = <span class="hljs-literal">True</span>,<br>       rot = <span class="hljs-number">45</span>,            <span class="hljs-comment">#旋转刻度标签</span><br>       grid = <span class="hljs-literal">True</span>,<br>       <span class="hljs-comment">#ylim = [-50,50],</span><br>       <span class="hljs-comment">#yticks = list(range(-50,50,10)),</span><br>       figsize = (<span class="hljs-number">8</span>,<span class="hljs-number">4</span>),<br>       title = <span class="hljs-string">&#x27;test&#x27;</span>,<br>       legend = <span class="hljs-literal">True</span>)    <span class="hljs-comment">#是否显示图例，一般直接用plt.legend(),也可以用    plt.plot()</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  DataFrame直接生成图表</span><br><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">100</span>,<span class="hljs-number">4</span>),index=ts.index,columns=<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;ABCD&#x27;</span>))<br>df = df.cumsum()<br>df.plot(kind=<span class="hljs-string">&#x27;line&#x27;</span>,<br>       style =<span class="hljs-string">&#x27;--&#x27;</span>,<br>       alpha = <span class="hljs-number">0.4</span>,<br>       use_index = <span class="hljs-literal">True</span>,<br>       rot = <span class="hljs-number">45</span>,<br>       grid = <span class="hljs-literal">True</span>,<br>       yticks = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(-<span class="hljs-number">50</span>,<span class="hljs-number">50</span>,<span class="hljs-number">10</span>)),<br>       figsize = (<span class="hljs-number">12</span>,<span class="hljs-number">8</span>),<br>       title = <span class="hljs-string">&#x27;test&#x27;</span>,<br>       legend = <span class="hljs-literal">True</span>,   <br>       subplots = <span class="hljs-literal">True</span>,   <span class="hljs-comment">#####   这个会分开多个图表，而且颜色会越来越浅</span><br>       colormap = <span class="hljs-string">&#x27;Greens&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="柱状图、堆叠图"><a href="#柱状图、堆叠图" class="headerlink" title="柱状图、堆叠图"></a>柱状图、堆叠图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 柱状图、 堆叠图</span><br>fig,axes = plt.subplots(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,figsize = (<span class="hljs-number">10</span>,<span class="hljs-number">10</span>))<br>s = pd.Series(np.random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">16</span>),index = <span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;abcdefghijklmnop&#x27;</span>))<br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">10</span>,<span class="hljs-number">3</span>),columns=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>])<br><span class="hljs-comment">#print(s)</span><br><span class="hljs-comment">#print(df)</span><br><br><span class="hljs-comment">#单系列柱状图</span><br>s.plot(kind=<span class="hljs-string">&#x27;bar&#x27;</span>,ax=axes[<span class="hljs-number">0</span>])<br><br><span class="hljs-comment">#多系列柱状图</span><br>df.plot(kind=<span class="hljs-string">&#x27;bar&#x27;</span>,ax=axes[<span class="hljs-number">1</span>])<br><br><span class="hljs-comment">#多系列堆叠图</span><br>df.plot(kind=<span class="hljs-string">&#x27;bar&#x27;</span>,stacked=<span class="hljs-literal">True</span>,ax=axes[<span class="hljs-number">2</span>])<br><br>df.plot.barh(ax = axes[<span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.figure(figsize=(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>))<br>x = np.arange(<span class="hljs-number">10</span>)<br>y1 = np.random.rand(<span class="hljs-number">10</span>)<br>y2 = -np.random.rand(<span class="hljs-number">10</span>)<br><br>plt.bar(x,y1,width = <span class="hljs-number">1</span>,facecolor = <span class="hljs-string">&#x27;yellowgreen&#x27;</span>,edgecolor =<span class="hljs-string">&#x27;white&#x27;</span>,yerr = y1*<span class="hljs-number">0.1</span>)<br>plt.bar(x,y2,width = <span class="hljs-number">1</span>,facecolor = <span class="hljs-string">&#x27;lightskyblue&#x27;</span>,edgecolor =<span class="hljs-string">&#x27;white&#x27;</span>,yerr = y1*<span class="hljs-number">0.1</span>)<br><br><span class="hljs-comment">#  width  宽度比例</span><br><span class="hljs-comment">#xerrr/yerr   :  x/y方向的error</span><br><br> <br><span class="hljs-keyword">for</span> i,j <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(x,y1):<br>        plt.text(i+<span class="hljs-number">0.09</span>,j-<span class="hljs-number">0.4</span>,<span class="hljs-string">&#x27;%.2f&#x27;</span> %j, color = <span class="hljs-string">&#x27;white&#x27;</span>)<br><span class="hljs-keyword">for</span> i,j <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(x,y1):<br>        plt.text(i+<span class="hljs-number">0.1</span>,j+<span class="hljs-number">0.5</span>,<span class="hljs-string">&#x27;%.2f&#x27;</span> %-j, color = <span class="hljs-string">&#x27;white&#x27;</span>)<br>        <br><span class="hljs-comment">#给图添加text（）</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 外联图表plt.table()</span><br>data = [[<span class="hljs-number">5555</span>,<span class="hljs-number">23143</span>,<span class="hljs-number">44234</span>,<span class="hljs-number">3424</span>,<span class="hljs-number">44243</span>],<br>       [<span class="hljs-number">5555</span>,<span class="hljs-number">23143</span>,<span class="hljs-number">44234</span>,<span class="hljs-number">3424</span>,<span class="hljs-number">44243</span>],<br>       [<span class="hljs-number">5555</span>,<span class="hljs-number">23143</span>,<span class="hljs-number">44234</span>,<span class="hljs-number">3424</span>,<span class="hljs-number">44243</span>],<br>       [<span class="hljs-number">5555</span>,<span class="hljs-number">23143</span>,<span class="hljs-number">44234</span>,<span class="hljs-number">3424</span>,<span class="hljs-number">44243</span>],<br>       [<span class="hljs-number">5555</span>,<span class="hljs-number">23143</span>,<span class="hljs-number">44234</span>,<span class="hljs-number">3424</span>,<span class="hljs-number">44243</span>],]<br>columns = (<span class="hljs-string">&#x27;Freeze&#x27;</span>,<span class="hljs-string">&#x27;wind&#x27;</span>,<span class="hljs-string">&#x27;flood&#x27;</span>,<span class="hljs-string">&#x27;quake&#x27;</span>,<span class="hljs-string">&#x27;hail&#x27;</span>)<br>rows = [<span class="hljs-string">&#x27;%d year&#x27;</span> %x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> (<span class="hljs-number">100</span>,<span class="hljs-number">50</span>,<span class="hljs-number">20</span>,<span class="hljs-number">10</span>,<span class="hljs-number">5</span>)]<br>df = pd.DataFrame(data,columns= (<span class="hljs-string">&#x27;Freeze&#x27;</span>,<span class="hljs-string">&#x27;wind&#x27;</span>,<span class="hljs-string">&#x27;flood&#x27;</span>,<span class="hljs-string">&#x27;quake&#x27;</span>,<span class="hljs-string">&#x27;hail&#x27;</span>),<br>                 index =[<span class="hljs-string">&#x27;%d year&#x27;</span> % x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> (<span class="hljs-number">100</span>,<span class="hljs-number">50</span>,<span class="hljs-number">20</span>,<span class="hljs-number">10</span>,<span class="hljs-number">5</span>)])<br><span class="hljs-comment">#df</span><br><br>df.plot(kind =<span class="hljs-string">&#x27;bar&#x27;</span>,grid = <span class="hljs-literal">True</span>,colormap=<span class="hljs-string">&#x27;Blues_r&#x27;</span>,stacked = <span class="hljs-literal">True</span>,figsize=(<span class="hljs-number">8</span>,<span class="hljs-number">3</span>))<br><span class="hljs-comment">#创建堆叠图</span><br><br>plt.table(cellText = data,          <span class="hljs-comment">#表格文本</span><br>         cellLoc = <span class="hljs-string">&#x27;center&#x27;</span>,          <span class="hljs-comment">#cell内的文本对齐位置</span><br>         cellColours = <span class="hljs-literal">None</span>,      <br>         rowLabels = rows,       <span class="hljs-comment">#行标签</span><br>         rowColours = plt.cm.BuPu(np.linspace(<span class="hljs-number">0</span>,<span class="hljs-number">0.5</span>,<span class="hljs-number">5</span>))[::<span class="hljs-number">1</span>],         <br>         colLabels = columns,                                            <span class="hljs-comment">#列标签</span><br>         colColours = plt.cm.BuPu(np.linspace(<span class="hljs-number">0</span>,<span class="hljs-number">0.5</span>,<span class="hljs-number">5</span>))[::<span class="hljs-number">1</span>],<br>         rowLoc = <span class="hljs-string">&#x27;right&#x27;</span>,     <span class="hljs-comment">#行标签对齐位置</span><br>         loc = <span class="hljs-string">&#x27;bottom&#x27;</span>)      <span class="hljs-comment">#表格位置</span><br><br>plt.xticks([])<br></code></pre></td></tr></table></figure><h3 id="面积图、填图、饼图"><a href="#面积图、填图、饼图" class="headerlink" title="面积图、填图、饼图"></a>面积图、填图、饼图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  面积图</span><br>fig,axes = plt.subplots(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,figsize = (<span class="hljs-number">8</span>,<span class="hljs-number">6</span>))<br>df1 = pd.DataFrame(np.random.rand(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>),columns=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br>df2 = pd.DataFrame(np.random.rand(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>),columns=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br><br>df1.plot.area(colormap = <span class="hljs-string">&#x27;Greens_r&#x27;</span>,alpha = <span class="hljs-number">0.5</span>,ax = axes[<span class="hljs-number">0</span>])<br>df1.plot.area(stacked=<span class="hljs-literal">True</span>,colormap = <span class="hljs-string">&#x27;Set2&#x27;</span>,alpha = <span class="hljs-number">0.5</span>,ax = axes[<span class="hljs-number">1</span>])   <span class="hljs-comment">#stacked是否堆叠，默认是堆叠</span><br><span class="hljs-comment">#当数据出现NaN时，自动填充0，所以图标签需要清洗掉缺失值</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  填图</span><br><br>fig,axes = plt.subplots(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,figsize=(<span class="hljs-number">8</span>,<span class="hljs-number">6</span>))<br><br>x = np.linspace(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">500</span>)<br>y1 = np.sin(<span class="hljs-number">4</span> * np.pi * x) * np.exp(-<span class="hljs-number">5</span>*x)<br>y2 = -np.sin(<span class="hljs-number">4</span> * np.pi * x) * np.exp(-<span class="hljs-number">5</span>*x)<br>axes[<span class="hljs-number">0</span>].fill(x,y1,<span class="hljs-string">&#x27;r&#x27;</span>,alpha=<span class="hljs-number">0.5</span>,label=<span class="hljs-string">&#x27;y1&#x27;</span>)<br>axes[<span class="hljs-number">0</span>].fill(x,y2,<span class="hljs-string">&#x27;g&#x27;</span>,alpha=<span class="hljs-number">0.5</span>,label=<span class="hljs-string">&#x27;y2&#x27;</span>)<br><span class="hljs-comment">#  对函数与坐标轴之间的区域进行填充用  fill函数</span><br><br>x = np.linspace(<span class="hljs-number">0</span>,<span class="hljs-number">5</span>*np.pi,<span class="hljs-number">1000</span>)<br>y1 = np.sin(x)<br>y2 = np.sin(<span class="hljs-number">2</span>*x)<br>axes[<span class="hljs-number">1</span>].fill_between(x,y1,y2,color=<span class="hljs-string">&#x27;b&#x27;</span>,alpha=<span class="hljs-number">0.5</span>,label=<span class="hljs-string">&#x27;area&#x27;</span>)<br><span class="hljs-comment">#填充两个函数之间的区域，使用fill_between函数</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>    axes[i].legend()<br>    axes[i].grid()<br><span class="hljs-comment">#  添加图例，网格</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  饼图  plt.pie()</span><br>s = pd.Series(<span class="hljs-number">3</span> * np.random.rand(<span class="hljs-number">4</span>),index= [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>],name=<span class="hljs-string">&#x27;series&#x27;</span>)<br>plt.axis(<span class="hljs-string">&#x27;equal&#x27;</span>)  <span class="hljs-comment">#保证长宽相等</span><br>plt.pie(s,<br>       explode = [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],    <span class="hljs-comment">#指定每部分的偏移量</span><br>       labels = s.index,<br>        colors = [<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>],<br>       autopct = <span class="hljs-string">&#x27;%.2f%%&#x27;</span>,        <span class="hljs-comment">#饼图上的数据标签显示方式</span><br>        pctdistance = <span class="hljs-number">0.6</span>,      <br>        labeldistance = <span class="hljs-number">1.1</span>,     <span class="hljs-comment">#被画饼图标记的直径，默认为1.1    </span><br>        shadow = <span class="hljs-literal">True</span>,          <span class="hljs-comment">#  阴影</span><br>        startangle=<span class="hljs-number">10</span>,       <span class="hljs-comment">#开始角度</span><br>        radius = <span class="hljs-number">1.2</span>,      <span class="hljs-comment">#半径</span><br>        frame = <span class="hljs-literal">False</span>)    <span class="hljs-comment">#图框</span><br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><h3 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  直方图+ 密度图</span><br>s = pd.Series(np.random.randn(<span class="hljs-number">100</span>))<br>s.hist(bins = <span class="hljs-number">20</span>,         <span class="hljs-comment">#箱子的宽度</span><br>      histtype = <span class="hljs-string">&#x27;bar&#x27;</span>,     <span class="hljs-comment">#风格 ， bar barstacked  step  stepfilled</span><br>      align = <span class="hljs-string">&#x27;mid&#x27;</span>,     <br>      orientation = <span class="hljs-string">&#x27;vertical&#x27;</span>,    <span class="hljs-comment">#水平还是垂直(&#x27;horizontal&#x27;   &#x27;vertical&#x27;)</span><br>      alpha = <span class="hljs-number">0.5</span>)   <span class="hljs-comment"># normed = True</span><br><span class="hljs-comment">#align  对齐方式</span><br><br>s.plot(kind=<span class="hljs-string">&#x27;kde&#x27;</span>,style=<span class="hljs-string">&#x27;k--&#x27;</span>)<br>plt.grid()<br><span class="hljs-comment">#密度图</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  堆叠直方图</span><br>plt.figure(num=<span class="hljs-number">1</span>)<br>df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;a&#x27;</span>:np.random.randn(<span class="hljs-number">1000</span>)+<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;b&#x27;</span>:np.random.randn(<span class="hljs-number">1000</span>),<br>                 <span class="hljs-string">&#x27;c&#x27;</span>:np.random.randn(<span class="hljs-number">1000</span>)-<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;d&#x27;</span>:np.random.randn(<span class="hljs-number">1000</span>)-<span class="hljs-number">2</span>&#125;,<br>                 columns=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br>df.plot.hist(stacked=<span class="hljs-literal">True</span>,<br>            bins=<span class="hljs-number">20</span>,<br>            colormap=<span class="hljs-string">&#x27;Greens_r&#x27;</span>,<br>            alpha=<span class="hljs-number">0.5</span>,<br>            grid = <span class="hljs-literal">True</span>)<br><span class="hljs-comment">#stacked  是否堆叠</span><br><br>df.hist(bins=<span class="hljs-number">50</span>)<br><span class="hljs-comment">#生成多个直方图</span><br></code></pre></td></tr></table></figure><h3 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  plt.scatter()  散点图</span><br>plt.figure(figsize=(<span class="hljs-number">8</span>,<span class="hljs-number">6</span>),)<br>x = np.random.randn(<span class="hljs-number">1000</span>)<br>y = np.random.randn(<span class="hljs-number">1000</span>)<br>plt.scatter(x,y,marker=<span class="hljs-string">&#x27;.&#x27;</span>,<br>           s = np.random.randn(<span class="hljs-number">1000</span>)*<span class="hljs-number">100</span>,<br>           cmap = <span class="hljs-string">&#x27;Blues_r&#x27;</span>,<br>           c = y,<br>           alpha = <span class="hljs-number">0.8</span>)<br>plt.grid()<br><br><span class="hljs-comment">#  s 散点图的大小</span><br><span class="hljs-comment">#  c 散点图的颜色</span><br><span class="hljs-comment">#  vmin ，vmax   亮度设置，标量</span><br><span class="hljs-comment">#cmap  colormap</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  pd.scatter_matrix(散点矩阵)</span><br><br><br>df = pd.DataFrame(np.random.randn(<span class="hljs-number">100</span>,<span class="hljs-number">4</span>),columns=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br>pd.scatter_matrix(&#123;df,figsize=(<span class="hljs-number">10</span>,<span class="hljs-number">6</span>),<br>                 marker=<span class="hljs-string">&#x27;o&#x27;</span>,<br>                 diagonal = <span class="hljs-string">&#x27;kde&#x27;</span>,<br>                 alpha = <span class="hljs-number">0.5</span>,<br>                 range_padding=<span class="hljs-number">0.1</span>&#125;)<br><span class="hljs-comment"># diagonal:(&#123;hist   kde&#125;)  只能其中选一个  确定频率</span><br><span class="hljs-comment">#   图像在x轴 ，y轴远点附近的留白，该值越大，图像离坐标远点越远</span><br></code></pre></td></tr></table></figure><h3 id="极坐标（雷达图）"><a href="#极坐标（雷达图）" class="headerlink" title="极坐标（雷达图）"></a>极坐标（雷达图）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建极坐标图</span><br>s = pd.Series(np.arange(<span class="hljs-number">20</span>))<br>theta = np.arange(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*np.pi,<span class="hljs-number">0.02</span>)<br><span class="hljs-built_in">print</span>(s.head())<br><span class="hljs-built_in">print</span>(theta[:<span class="hljs-number">10</span>])<br><span class="hljs-comment">#  创建数据</span><br><br>fig = plt.figure(figsize=(<span class="hljs-number">8</span>,<span class="hljs-number">4</span>))<br>ax1 = plt.subplot(<span class="hljs-number">121</span>,projection = <span class="hljs-string">&#x27;polar&#x27;</span>)<br>ax2 = plt.subplot(<span class="hljs-number">122</span>)<br><span class="hljs-comment">#   创建极坐标图</span><br><span class="hljs-comment">#  还可以写  ax = fig.add_subplot(111,polar=True)</span><br><br>ax1.plot(theta,theta*<span class="hljs-number">3</span>,linestyle = <span class="hljs-string">&#x27;--&#x27;</span>,lw=<span class="hljs-number">1</span>)     <span class="hljs-comment">#theta: x   theta*3 : y</span><br>ax1.plot(s,linestyle = <span class="hljs-string">&#x27;--&#x27;</span>,marker=<span class="hljs-string">&#x27;.&#x27;</span>,lw=<span class="hljs-number">2</span>)<br>ax2.plot(theta,theta*<span class="hljs-number">3</span>,linestyle = <span class="hljs-string">&#x27;--&#x27;</span>,lw=<span class="hljs-number">1</span>)<br>ax2.plot(s)<br>plt.grid()<br><span class="hljs-comment">#  创建极坐标图，参数1为角度  ，参数2为value</span><br><span class="hljs-comment">#  lw  线宽</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 参数</span><br>ax2.set_theta_direction(-<span class="hljs-number">1</span>)   <span class="hljs-comment">#坐标轴正方向，默认为逆方向</span><br>ax2.set_thetagrids(np.arange(<span class="hljs-number">0.0</span>,<span class="hljs-number">360</span>,<span class="hljs-number">90</span>))    <span class="hljs-comment">#设置极坐标角度网格线显示</span><br>ax2.set_rgrids(np.arange(<span class="hljs-number">0.2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0.4</span>))    <span class="hljs-comment">#  设置极径网格线显示，其中参数必须为正数</span><br><br>ax2.set_theta_offset(np.pi/<span class="hljs-number">2</span>)   <span class="hljs-comment">#设置角度【偏移】，逆时针，弧度制</span><br><br>ax2.set_rlim(<span class="hljs-number">0.2</span>,<span class="hljs-number">1.2</span>)   <span class="hljs-comment"># 显示的极径范围</span><br>ax2.set_rmax(<span class="hljs-number">2</span>)      <span class="hljs-comment">#设置显示的极径最大值</span><br>ax2.set_rticks(np.arange(<span class="hljs-number">0.1</span>,<span class="hljs-number">1.5</span>,<span class="hljs-number">0.2</span>))   <span class="hljs-comment">#  设置极径网格线的显示范围</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  雷达图1 - 极坐标的折线图、填图 - plt.plot()</span><br><br>plt.figure(figsize=(<span class="hljs-number">8</span>,<span class="hljs-number">4</span>))<br><br>ax1 = plt.subplot(<span class="hljs-number">111</span>,projection = <span class="hljs-string">&#x27;polar&#x27;</span>)<br>ax1.set_title(<span class="hljs-string">&#x27;radar map\n&#x27;</span>)  <span class="hljs-comment">#创建标题</span><br>ax1.set_rlim(<span class="hljs-number">0</span>,<span class="hljs-number">12</span>)<br><br>data1 = np.random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>)<br>data2 = np.random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>)<br>data3 = np.random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>)<br>theta = np.arange(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*np.pi,<span class="hljs-number">2</span>*np.pi/<span class="hljs-number">10</span>)<br><span class="hljs-comment">#  创建数据</span><br><br>ax1.plot(theta,data1,<span class="hljs-string">&#x27;.--&#x27;</span>,label=<span class="hljs-string">&#x27;data1&#x27;</span>)<br>ax1.fill(theta,data1,alpha=<span class="hljs-number">0.2</span>)<br>ax2.plot(theta,data2,<span class="hljs-string">&#x27;.--&#x27;</span>,label=<span class="hljs-string">&#x27;data2&#x27;</span>)<br>ax1.fill(theta,data2,alpha=<span class="hljs-number">0.2</span>)<br>ax1.plot(theta,data3,<span class="hljs-string">&#x27;.--&#x27;</span>,label=<span class="hljs-string">&#x27;data3&#x27;</span>)<br>ax1.fill(theta,data3,alpha=<span class="hljs-number">0.2</span>)<br><span class="hljs-comment"># 绘制雷达线</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  雷达图2 - 极坐标的折线图、填图 - plt.polar()</span><br><span class="hljs-comment"># 收尾闭合</span><br><br>labels = np.array([<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>])<br>dataLenth = <span class="hljs-number">6</span>  <span class="hljs-comment">#数据长度</span><br>data1 = np.random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>)<br>data2 = np.random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>)<span class="hljs-comment">#   数据</span><br><br>angles = np.linspace(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*np.pi,dataLenth,endpoint=<span class="hljs-literal">False</span>)  <span class="hljs-comment">#分割圆周长</span><br>data1 = np.concatenate((data1,[data1[<span class="hljs-number">0</span>]]))  <span class="hljs-comment">#闭合</span><br>data2 = np.concatenate((data2,[data2[<span class="hljs-number">0</span>]]))  <span class="hljs-comment">#闭合</span><br>angles = np.concatenate((angles,[angles[<span class="hljs-number">0</span>]]))  <span class="hljs-comment">#闭合</span><br><br>plt.polar(angles,data1,<span class="hljs-string">&#x27;o-&#x27;</span>,linewidth=<span class="hljs-number">1</span>)   <span class="hljs-comment">#做极坐标系</span><br>plt.fill(angles,data1,alpha = <span class="hljs-number">0.25</span>)  <span class="hljs-comment">#填充</span><br>plt.polar(angles,data2,<span class="hljs-string">&#x27;o-&#x27;</span>,linewidth=<span class="hljs-number">1</span>)   <span class="hljs-comment">#做极坐标系</span><br>plt.fill(angles,data2,alpha = <span class="hljs-number">0.25</span>)  <span class="hljs-comment">#填充</span><br><br>plt.thetagrids(angles*<span class="hljs-number">150</span>/np.pi,labels)   <span class="hljs-comment">#设置网格 标签</span><br>plt.ylim(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>) <span class="hljs-comment"># polar的极值设置为ylim</span><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pythom">plt.figure(figsize=(8,4))<br><br>ax1 = plt.subplot(111,projection=&#x27;polar&#x27;)<br>ax1.set_rlim(0,12)   <br><br>#data = np.random.randint(1,10,10)<br>#theta = np.arange(0.2*np.pi,2*np.pi/10)<br>#bar = ax1.bar(theta,data,alpha=0.5)  #创建数据<br><br>#for r,bar in zip(data,bar):<br>#    bar.set_facecolor(plt,cm.jet(r/10))   #设置颜色<br></code></pre></td></tr></table></figure><h3 id="箱型图"><a href="#箱型图" class="headerlink" title="箱型图"></a>箱型图</h3><h6 id="1、-上四分位数-将序列分为四份，一般使用（n-1）-4"><a href="#1、-上四分位数-将序列分为四份，一般使用（n-1）-4" class="headerlink" title="1、 上四分位数   - - 将序列分为四份，一般使用（n+1）/4"></a>1、 上四分位数   - - 将序列分为四份，一般使用（n+1）/4</h6><h6 id="2、-下四分位数-将序列分为四份，一般使用（n-1）-4-3-6-75"><a href="#2、-下四分位数-将序列分为四份，一般使用（n-1）-4-3-6-75" class="headerlink" title="2、 下四分位数  - - 将序列分为四份，一般使用（n+1）/4*3=6.75"></a>2、 下四分位数  - - 将序列分为四份，一般使用（n+1）/4*3=6.75</h6><h6 id="3、-内限-T形的盒须就是内限，最大值区间Q3-1-5IQR，最小区间是Q1-1-5IQR-IQR-Q3-Q1"><a href="#3、-内限-T形的盒须就是内限，最大值区间Q3-1-5IQR，最小区间是Q1-1-5IQR-IQR-Q3-Q1" class="headerlink" title="3、 内限 - -T形的盒须就是内限，最大值区间Q3+1.5IQR，最小区间是Q1-1.5IQR  (IQR = Q3-Q1)"></a>3、 内限 - -T形的盒须就是内限，最大值区间Q3+1.5IQR，最小区间是Q1-1.5IQR  (IQR = Q3-Q1)</h6><h6 id="4、-外限-T形的盒须就是内限，最大值区间Q3-3IQR，最小区间是Q1-3IQR"><a href="#4、-外限-T形的盒须就是内限，最大值区间Q3-3IQR，最小区间是Q1-3IQR" class="headerlink" title="4、 外限 - -T形的盒须就是内限，最大值区间Q3+3IQR，最小区间是Q1-3IQR"></a>4、 外限 - -T形的盒须就是内限，最大值区间Q3+3IQR，最小区间是Q1-3IQR</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  plt.plot.box()  绘制</span><br><br>fig,axes = plt.subplots(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,figsize=(<span class="hljs-number">10</span>,<span class="hljs-number">6</span>))<br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">10</span>,<span class="hljs-number">5</span>),columns=[<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>])<br>color = <span class="hljs-built_in">dict</span>(boxes = <span class="hljs-string">&#x27;DarkGreen&#x27;</span>,whiskers=<span class="hljs-string">&#x27;DarkOrange&#x27;</span>,medians=<span class="hljs-string">&#x27;DarkBlue&#x27;</span>,caps=<span class="hljs-string">&#x27;Gray&#x27;</span>)<br><span class="hljs-comment"># boxs 箱线</span><br><span class="hljs-comment">#  whiskers:  分位数与error bar横线之间竖线的颜色</span><br><span class="hljs-comment">#mediians  :  中位数线颜色</span><br><span class="hljs-comment">#  caps：   error bar横线颜色</span><br><br>df.plot.box(ylim=[<span class="hljs-number">0</span>,<span class="hljs-number">1.2</span>],<br>           grid = <span class="hljs-literal">True</span>,<br>           color= color,<br>           ax = axes[<span class="hljs-number">0</span>])<br><span class="hljs-comment">#  color: 样式填充</span><br><br>df.plot.box(vert = <span class="hljs-literal">False</span>,<br>           positions=[<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>],<br>           ax = axes[<span class="hljs-number">1</span>],<br>           grid = <span class="hljs-literal">True</span>,<br>           color = color)<br><span class="hljs-comment">#  vert:  是否垂直，默认为True</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">df = pd.DataFrame(np.random.rand(<span class="hljs-number">10</span>,<span class="hljs-number">5</span>),columns=[<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>])<br>plt.figure(figsize=(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>))<br><span class="hljs-comment">#  创建图表数据</span><br><br>f = df.boxplot(sym = <span class="hljs-string">&#x27;o&#x27;</span>,   <span class="hljs-comment"># 异常点形状，参考marker</span><br>              vert = <span class="hljs-literal">True</span>,  <br>              whis=<span class="hljs-number">1.5</span>,         <span class="hljs-comment">#IQR</span><br>              patch_artist = <span class="hljs-literal">True</span>,     <span class="hljs-comment"># 上下四分位框内是否填充</span><br>              meanline = <span class="hljs-literal">False</span>,showmeans=<span class="hljs-literal">True</span>,    <span class="hljs-comment">#是否有均值线及其形状</span><br>              showbox = <span class="hljs-literal">True</span>,     <span class="hljs-comment"># 是否显示箱线</span><br>              showcaps = <span class="hljs-literal">True</span>,    <span class="hljs-comment"># 是否显示边缘线</span><br>              showfliers = <span class="hljs-literal">True</span>,   <span class="hljs-comment"># 是否显示异常值</span><br>              notch = <span class="hljs-literal">False</span>,     <span class="hljs-comment">#  中间箱体是否有缺口</span><br>              return_type = <span class="hljs-string">&#x27;dict&#x27;</span>)    <span class="hljs-comment"># 返回类型为字典</span><br>plt.title(<span class="hljs-string">&#x27;boxplot&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  plt.boxplot()绘制</span><br><span class="hljs-comment">#  分组汇总</span><br><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>),columns = [<span class="hljs-string">&#x27;col1&#x27;</span>,<span class="hljs-string">&#x27;col2&#x27;</span>])<br>df[<span class="hljs-string">&#x27;X&#x27;</span>] = pd.Series([<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>])<br>df[<span class="hljs-string">&#x27;Y&#x27;</span>] = pd.Series([<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>])<br><span class="hljs-comment">#print(df.head())</span><br>df.boxplot(by = <span class="hljs-string">&#x27;X&#x27;</span>)    <span class="hljs-comment">#  汇总</span><br>df.boxplot(column=[<span class="hljs-string">&#x27;col1&#x27;</span>,<span class="hljs-string">&#x27;col2&#x27;</span>],by = [<span class="hljs-string">&#x27;X&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>])<br><br><br><span class="hljs-comment">#  column:  按照数据的列分子图</span><br><span class="hljs-comment">#  by ； 按照列分组做的箱型图</span><br></code></pre></td></tr></table></figure><h3 id="样式表格创建"><a href="#样式表格创建" class="headerlink" title="样式表格创建"></a>样式表格创建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  样式</span><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>),columns = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br>df<br><span class="hljs-comment">#sty = df.style</span><br><span class="hljs-comment">#print(sty,type(sty))</span><br>sty<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  按元素处理样式：  style.applymap() ----自动调用其中的函数</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">color_neg_red</span>(<span class="hljs-params">val</span>):</span><br>    <span class="hljs-keyword">if</span> val&lt;<span class="hljs-number">0</span>:<br>        color=<span class="hljs-string">&#x27;red&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        color=<span class="hljs-string">&#x27;black&#x27;</span><br>    <span class="hljs-keyword">return</span>(<span class="hljs-string">&#x27;color:%s&#x27;</span>% color)<br>df.style.applymap(color_neg_red) <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  按行/列 处理样式：  style.apply()</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">highlight_max</span>(<span class="hljs-params">s</span>):</span><br>    is_max = s == s.<span class="hljs-built_in">max</span>()<br>    <br>    lst = []<br>    <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> is_max:<br>        <span class="hljs-keyword">if</span> v:<br>            lst.append(<span class="hljs-string">&#x27;background-color:yellow&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            lst.append(<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">return</span>(lst)<br>df.style.apply(highlight_max,axis = <span class="hljs-number">0</span>,subset = [<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>])<br><br><span class="hljs-comment"># 创建样式方法，每列最大值填充黄色</span><br><span class="hljs-comment"># axis:  0为列，  1为行 ，默认为0</span><br><span class="hljs-comment">#  subset:  索引</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  样式索引、切片</span><br><br>df.style.apply(highlight_max,axis = <span class="hljs-number">1</span>,<br>              subset = pd.IndexSlice[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>,[<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>]])  <br></code></pre></td></tr></table></figure><h3 id="表格显示控制"><a href="#表格显示控制" class="headerlink" title="表格显示控制"></a>表格显示控制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 按照百分数显示</span><br><br>df = pd.DataFrame(np.random.randn(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>),columns=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br><span class="hljs-built_in">print</span>(df)<br>df.head().style.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;&#123;:.2%&#125;&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#   显示小数点数</span><br><br>df.head().style.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;&#123;:.4%&#125;&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#   显示正负数</span><br><br>df.head().style.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;&#123;:+.2f&#125;&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 分列显示</span><br><br>df.head().style.<span class="hljs-built_in">format</span>(&#123;<span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-string">&quot;&#123;:.2%&#125;&quot;</span>,<span class="hljs-string">&#x27;c&#x27;</span>:<span class="hljs-string">&quot;&#123;:+.3f&#125;&quot;</span>,<span class="hljs-string">&#x27;d&#x27;</span>:<span class="hljs-string">&quot;&#123;:.3f&#125;&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><h3 id="表格样式调用"><a href="#表格样式调用" class="headerlink" title="表格样式调用"></a>表格样式调用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  定位空值</span><br><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">5</span>,<span class="hljs-number">4</span>),columns=<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;ABCD&#x27;</span>))<br>df[<span class="hljs-string">&#x27;A&#x27;</span>][<span class="hljs-number">2</span>] = np.nan<br>df.style.highlight_null(null_color = <span class="hljs-string">&#x27;red&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  色彩映射</span><br><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>),columns=<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;ABCD&#x27;</span>))<br>df.style.background_gradient(cmap=<span class="hljs-string">&#x27;Greens&#x27;</span>,axis = <span class="hljs-number">1</span>,low = <span class="hljs-number">0</span>,high = <span class="hljs-number">1</span>)<br><span class="hljs-comment">#  camp 颜色</span><br><span class="hljs-comment">#  axis:  映射参考，0为行，1为列</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  条形图</span><br><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>),columns=<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;ABCD&#x27;</span>))<br>df.style.bar(subset=[<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>],color=<span class="hljs-string">&#x27;#d65f5f&#x27;</span>,width=<span class="hljs-number">100</span>)<br><span class="hljs-comment"># width 最长长度在格子的占比</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  分段式构建样式</span><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>),columns=<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;ABCD&#x27;</span>))<br>df[<span class="hljs-string">&#x27;A&#x27;</span>][[<span class="hljs-number">3</span>,<span class="hljs-number">2</span>]] =np.nan<br>df.style.\<br>       bar(subset=[<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>],color = <span class="hljs-string">&#x27;#d65f5f&#x27;</span>,width=<span class="hljs-number">100</span>).\<br>       highlight_null(null_color=<span class="hljs-string">&#x27;yellow&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python+机器学习+数据分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python-重点工具(Pandas计算)</title>
    <link href="/2022/07/15/python%E9%87%8D%E7%82%B9%E5%B7%A5%E5%85%B7%E6%8E%8C%E6%8F%A1%EF%BC%88pandas%EF%BC%89/"/>
    <url>/2022/07/15/python%E9%87%8D%E7%82%B9%E5%B7%A5%E5%85%B7%E6%8E%8C%E6%8F%A1%EF%BC%88pandas%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="数值计算和统计基础"><a href="#数值计算和统计基础" class="headerlink" title="数值计算和统计基础"></a>数值计算和统计基础</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  基本参数： axis\\skipna</span><br><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key1&#x27;</span>:[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,np.nan,<span class="hljs-number">2</span>],<br>                   <span class="hljs-string">&#x27;key2&#x27;</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,np.nan,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],<br>                   <span class="hljs-string">&#x27;key3&#x27;</span>:[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>]&#125;)<br><span class="hljs-built_in">print</span>(df)<br><br><span class="hljs-built_in">print</span>(df.mean(),<span class="hljs-built_in">type</span>(df.mean()))<br><span class="hljs-built_in">print</span>(df.mean(axis = <span class="hljs-number">1</span>))   <br><span class="hljs-built_in">print</span>(df.mean(skipna=<span class="hljs-literal">False</span>))   <span class="hljs-comment">#不过滤空值</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key1&#x27;</span>:np.arange(<span class="hljs-number">10</span>),<br>                  <span class="hljs-string">&#x27;key2&#x27;</span>:np.random.rand(<span class="hljs-number">10</span>)*<span class="hljs-number">10</span>&#125;)<br><span class="hljs-built_in">print</span>(df)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----&#x27;</span>)<br><span class="hljs-built_in">print</span>(df.quantile(q=<span class="hljs-number">0.75</span>))   <span class="hljs-comment">#统计分位数，q值默认为0.5，也就是中值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br><span class="hljs-built_in">print</span>(df.skew())    <span class="hljs-comment">#样本的偏度</span><br><span class="hljs-built_in">print</span>(df.kurt())    <span class="hljs-comment">#样本的峰度</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">df[<span class="hljs-string">&#x27;key1_s&#x27;</span>] = df[<span class="hljs-string">&#x27;key1&#x27;</span>].cumsum()   <span class="hljs-comment">#累计求和</span><br>df[<span class="hljs-string">&#x27;key2_s&#x27;</span>] = df[<span class="hljs-string">&#x27;key2&#x27;</span>].cumsum()<br><span class="hljs-built_in">print</span>(df)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br>df[<span class="hljs-string">&#x27;key1_p&#x27;</span>] = df[<span class="hljs-string">&#x27;key1&#x27;</span>].cumprod()   <span class="hljs-comment">#累计求积</span><br>df[<span class="hljs-string">&#x27;key2_p&#x27;</span>] = df[<span class="hljs-string">&#x27;key2&#x27;</span>].cumprod()<br><span class="hljs-built_in">print</span>(df)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(df.cummax(),<span class="hljs-string">&#x27;\n&#x27;</span>,df.cummin())    <span class="hljs-comment">#分别求累积最大值和最小值</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#唯一值：  .unique()</span><br><br>s = pd.Series(<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;assadsadfkj&#x27;</span>))<br>sq = s.unique()<br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-built_in">print</span>(sq,<span class="hljs-built_in">type</span>(sq))<br><span class="hljs-built_in">print</span>(pd.Series(sq))<br><br>sq.sort()<br><span class="hljs-built_in">print</span>(sq)<br><br>sc = s.value_counts(sort = <span class="hljs-literal">False</span>)    <span class="hljs-comment">#值出现频率的计数</span><br><span class="hljs-built_in">print</span>(sc)<br></code></pre></td></tr></table></figure><h3 id="文本数据"><a href="#文本数据" class="headerlink" title="文本数据"></a>文本数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  通过str访问，且自动排除丢失和Na值</span><br><br>s = pd.Series([<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;HHUHDD&#x27;</span>,<span class="hljs-string">&#x27;123&#x27;</span>,np.nan,<span class="hljs-string">&#x27;ju&#x27;</span>])<br>df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key1&#x27;</span>:<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;abcdef&#x27;</span>),<br>                  <span class="hljs-string">&#x27;key2&#x27;</span>:[<span class="hljs-string">&#x27;hee&#x27;</span>,<span class="hljs-string">&#x27;fv&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>,<span class="hljs-string">&#x27;hije&#x27;</span>,<span class="hljs-string">&#x27;123&#x27;</span>,np.nan]&#125;)<br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-built_in">print</span>(df)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">str</span>.count(<span class="hljs-string">&#x27;B&#x27;</span>))<br><span class="hljs-built_in">print</span>(df[<span class="hljs-string">&#x27;key2&#x27;</span>].<span class="hljs-built_in">str</span>.upper())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---&#x27;</span>)<br><br>df.columns.<span class="hljs-built_in">str</span>.upper()<br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#字符串常用方法</span><br><br>s = pd.Series([<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;jjaj&#x27;</span>,<span class="hljs-string">&#x27;123&#x27;</span>,np.nan])<br><br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">str</span>.lower(),<span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">str</span>.upper(),<span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">str</span>.<span class="hljs-built_in">len</span>(),<span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">str</span>.startswith(<span class="hljs-string">&#x27;b&#x27;</span>),<span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">str</span>.endswith(<span class="hljs-string">&#x27;3&#x27;</span>),<span class="hljs-string">&#x27;\n&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  replace()</span><br><br>df  = pd.DataFrame(np.random.rand(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>),columns=[<span class="hljs-string">&#x27; columns A&#x27;</span>,<span class="hljs-string">&#x27; column B&#x27;</span>],index = <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>))<br>df.columns = df.columns.<span class="hljs-built_in">str</span>.replace(<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;-&#x27;</span>)<br><span class="hljs-built_in">print</span>(df)<br><br>df.columns = df.columns.<span class="hljs-built_in">str</span>.replace(<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-string">&#x27;hha&#x27;</span>,n=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#   -split\\rsplit</span><br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>s = pd.Series([<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;1,2,3&#x27;</span>,[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>],np.nan])<br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">str</span>.split(<span class="hljs-string">&#x27;,&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">str</span>.split(<span class="hljs-string">&#x27;,&#x27;</span>)[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---&#x27;</span>)<br><span class="hljs-comment">#直接索引得到一个list</span><br><br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">str</span>.split(<span class="hljs-string">&#x27;,&#x27;</span>).<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">str</span>.split(<span class="hljs-string">&#x27;,&#x27;</span>).<span class="hljs-built_in">str</span>.get(<span class="hljs-number">1</span>))     <span class="hljs-comment">#  访问被拆分的元素</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">str</span>.split(<span class="hljs-string">&#x27;,&#x27;</span>,expand=<span class="hljs-literal">True</span>))<br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">str</span>.split(<span class="hljs-string">&#x27;,&#x27;</span>,expand=<span class="hljs-literal">True</span>,n = <span class="hljs-number">1</span>))     <span class="hljs-comment">#限制分割数</span><br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">str</span>.rsplit(<span class="hljs-string">&#x27;,&#x27;</span>,expand=<span class="hljs-literal">True</span>,n =<span class="hljs-number">1</span>))     <span class="hljs-comment">#  字符串末尾到字符串开头</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br><br>df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key1&#x27;</span>:[<span class="hljs-string">&#x27;a,b,c&#x27;</span>,<span class="hljs-string">&#x27;1,2,3&#x27;</span>,[<span class="hljs-string">&#x27;:,.,&#x27;</span>]],<br>                  <span class="hljs-string">&#x27;key2&#x27;</span>:[<span class="hljs-string">&#x27;a-b-c&#x27;</span>,<span class="hljs-string">&#x27;1-2-3&#x27;</span>,[<span class="hljs-string">&#x27;:-.-&#x27;</span>]]&#125;)<br><span class="hljs-built_in">print</span>(df[<span class="hljs-string">&#x27;key2&#x27;</span>].<span class="hljs-built_in">str</span>.split(<span class="hljs-string">&#x27;-&#x27;</span>))<br><span class="hljs-comment">#DataFrame使用split</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  字符串索引</span><br><br>s = pd.Series([<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;dsdscd&#x27;</span>,<span class="hljs-string">&#x27;123&#x27;</span>,np.nan,<span class="hljs-string">&#x27;hj&#x27;</span>])<br>df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key1&#x27;</span>:<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;abcdef&#x27;</span>),<br>                  <span class="hljs-string">&#x27;key2&#x27;</span>:[<span class="hljs-string">&#x27;hee&#x27;</span>,<span class="hljs-string">&#x27;fv&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>,<span class="hljs-string">&#x27;jiij&#x27;</span>,<span class="hljs-string">&#x27;123&#x27;</span>,np.nan]&#125;)<br><br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>])   <span class="hljs-comment">#取第一个字符串</span><br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">str</span>[:<span class="hljs-number">2</span>])   <span class="hljs-comment">#取前两个字符串</span><br><span class="hljs-built_in">print</span>(df[<span class="hljs-string">&#x27;key2&#x27;</span>].<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># merge合并</span><br><br>df1 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key&#x27;</span>:[<span class="hljs-string">&#x27;KO&#x27;</span>,<span class="hljs-string">&#x27;K1&#x27;</span>,<span class="hljs-string">&#x27;K2&#x27;</span>,<span class="hljs-string">&#x27;K3&#x27;</span>],<br>                  <span class="hljs-string">&#x27;A&#x27;</span>:[<span class="hljs-string">&#x27;AD&#x27;</span>,<span class="hljs-string">&#x27;A1&#x27;</span>,<span class="hljs-string">&#x27;A2&#x27;</span>,<span class="hljs-string">&#x27;A3&#x27;</span>],<br>                  <span class="hljs-string">&#x27;B&#x27;</span>:[<span class="hljs-string">&#x27;B0&#x27;</span>,<span class="hljs-string">&#x27;B1&#x27;</span>,<span class="hljs-string">&#x27;B2&#x27;</span>,<span class="hljs-string">&#x27;B3&#x27;</span>]&#125;)<br>df2 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key&#x27;</span>:[<span class="hljs-string">&#x27;KO&#x27;</span>,<span class="hljs-string">&#x27;K1&#x27;</span>,<span class="hljs-string">&#x27;K2&#x27;</span>,<span class="hljs-string">&#x27;K3&#x27;</span>],<br>                  <span class="hljs-string">&#x27;C&#x27;</span>:[<span class="hljs-string">&#x27;CD&#x27;</span>,<span class="hljs-string">&#x27;C1&#x27;</span>,<span class="hljs-string">&#x27;C2&#x27;</span>,<span class="hljs-string">&#x27;C3&#x27;</span>],<br>                  <span class="hljs-string">&#x27;D&#x27;</span>:[<span class="hljs-string">&#x27;D0&#x27;</span>,<span class="hljs-string">&#x27;D1&#x27;</span>,<span class="hljs-string">&#x27;D2&#x27;</span>,<span class="hljs-string">&#x27;D3&#x27;</span>]&#125;)<br><span class="hljs-built_in">print</span>(df1)<br><span class="hljs-built_in">print</span>(df2)<br><span class="hljs-built_in">print</span>(pd.merge(df1,df2,on=<span class="hljs-string">&#x27;key&#x27;</span>))  <span class="hljs-comment">#key按照参考键</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br><br>df3 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key1&#x27;</span>:[<span class="hljs-string">&#x27;KO&#x27;</span>,<span class="hljs-string">&#x27;K0&#x27;</span>,<span class="hljs-string">&#x27;K1&#x27;</span>,<span class="hljs-string">&#x27;K2&#x27;</span>],<br>                    <span class="hljs-string">&#x27;key2&#x27;</span>:[<span class="hljs-string">&#x27;KO&#x27;</span>,<span class="hljs-string">&#x27;K1&#x27;</span>,<span class="hljs-string">&#x27;K0&#x27;</span>,<span class="hljs-string">&#x27;K1&#x27;</span>],<br>                  <span class="hljs-string">&#x27;A&#x27;</span>:[<span class="hljs-string">&#x27;AD&#x27;</span>,<span class="hljs-string">&#x27;A1&#x27;</span>,<span class="hljs-string">&#x27;A2&#x27;</span>,<span class="hljs-string">&#x27;A3&#x27;</span>],<br>                  <span class="hljs-string">&#x27;B&#x27;</span>:[<span class="hljs-string">&#x27;B0&#x27;</span>,<span class="hljs-string">&#x27;B1&#x27;</span>,<span class="hljs-string">&#x27;B2&#x27;</span>,<span class="hljs-string">&#x27;B3&#x27;</span>]&#125;)<br>df4 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key1&#x27;</span>:[<span class="hljs-string">&#x27;KO&#x27;</span>,<span class="hljs-string">&#x27;K1&#x27;</span>,<span class="hljs-string">&#x27;K1&#x27;</span>,<span class="hljs-string">&#x27;K2&#x27;</span>],<br>                    <span class="hljs-string">&#x27;key2&#x27;</span>:[<span class="hljs-string">&#x27;KO&#x27;</span>,<span class="hljs-string">&#x27;K0&#x27;</span>,<span class="hljs-string">&#x27;K0&#x27;</span>,<span class="hljs-string">&#x27;K0&#x27;</span>],<br>                  <span class="hljs-string">&#x27;C&#x27;</span>:[<span class="hljs-string">&#x27;CD&#x27;</span>,<span class="hljs-string">&#x27;C1&#x27;</span>,<span class="hljs-string">&#x27;C2&#x27;</span>,<span class="hljs-string">&#x27;C3&#x27;</span>],<br>                  <span class="hljs-string">&#x27;D&#x27;</span>:[<span class="hljs-string">&#x27;D0&#x27;</span>,<span class="hljs-string">&#x27;D1&#x27;</span>,<span class="hljs-string">&#x27;D2&#x27;</span>,<span class="hljs-string">&#x27;D3&#x27;</span>]&#125;)<br><span class="hljs-built_in">print</span>(df3)<br><span class="hljs-built_in">print</span>(df4)<br><span class="hljs-built_in">print</span>(pd.merge(df3,df4,on=[<span class="hljs-string">&#x27;key1&#x27;</span>,<span class="hljs-string">&#x27;key2&#x27;</span>]))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(pd.merge(df3,df4,on = [<span class="hljs-string">&#x27;key1&#x27;</span>,<span class="hljs-string">&#x27;key2&#x27;</span>],how = <span class="hljs-string">&#x27;inner&#x27;</span>))   <span class="hljs-comment">#交集</span><br><span class="hljs-built_in">print</span>(pd.merge(df3,df4,on = [<span class="hljs-string">&#x27;key1&#x27;</span>,<span class="hljs-string">&#x27;key2&#x27;</span>],how = <span class="hljs-string">&#x27;outer&#x27;</span>))   <span class="hljs-comment">#并集</span><br><span class="hljs-built_in">print</span>(pd.merge(df3,df4,on = [<span class="hljs-string">&#x27;key1&#x27;</span>,<span class="hljs-string">&#x27;key2&#x27;</span>],how = <span class="hljs-string">&#x27;left&#x27;</span>))  <span class="hljs-comment">#以df3合并为主</span><br><span class="hljs-built_in">print</span>(pd.merge(df3,df4,on = [<span class="hljs-string">&#x27;key1&#x27;</span>,<span class="hljs-string">&#x27;key2&#x27;</span>],how = <span class="hljs-string">&#x27;right&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="连接与补修"><a href="#连接与补修" class="headerlink" title="连接与补修"></a>连接与补修</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas  <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy  <span class="hljs-keyword">as</span> np<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  连接：concat</span><br><br>s1 = pd.Series([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br>s2 = pd.Series([<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br>s3= pd.Series([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],index = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>])<br>s4= pd.Series([<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],index = [<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>])<br><span class="hljs-built_in">print</span>(pd.concat([s1,s2]))<br><span class="hljs-built_in">print</span>(pd.concat([s3,s4]).sort_index())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br><span class="hljs-comment">#默认axis=0,行 + 行。</span><br><br><span class="hljs-built_in">print</span>(pd.concat([s3,s4],axis=<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br><span class="hljs-comment">#axis=1，列+列，成为一个DataFrame</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 连接方式：  join，join_axes</span><br><br>s5= pd.Series([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],index = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>])<br>s6= pd.Series([<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],index = [<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br><span class="hljs-built_in">print</span>(pd.concat([s5,s6],axis=<span class="hljs-number">1</span>))    <span class="hljs-comment">#默认是并集</span><br><span class="hljs-built_in">print</span>(pd.concat([s5,s6],axis=<span class="hljs-number">1</span>,join=<span class="hljs-string">&#x27;inner&#x27;</span>))    <span class="hljs-comment">#inner为交集  </span><br><span class="hljs-built_in">print</span>(pd.concat([s5,s6],axis=<span class="hljs-number">1</span>,join_axes=[[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>]])) <span class="hljs-comment">#join_axes为指定联合的index</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(pd.concat([s5,s6],keys=[<span class="hljs-string">&#x27;one&#x27;</span>,<span class="hljs-string">&#x27;two&#x27;</span>]))<br><span class="hljs-built_in">print</span>(pd.concat([s5,s6],axis=<span class="hljs-number">1</span>,keys=[<span class="hljs-string">&#x27;one&#x27;</span>,<span class="hljs-string">&#x27;two&#x27;</span>]))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 修补pd.combine_first()</span><br><br>df1 = pd.DataFrame([[np.nan,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>],[-<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,np.nan,np.nan],[np.nan,<span class="hljs-number">7</span>,np.nan]])<br>df2 = pd.DataFrame([[-<span class="hljs-number">42.6</span>,np.nan,-<span class="hljs-number">8</span>,<span class="hljs-number">2</span>],[-<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>]],index = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>])<br><span class="hljs-built_in">print</span>(df1)<br><span class="hljs-built_in">print</span>(df2)<br><span class="hljs-built_in">print</span>(df1.combine_first(df2))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br><span class="hljs-comment">#根据index，df1的空值被df2代替</span><br><span class="hljs-comment">#如果df2的index多于df1，则更新到df1上</span><br><br>df1.updata(df2)<br><span class="hljs-built_in">print</span>(df1)<br><span class="hljs-comment">#updata,直接df2覆盖df1，相同index的位置</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python+机器学习+数据分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python-重点工具(Pandas数据结构)</title>
    <link href="/2022/07/15/python%E9%87%8D%E7%82%B9%E5%B7%A5%E5%85%B7%E6%8E%8C%E6%8F%A1%EF%BC%88pandas%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%89/"/>
    <url>/2022/07/15/python%E9%87%8D%E7%82%B9%E5%B7%A5%E5%85%B7%E6%8E%8C%E6%8F%A1%EF%BC%88pandas%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="Pandas数据结构Series：索引"><a href="#Pandas数据结构Series：索引" class="headerlink" title="Pandas数据结构Series：索引"></a>Pandas数据结构Series：索引</h3><h5 id="位置下拉-标签索引-切片索引-布尔型索引"><a href="#位置下拉-标签索引-切片索引-布尔型索引" class="headerlink" title="位置下拉 / 标签索引 / 切片索引 / 布尔型索引"></a>位置下拉 / 标签索引 / 切片索引 / 布尔型索引</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas  <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy  <span class="hljs-keyword">as</span> np<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#位置下拉</span><br>s = pd.Series(np.random.rand(<span class="hljs-number">5</span>))<br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">0</span>],<span class="hljs-built_in">type</span>(s[<span class="hljs-number">0</span>]),s[<span class="hljs-number">0</span>].dtype)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">float</span>(s[<span class="hljs-number">0</span>]),<span class="hljs-built_in">type</span>(<span class="hljs-built_in">float</span>(s[<span class="hljs-number">0</span>])))<br><span class="hljs-comment">#print(s[-1])-------报错</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#下标索引</span><br><br>s = pd.Series(np.random.rand(<span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">0</span>],<span class="hljs-built_in">type</span>(s[<span class="hljs-number">0</span>]),s[<span class="hljs-number">0</span>].dtype)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 标签索引</span><br><br>s = pd.Series(np.random.rand(<span class="hljs-number">5</span>),index = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>])<br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-built_in">print</span>(s[<span class="hljs-string">&#x27;a&#x27;</span>],<span class="hljs-built_in">type</span>(s[<span class="hljs-string">&#x27;a&#x27;</span>]),s[<span class="hljs-string">&#x27;a&#x27;</span>].dtype)<br><br><span class="hljs-built_in">print</span>(s[[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]])   <span class="hljs-comment">#新的数组</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#切片索引</span><br><br>s1 = pd.Series(np.random.rand(<span class="hljs-number">5</span>))<br>s2 = pd.Series(np.random.rand(<span class="hljs-number">5</span>),index = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>])<br><span class="hljs-built_in">print</span>(s1)<br><span class="hljs-built_in">print</span>(s2)<br><span class="hljs-built_in">print</span>(s1[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>],s1[<span class="hljs-number">4</span>])   <span class="hljs-comment">#下标</span><br><span class="hljs-built_in">print</span>(s2[<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-string">&#x27;d&#x27;</span>],s2[<span class="hljs-string">&#x27;c&#x27;</span>])   <span class="hljs-comment">#标签</span><br><br><span class="hljs-built_in">print</span>(s2[:-<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(s2[::<span class="hljs-number">2</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#巴布型索引</span><br><br>s = pd.Series(np.random.rand(<span class="hljs-number">3</span>)*<span class="hljs-number">100</span>)<br>s[<span class="hljs-number">4</span>] = <span class="hljs-literal">None</span><br><span class="hljs-built_in">print</span>(s)<br>bs1 = s&gt;<span class="hljs-number">50</span><br>bs2 = s.isnull()<br>bs3 = s.notnull()<br><span class="hljs-built_in">print</span>(bs1,<span class="hljs-built_in">type</span>(bs1),bs1.dtype)<br><span class="hljs-built_in">print</span>(bs2,<span class="hljs-built_in">type</span>(bs2),bs2.dtype)<br><span class="hljs-built_in">print</span>(bs3,<span class="hljs-built_in">type</span>(bs3),bs3.dtype)<br><br><span class="hljs-built_in">print</span>(s[s &gt;<span class="hljs-number">50</span>])<br><span class="hljs-built_in">print</span>(s[bs1])<br></code></pre></td></tr></table></figure><h3 id="Pandas数据结构Series"><a href="#Pandas数据结构Series" class="headerlink" title="Pandas数据结构Series"></a>Pandas数据结构Series</h3><h5 id="数据查看-重新索引-对齐-添加、修改、删除值"><a href="#数据查看-重新索引-对齐-添加、修改、删除值" class="headerlink" title="数据查看 /  重新索引  /  对齐 / 添加、修改、删除值"></a>数据查看 /  重新索引  /  对齐 / 添加、修改、删除值</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#数据查看</span><br><br>s = pd.Series(np.random.rand(<span class="hljs-number">50</span>))<br><span class="hljs-built_in">print</span>(s.head(<span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(s.tail())<br><span class="hljs-comment">#.head()查看头部数据</span><br><span class="hljs-comment">#.tall()查看尾部数据</span><br><span class="hljs-comment">#默认查看5条</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  重新索引  reindex</span><br><br>s = pd.Series(np.random.rand(<span class="hljs-number">5</span>),index = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>])<br>s1 = s.reindex([<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>])<br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-built_in">print</span>(s1)<br><span class="hljs-built_in">print</span>(s.reindex([<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>]))<br><br>s2 = s.reindex([<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-string">&#x27;ss&#x27;</span>],fill_value = <span class="hljs-number">0</span>)     <span class="hljs-comment">#不知数全部用0来填充</span><br><span class="hljs-built_in">print</span>(s2)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Series对齐</span><br><br>s1 = pd.Series(np.random.rand(<span class="hljs-number">3</span>),index = [<span class="hljs-string">&#x27;Jack&#x27;</span>,<span class="hljs-string">&#x27;Mary&#x27;</span>,<span class="hljs-string">&#x27;Tom&#x27;</span>])<br>s2 = pd.Series(np.random.rand(<span class="hljs-number">3</span>),index = [<span class="hljs-string">&#x27;wang&#x27;</span>,<span class="hljs-string">&#x27;Mary&#x27;</span>,<span class="hljs-string">&#x27;Mary&#x27;</span>])<br><span class="hljs-built_in">print</span>(s1)<br><span class="hljs-built_in">print</span>(s2)<br><span class="hljs-built_in">print</span>(s1+s2)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  删除：  drop</span><br><br>s = pd.Series(np.random.rand(<span class="hljs-number">5</span>),index = <span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;nkswm&#x27;</span>))<br><span class="hljs-built_in">print</span>(s)<br>s1 = s.drop(<span class="hljs-string">&#x27;n&#x27;</span>)<br>s2 = s.drop([<span class="hljs-string">&#x27;w&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>])<br><span class="hljs-built_in">print</span>(s1)<br><span class="hljs-built_in">print</span>(s2)<br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  添加  (原数据不变)</span><br><br>s = pd.Series(np.random.rand(<span class="hljs-number">5</span>),index = <span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;nkswm&#x27;</span>))<br>s3 = s.append(s)<br><span class="hljs-built_in">print</span>(s3)<br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><h3 id="数据结构Dataframe"><a href="#数据结构Dataframe" class="headerlink" title="数据结构Dataframe"></a>数据结构Dataframe</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">data = &#123;<span class="hljs-string">&#x27;name&#x27;</span>:[<span class="hljs-string">&#x27;Jack&#x27;</span>,<span class="hljs-string">&#x27;Tome&#x27;</span>,<span class="hljs-string">&#x27;Mary&#x27;</span>],<br>        <span class="hljs-string">&#x27;age&#x27;</span>:[<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>],<br>        <span class="hljs-string">&#x27;gender&#x27;</span>:[<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-string">&#x27;n&#x27;</span>,<span class="hljs-string">&#x27;v&#x27;</span>]&#125;<br>frame = pd.DataFrame(data)<br><span class="hljs-built_in">print</span>(frame)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(frame))<br><br><span class="hljs-built_in">print</span>(frame.values)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  Dataframe的创建</span><br><br><span class="hljs-keyword">from</span> pandas <span class="hljs-keyword">import</span> Series<br><span class="hljs-keyword">import</span> pandas  <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy  <span class="hljs-keyword">as</span> np<br><br>data1 = &#123;<span class="hljs-string">&#x27;a&#x27;</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<br>        <span class="hljs-string">&#x27;b&#x27;</span>:[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],<br>        <span class="hljs-string">&#x27;c&#x27;</span>:[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]&#125;<br>data2 = &#123;<span class="hljs-string">&#x27;one&#x27;</span>:np.random.rand(<span class="hljs-number">3</span> ),    <span class="hljs-comment">#字典的长度必须一样</span><br>        <span class="hljs-string">&#x27;two&#x27;</span>:np.random.rand(<span class="hljs-number">3</span>)&#125;<br><span class="hljs-built_in">print</span>(data1)<br><span class="hljs-built_in">print</span>(data2)<br>d1 = pd.DataFrame(data1)<br>d2 = pd.DataFrame(data2)<br><span class="hljs-built_in">print</span>(d1)<br><span class="hljs-built_in">print</span>(d2)<br><br>df1 = pd.DataFrame(data1, columns = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])   <span class="hljs-comment">#columns重新指定列，以及列的名称</span><br><span class="hljs-built_in">print</span>(df1)<br>df1 = pd.DataFrame(data1, columns = [<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>])<br><span class="hljs-built_in">print</span>(df1)<br><br>df2 = pd.DataFrame(data1, index = [<span class="hljs-string">&#x27;f1&#x27;</span>,<span class="hljs-string">&#x27;f2&#x27;</span>,<span class="hljs-string">&#x27;f3&#x27;</span>])<br><span class="hljs-built_in">print</span>(df2)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">data1 = &#123;<span class="hljs-string">&#x27;one&#x27;</span>:pd.Series(np.random.rand(<span class="hljs-number">2</span>)),         <br>        <span class="hljs-string">&#x27;two&#x27;</span>:pd.Series(np.random.rand(<span class="hljs-number">3</span>))&#125;<br>data2 = &#123;<span class="hljs-string">&#x27;one&#x27;</span>:pd.Series(np.random.rand(<span class="hljs-number">2</span>),index = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>]),    <span class="hljs-comment">#Series不用数量一样</span><br>        <span class="hljs-string">&#x27;two&#x27;</span>:pd.Series(np.random.rand(<span class="hljs-number">3</span>),index = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>])&#125;<br><span class="hljs-built_in">print</span>(data1)<br><span class="hljs-built_in">print</span>(data2)                        <br>     <br>d1 = pd.DataFrame(data1)<br>d2 = pd.DataFrame(data2)<br><span class="hljs-built_in">print</span>(d1)<br><br><span class="hljs-built_in">print</span>(d2)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#   3、通过二维数组直接创建  -----</span><br><br>ar = np.random.rand(<span class="hljs-number">9</span>).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(ar)<br>df1 = pd.DataFrame(ar)<br>df2 = pd.DataFrame(data1, index = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>],columns = [<span class="hljs-string">&#x27;one&#x27;</span>,<span class="hljs-string">&#x27;two&#x27;</span>,<span class="hljs-string">&#x27;three&#x27;</span>])  <span class="hljs-comment">#index和columns长度必须一样</span><br><span class="hljs-built_in">print</span>(df1)<br><span class="hljs-built_in">print</span>(df2)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#   4、 由字典组成的列表-----每一个字典都是一行</span><br>data = [&#123;<span class="hljs-string">&#x27;one&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;two&#x27;</span>:<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-string">&#x27;one&#x27;</span>:<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;two&#x27;</span>:<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;three&#x27;</span>:<span class="hljs-number">10</span>&#125;]<br><span class="hljs-built_in">print</span>(data)<br>df1 = pd.DataFrame(data)<br>df2 = pd.DataFrame(data, index = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>])<br>df3 = pd.DataFrame(data,columns = [<span class="hljs-string">&#x27;one&#x27;</span>,<span class="hljs-string">&#x27;two&#x27;</span>])<br><span class="hljs-built_in">print</span>(df1)<br><span class="hljs-built_in">print</span>(df2)<br><span class="hljs-built_in">print</span>(df3)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#   5、 由字典组成的字典</span><br>data = &#123;<span class="hljs-string">&#x27;Jack&#x27;</span>:&#123;<span class="hljs-string">&#x27;math&#x27;</span>:<span class="hljs-number">99</span>,<span class="hljs-string">&#x27;english&#x27;</span>:<span class="hljs-number">90</span>,<span class="hljs-string">&#x27;art&#x27;</span>:<span class="hljs-number">93</span>&#125;,<br>       <span class="hljs-string">&#x27;Mary&#x27;</span>:&#123;<span class="hljs-string">&#x27;math&#x27;</span>:<span class="hljs-number">98</span>,<span class="hljs-string">&#x27;english&#x27;</span>:<span class="hljs-number">97</span>,<span class="hljs-string">&#x27;art&#x27;</span>:<span class="hljs-number">95</span>&#125;,<br>       <span class="hljs-string">&#x27;Tome&#x27;</span>:&#123;<span class="hljs-string">&#x27;math&#x27;</span>:<span class="hljs-number">66</span>,<span class="hljs-string">&#x27;english&#x27;</span>:<span class="hljs-number">78</span>,<span class="hljs-string">&#x27;art&#x27;</span>:<span class="hljs-number">90</span>&#125;,&#125;<br>df1 = pd.DataFrame(data)<br><span class="hljs-built_in">print</span>(df1)<br></code></pre></td></tr></table></figure><h3 id="数据结构DataFrame-索引"><a href="#数据结构DataFrame-索引" class="headerlink" title="数据结构DataFrame:索引"></a>数据结构DataFrame:索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#选择行与列</span><br><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">12</span>).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)*<span class="hljs-number">100</span>,<br>                 index = [<span class="hljs-string">&#x27;one&#x27;</span>,<span class="hljs-string">&#x27;two&#x27;</span>,<span class="hljs-string">&#x27;three&#x27;</span>],<br>                 columns = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br><span class="hljs-built_in">print</span>(df)<br><br>data1 = df[<span class="hljs-string">&#x27;a&#x27;</span>]<br>data2 = df[[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]]<br><span class="hljs-built_in">print</span>(data1,<span class="hljs-built_in">type</span>(data1))<br><span class="hljs-built_in">print</span>(data2,<span class="hljs-built_in">type</span>(data2))<br><br><br>data3 = df.loc[<span class="hljs-string">&#x27;one&#x27;</span>]<br>data4 = df.loc[[<span class="hljs-string">&#x27;one&#x27;</span>,<span class="hljs-string">&#x27;two&#x27;</span>]]     <span class="hljs-comment">#包含末端</span><br><span class="hljs-built_in">print</span>(data3,<span class="hljs-built_in">type</span>(data3))<br><span class="hljs-built_in">print</span>(data4,<span class="hljs-built_in">type</span>(data4))<br><br>data5 = df[:<span class="hljs-number">2</span>]     <span class="hljs-comment">#df[]中间如果是数字的话就默认为行</span><br><span class="hljs-built_in">print</span>(data5)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#.iloc[]---按照整数位置----行</span><br><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">16</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)*<span class="hljs-number">100</span>,<br>                 index = [<span class="hljs-string">&#x27;one&#x27;</span>,<span class="hljs-string">&#x27;two&#x27;</span>,<span class="hljs-string">&#x27;three&#x27;</span>,<span class="hljs-string">&#x27;four&#x27;</span>],<br>                 columns = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br><span class="hljs-built_in">print</span>(df)<br><br><span class="hljs-built_in">print</span>(df.iloc[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(df.iloc[-<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(df.iloc[<span class="hljs-number">0</span>,<span class="hljs-number">2</span>])<br><span class="hljs-built_in">print</span>(df.iloc[<span class="hljs-number">3</span>,<span class="hljs-number">2</span>])<br><span class="hljs-comment">#print(df.iloc[4])     -------不能超过最大长度，对多到达（length-1）</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#布尔型索引################</span><br><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">16</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)*<span class="hljs-number">100</span>,<br>                 index = [<span class="hljs-string">&#x27;one&#x27;</span>,<span class="hljs-string">&#x27;two&#x27;</span>,<span class="hljs-string">&#x27;three&#x27;</span>,<span class="hljs-string">&#x27;four&#x27;</span>],<br>                 columns = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br><br><span class="hljs-built_in">print</span>(df)<br><br>b1 = df&lt;<span class="hljs-number">20</span><br><span class="hljs-built_in">print</span>(b1,<span class="hljs-built_in">type</span>(b1))<br><span class="hljs-built_in">print</span>(df[b1])      <span class="hljs-comment">#保留正确的值</span><br><br>b2 = df.loc[[<span class="hljs-string">&#x27;one&#x27;</span>,<span class="hljs-string">&#x27;three&#x27;</span>]]&lt;<span class="hljs-number">50</span><br><span class="hljs-built_in">print</span>(b2,<span class="hljs-built_in">type</span>(b2))<br><span class="hljs-built_in">print</span>(df[b2])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#   同时索引行和列</span><br><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">16</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)*<span class="hljs-number">100</span>,<br>                 index = [<span class="hljs-string">&#x27;one&#x27;</span>,<span class="hljs-string">&#x27;two&#x27;</span>,<span class="hljs-string">&#x27;three&#x27;</span>,<span class="hljs-string">&#x27;four&#x27;</span>],<br>                 columns = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br><span class="hljs-built_in">print</span>(df)<br><br><span class="hljs-built_in">print</span>(df[<span class="hljs-string">&#x27;a&#x27;</span>].loc[[<span class="hljs-string">&#x27;three&#x27;</span>,<span class="hljs-string">&#x27;four&#x27;</span>]])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(df[[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>]].iloc[::<span class="hljs-number">2</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----&#x27;</span>)<br><span class="hljs-built_in">print</span>(df[df&lt;<span class="hljs-number">50</span>].loc[[<span class="hljs-string">&#x27;one&#x27;</span>,<span class="hljs-string">&#x27;two&#x27;</span>]])<br></code></pre></td></tr></table></figure><h3 id="数据结构DataFrame：-基本技巧"><a href="#数据结构DataFrame：-基本技巧" class="headerlink" title="数据结构DataFrame： 基本技巧"></a>数据结构DataFrame： 基本技巧</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#数据查看转置</span><br><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">16</span>).reshape(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>)*<span class="hljs-number">100</span>)<br><span class="hljs-built_in">print</span>(df)<br><span class="hljs-built_in">print</span>(df.head(<span class="hljs-number">3</span>))  <span class="hljs-comment">#查看头部数据</span><br><span class="hljs-built_in">print</span>(df.tail(<span class="hljs-number">1</span>))  <span class="hljs-comment">#查看尾部数据</span><br><br><span class="hljs-built_in">print</span>(df.T)   <span class="hljs-comment">#转置</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#添加与修改</span><br><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">16</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)*<span class="hljs-number">100</span>,<br>                 columns = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br><span class="hljs-built_in">print</span>(df)<br><br>df[<span class="hljs-string">&#x27;e&#x27;</span>] = <span class="hljs-number">10</span><br>df.loc[<span class="hljs-number">4</span>] = <span class="hljs-number">20</span><br><span class="hljs-built_in">print</span>(df)<br><br>df[<span class="hljs-string">&#x27;e&#x27;</span>] = <span class="hljs-number">20</span><br>df[[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]] = <span class="hljs-number">100</span><br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#删除  del  /drop()</span><br><br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">16</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)*<span class="hljs-number">100</span>,<br>                 columns = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br><span class="hljs-built_in">print</span>(df)<br><br><span class="hljs-keyword">del</span> df[<span class="hljs-string">&#x27;a&#x27;</span>]    <span class="hljs-comment">#原数据改变</span><br><span class="hljs-built_in">print</span>(df)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(df.drop(<span class="hljs-number">0</span>))<br><span class="hljs-built_in">print</span>(df.drop([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]))<br><span class="hljs-built_in">print</span>(df)          <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(df.drop([<span class="hljs-string">&#x27;d&#x27;</span>],axis = <span class="hljs-number">1</span>))    <span class="hljs-comment">#原数据不改变##########</span><br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#   对齐</span><br>df1 = pd.DataFrame(np.random.rand(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>),columns = [<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>])<br>df2 = pd.DataFrame(np.random.rand(<span class="hljs-number">7</span>,<span class="hljs-number">3</span>),columns = [<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>])<br><br><span class="hljs-built_in">print</span>(df1)<br><span class="hljs-built_in">print</span>(df2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----&#x27;</span>)<br><span class="hljs-built_in">print</span>(df1+df2)   <span class="hljs-comment">#对应数据对齐相加</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#排序1 - 按值排序 .sort_values</span><br><br>df1 = pd.DataFrame(np.random.rand(<span class="hljs-number">16</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)*<span class="hljs-number">100</span>,<br>                 columns = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br><span class="hljs-built_in">print</span>(df1)<br><span class="hljs-built_in">print</span>(df1.sort_values([<span class="hljs-string">&#x27;a&#x27;</span>],ascending = <span class="hljs-literal">True</span>))    <span class="hljs-comment">#升序</span><br><span class="hljs-built_in">print</span>(df1.sort_values([<span class="hljs-string">&#x27;a&#x27;</span>],ascending = <span class="hljs-literal">False</span>))   <span class="hljs-comment">#降序</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br><br>df2 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;a&#x27;</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>],<br>                   <span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>)),<br>                   <span class="hljs-string">&#x27;c&#x27;</span>:<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>))&#125;)<br><span class="hljs-built_in">print</span>(df2)<br><span class="hljs-built_in">print</span>(df2.sort_values([<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  排序2 - 索引排序 .sort_index</span><br>df1 = pd.DataFrame(np.random.rand(<span class="hljs-number">16</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)*<span class="hljs-number">100</span>,<br>                 index = [<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>],<br>                  columns = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br>df2 = pd.DataFrame(np.random.rand(<span class="hljs-number">16</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)*<span class="hljs-number">100</span>,<br>                 index = [<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>],<br>                  columns = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br><span class="hljs-built_in">print</span>(df1)<br><span class="hljs-built_in">print</span>(df1.sort_index())<br><span class="hljs-built_in">print</span>(df2)<br><span class="hljs-built_in">print</span>(df2.sort_index())<br></code></pre></td></tr></table></figure><h3 id="时间模块"><a href="#时间模块" class="headerlink" title="时间模块"></a>时间模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#   datetime.date:  data对象</span><br><br><span class="hljs-keyword">import</span> datetime<br><br>today = datetime.date.today()  <span class="hljs-comment">#返回今日</span><br><span class="hljs-built_in">print</span>(today,<span class="hljs-built_in">type</span>(today))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(today),<span class="hljs-built_in">type</span>(<span class="hljs-built_in">str</span>(today)))<br><br>t = datetime.date(<span class="hljs-number">2016</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>)   <span class="hljs-comment">#直接得到当时日期</span><br><span class="hljs-built_in">print</span>(t)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#   datetime.datetime:  datetime对象</span><br><br>now = datetime.datetime.now()<br><span class="hljs-built_in">print</span>(now,<span class="hljs-built_in">type</span>(now))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(now),<span class="hljs-built_in">type</span>(<span class="hljs-built_in">str</span>(now)))    <span class="hljs-comment">#转化为字符串</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  datetime.date.timedelta时间差</span><br><br>t1 = datetime.datetime(<span class="hljs-number">2000</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>)<br>tx = datetime.timedelta(<span class="hljs-number">100</span>,<span class="hljs-number">3600</span>)  <span class="hljs-comment">#3600是秒</span><br><span class="hljs-built_in">print</span>(t1+tx)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  字符串转换方法 parser.parse</span><br><br><span class="hljs-keyword">from</span> dateutil.parser <span class="hljs-keyword">import</span> parse<br><br>data = <span class="hljs-string">&#x27;2/27/2021&#x27;</span><br>data1 = <span class="hljs-string">&#x27;27/2/2021&#x27;</span><br><span class="hljs-built_in">print</span>(parse(data),<span class="hljs-built_in">type</span>(parse(data)))<br><span class="hljs-built_in">print</span>(parse(data1))<br></code></pre></td></tr></table></figure><h3 id="时刻数据"><a href="#时刻数据" class="headerlink" title="时刻数据"></a>时刻数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#pd.Timestamp() -----单个数据</span><br><br>date1 = datetime.datetime(<span class="hljs-number">2021</span>,<span class="hljs-number">2</span>,<span class="hljs-number">27</span>,<span class="hljs-number">12</span>,<span class="hljs-number">45</span>,<span class="hljs-number">30</span>)<br>date2 = <span class="hljs-string">&#x27;2021-2-27&#x27;</span>   <span class="hljs-comment">#创建一个字符串</span><br>t1 = pd.Timestamp(date1)<br>t2 = pd.Timestamp(date2)<br><span class="hljs-built_in">print</span>(t1,<span class="hljs-built_in">type</span>(t1))<br><span class="hljs-built_in">print</span>(t2)<br><span class="hljs-built_in">print</span>(pd.Timestamp(<span class="hljs-string">&#x27;2021-2-27 12:45:30&#x27;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#pd.to_datetime-------大量的时间字符串</span><br><br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br>date1 = datetime(<span class="hljs-number">2021</span>,<span class="hljs-number">2</span>,<span class="hljs-number">27</span>,<span class="hljs-number">12</span>,<span class="hljs-number">45</span>,<span class="hljs-number">30</span>)<br>date2 = <span class="hljs-string">&#x27;2021-2-27&#x27;</span><br>t1 = pd.to_datetime(date1)<br>t2 = pd.to_datetime(date1)<br><br><span class="hljs-built_in">print</span>(t1)<br><span class="hljs-built_in">print</span>(t2)<br><br>lst_date = [<span class="hljs-string">&#x27;2021-2-12&#x27;</span>,<span class="hljs-string">&#x27;2021-4-6&#x27;</span>,<span class="hljs-string">&#x27;2021-6-6&#x27;</span>]    <span class="hljs-comment">#可以是多个数据</span><br>t3 = pd.to_datetime(lst_date)<br><span class="hljs-built_in">print</span>(t3,<span class="hljs-built_in">type</span>(t3))<br><br>date3 = [<span class="hljs-string">&#x27;2021-2-12&#x27;</span>,<span class="hljs-string">&#x27;2021-4-6&#x27;</span>,<span class="hljs-string">&#x27;2021-6-6&#x27;</span>,<span class="hljs-string">&#x27;hahahah&#x27;</span>]<br><span class="hljs-built_in">print</span>(pd.to_datetime(date3,errors=<span class="hljs-string">&#x27;ignore&#x27;</span>),<span class="hljs-built_in">type</span>(pd.to_datetime(date3,errors=<span class="hljs-string">&#x27;ignore&#x27;</span>)))<br><span class="hljs-built_in">print</span>(pd.to_datetime(date3,errors=<span class="hljs-string">&#x27;coerce&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="时间戳索引"><a href="#时间戳索引" class="headerlink" title="时间戳索引"></a>时间戳索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># pd.DatetimeIndex()与TimeSeries时间序列</span><br><br>rng = pd.DatetimeIndex([<span class="hljs-string">&#x27;12/1/2017&#x27;</span>,<span class="hljs-string">&#x27;12/2/2017&#x27;</span>,<span class="hljs-string">&#x27;12/3/2017&#x27;</span>,<span class="hljs-string">&#x27;12/4/2017&#x27;</span>,<span class="hljs-string">&#x27;12/5/2017&#x27;</span>])<br><span class="hljs-built_in">print</span>(rng,<span class="hljs-built_in">type</span>(rng))<br><span class="hljs-built_in">print</span>(rng[<span class="hljs-number">0</span>],<span class="hljs-built_in">type</span>(rng[<span class="hljs-number">0</span>]))<br><br>st = pd.Series(np.random.rand(<span class="hljs-built_in">len</span>(rng)),index = rng)<br><span class="hljs-built_in">print</span>(st,<span class="hljs-built_in">type</span>(st))<br><span class="hljs-built_in">print</span>(st.index)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># pd.date_range()-日期范围：生成日期范围</span><br><span class="hljs-comment">#  1、start + end     2、start/end + periods</span><br><span class="hljs-comment">#默认频率是  天</span><br><br>rng1 = pd.date_range(<span class="hljs-string">&#x27;1/1/2017&#x27;</span>,<span class="hljs-string">&#x27;1/10/2017&#x27;</span>,normalize = <span class="hljs-literal">True</span>)<br>rng2 = pd.date_range(start = <span class="hljs-string">&#x27;1/2/2017&#x27;</span>,periods = <span class="hljs-number">10</span>)<br>rng3 = pd.date_range(end = <span class="hljs-string">&#x27;1/30/2017 15:00:00&#x27;</span>,periods = <span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(rng1,<span class="hljs-built_in">type</span>(rng1))<br><span class="hljs-built_in">print</span>(rng2,<span class="hljs-built_in">type</span>(rng2))<br><span class="hljs-built_in">print</span>(rng3,<span class="hljs-built_in">type</span>(rng3))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----&#x27;</span>)<br><br>rng4 = pd.date_range(start = <span class="hljs-string">&#x27;1/1/2017 15:30&#x27;</span>,periods = <span class="hljs-number">10</span>,name = <span class="hljs-string">&#x27;hello world&#x27;</span>,normalize = <span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(rng4)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(pd.date_range(<span class="hljs-string">&#x27;1/1/2017&#x27;</span>,<span class="hljs-string">&#x27;1/10/2017&#x27;</span>))<br><span class="hljs-built_in">print</span>(pd.date_range(<span class="hljs-string">&#x27;1/1/2017&#x27;</span>,<span class="hljs-string">&#x27;1/10/2017&#x27;</span>,closed = <span class="hljs-string">&#x27;right&#x27;</span>))<br><span class="hljs-built_in">print</span>(pd.date_range(<span class="hljs-string">&#x27;1/1/2017&#x27;</span>,<span class="hljs-string">&#x27;1/10/2017&#x27;</span>,closed = <span class="hljs-string">&#x27;left&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(pd.bdate_range(<span class="hljs-string">&#x27;20210101&#x27;</span>,<span class="hljs-string">&#x27;20210107&#x27;</span>))  <span class="hljs-comment">#默认频率是工作日</span><br><br><span class="hljs-built_in">print</span>(pd.date_range(start = <span class="hljs-string">&#x27;1/10/2017&#x27;</span>,periods = <span class="hljs-number">10</span>))   <span class="hljs-comment">#直接转化为list</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># pd.date_range()-日期范围：生成日期范围--频率（）</span><br><span class="hljs-keyword">import</span> pandas  <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy  <span class="hljs-keyword">as</span> np<br><br><span class="hljs-built_in">print</span>(pd.date_range(<span class="hljs-string">&#x27;1/1/2017&#x27;</span>,<span class="hljs-string">&#x27;1/10/2017&#x27;</span>))     <span class="hljs-comment">#日历日</span><br><span class="hljs-built_in">print</span>(pd.date_range(<span class="hljs-string">&#x27;1/1/2017&#x27;</span>,<span class="hljs-string">&#x27;1/10/2017&#x27;</span>,freq = <span class="hljs-string">&#x27;B&#x27;</span>))  <span class="hljs-comment">#工作日</span><br><span class="hljs-built_in">print</span>(pd.date_range(<span class="hljs-string">&#x27;1/1/2017&#x27;</span>,<span class="hljs-string">&#x27;1/10/2017&#x27;</span>,freq = <span class="hljs-string">&#x27;H&#x27;</span>))   <span class="hljs-comment">#每小时</span><br><span class="hljs-built_in">print</span>(pd.date_range(<span class="hljs-string">&#x27;1/1/2017 12:00&#x27;</span>,<span class="hljs-string">&#x27;1/1/2017 12:10&#x27;</span>,freq = <span class="hljs-string">&#x27;T&#x27;</span>))   <span class="hljs-comment">#每分</span><br><span class="hljs-built_in">print</span>(pd.date_range(<span class="hljs-string">&#x27;1/1/2017 12:00:00&#x27;</span>,<span class="hljs-string">&#x27;1/1/2017 12:10:10&#x27;</span>,freq = <span class="hljs-string">&#x27;S&#x27;</span>))  <span class="hljs-comment">#每秒</span><br><span class="hljs-built_in">print</span>(pd.date_range(<span class="hljs-string">&#x27;1/1/2017 12:00:00&#x27;</span>,<span class="hljs-string">&#x27;1/1/2017 12:10:10&#x27;</span>,freq = <span class="hljs-string">&#x27;L&#x27;</span>))  <span class="hljs-comment">#每毫秒</span><br><span class="hljs-built_in">print</span>(pd.date_range(<span class="hljs-string">&#x27;1/1/2017 12:00:00&#x27;</span>,<span class="hljs-string">&#x27;1/1/2017 12:10:10&#x27;</span>,freq = <span class="hljs-string">&#x27;U&#x27;</span>))  <span class="hljs-comment">#每微秒</span><br><br><span class="hljs-built_in">print</span>(pd.date_range(<span class="hljs-string">&#x27;1/1/2017 12:00&#x27;</span>,<span class="hljs-string">&#x27;1/10/2017 12:10&#x27;</span>,freq = <span class="hljs-string">&#x27;W-MON&#x27;</span>))  <span class="hljs-comment">#指定每周星期几开始</span><br><br><span class="hljs-built_in">print</span>(pd.date_range(<span class="hljs-string">&#x27;1/1/2017 12:00&#x27;</span>,<span class="hljs-string">&#x27;1/10/2017 12:10&#x27;</span>,freq = <span class="hljs-string">&#x27;WOM-2MON&#x27;</span>))  <span class="hljs-comment">#每月的第几个星期几开始</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">## pd.date_range()-日期范围：复合频率</span><br><br><span class="hljs-built_in">print</span>(pd.date_range(<span class="hljs-string">&#x27;1/1/2017&#x27;</span>,<span class="hljs-string">&#x27;2/1/2017&#x27;</span>,freq = <span class="hljs-string">&#x27;7D&#x27;</span>))  <span class="hljs-comment">#7天</span><br><span class="hljs-built_in">print</span>(pd.date_range(<span class="hljs-string">&#x27;1/1/2017&#x27;</span>,<span class="hljs-string">&#x27;1/2/2017&#x27;</span>,freq = <span class="hljs-string">&#x27;2h30min&#x27;</span>))<br><span class="hljs-built_in">print</span>(pd.date_range(<span class="hljs-string">&#x27;2017&#x27;</span>,<span class="hljs-string">&#x27;2018&#x27;</span>,freq = <span class="hljs-string">&#x27;2M&#x27;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  时期频率转换；asfreq</span><br><br>ts = pd.Series(np.random.rand(<span class="hljs-number">4</span>),<br>              index = pd.date_range(<span class="hljs-string">&#x27;20170101&#x27;</span>,<span class="hljs-string">&#x27;20170104&#x27;</span>))<br><span class="hljs-built_in">print</span>(ts)<br><span class="hljs-built_in">print</span>(ts.asfreq(<span class="hljs-string">&#x27;4H&#x27;</span>,method = <span class="hljs-string">&#x27;ffill&#x27;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  超前和滞后</span><br><br>ts = pd.Series(np.random.rand(<span class="hljs-number">4</span>),<br>              index = pd.date_range(<span class="hljs-string">&#x27;20170101&#x27;</span>,<span class="hljs-string">&#x27;20170104&#x27;</span>))<br><span class="hljs-built_in">print</span>(ts)<br><br><span class="hljs-built_in">print</span>(ts.shift(<span class="hljs-number">2</span>))  <span class="hljs-comment">#数值后移</span><br><span class="hljs-built_in">print</span>(ts.shift(-<span class="hljs-number">2</span>))  <span class="hljs-comment">#数值前移</span><br><br>per = ts/ts.shift(<span class="hljs-number">1</span>) - <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(per)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(ts.shift(<span class="hljs-number">2</span>,freq = <span class="hljs-string">&#x27;D&#x27;</span>))<br><span class="hljs-built_in">print</span>(ts.shift(<span class="hljs-number">2</span>,freq = <span class="hljs-string">&#x27;T&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="时期"><a href="#时期" class="headerlink" title="时期"></a>时期</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># pd.Period()创建时期</span><br><br>p = pd.Period(<span class="hljs-string">&#x27;2017&#x27;</span>,freq = <span class="hljs-string">&#x27;M&#x27;</span>)<br><span class="hljs-built_in">print</span>(p,<span class="hljs-built_in">type</span>(p))<br><br><span class="hljs-built_in">print</span>(p + <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(p - <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(pd.Period(<span class="hljs-string">&#x27;2012&#x27;</span>,freq = <span class="hljs-string">&#x27;A-DEC&#x27;</span>)-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">p =  pd.period_range(<span class="hljs-string">&#x27;1/1/2021&#x27;</span>,<span class="hljs-string">&#x27;1/1/2022&#x27;</span>,freq = <span class="hljs-string">&#x27;M&#x27;</span>)<br>q =  pd.date_range(<span class="hljs-string">&#x27;1/1/2021&#x27;</span>,<span class="hljs-string">&#x27;1/1/2022&#x27;</span>,freq = <span class="hljs-string">&#x27;M&#x27;</span>)<br><br>ts1 = pd.Series(np.random.rand(<span class="hljs-built_in">len</span>(p)),<br>               index = p)<br>ts2 = pd.Series(np.random.rand(<span class="hljs-built_in">len</span>(q)),<br>               index = q)<br><span class="hljs-built_in">print</span>(ts1.index)<br><span class="hljs-built_in">print</span>(ts2.index)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  asfreq: 频率转换</span><br><br>p = pd.Period(<span class="hljs-string">&#x27;2020&#x27;</span>,<span class="hljs-string">&#x27;A-DEC&#x27;</span>)<br><span class="hljs-built_in">print</span>(p)<br><span class="hljs-built_in">print</span>(p.asfreq(<span class="hljs-string">&#x27;M&#x27;</span>,how = <span class="hljs-string">&#x27;start&#x27;</span>))<br><span class="hljs-built_in">print</span>(p.asfreq(<span class="hljs-string">&#x27;D&#x27;</span>,how = <span class="hljs-string">&#x27;end&#x27;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#时间戳用于时期之间的转换： pd.to_Period()\pd.to_timestamp()</span><br><br>p =  pd.date_range(<span class="hljs-string">&#x27;1/1/2021&#x27;</span>,periods = <span class="hljs-number">10</span>,freq = <span class="hljs-string">&#x27;M&#x27;</span>)<br>q =  pd.period_range(<span class="hljs-string">&#x27;2021&#x27;</span>,<span class="hljs-string">&#x27;2022&#x27;</span>,freq = <span class="hljs-string">&#x27;M&#x27;</span>)<br><br>ts1 = pd.Series(np.random.rand(<span class="hljs-built_in">len</span>(p)),<br>               index = p)<br><span class="hljs-built_in">print</span>(ts1.head())<br><span class="hljs-built_in">print</span>(ts1.to_period().head())<br><span class="hljs-comment">#每月最后一日转化为每月</span><br>ts2 = pd.Series(np.random.rand(<span class="hljs-built_in">len</span>(q)),<br>               index = q)<br><span class="hljs-built_in">print</span>(ts2.head())<br><span class="hljs-built_in">print</span>(ts2.to_timestamp().head())<br><span class="hljs-comment">#每月，转化为每月第一天</span><br></code></pre></td></tr></table></figure><h3 id="时间序列-索引及切片"><a href="#时间序列-索引及切片" class="headerlink" title="时间序列 - 索引及切片"></a>时间序列 - 索引及切片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  索引</span><br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br>p =  pd.date_range(<span class="hljs-string">&#x27;1/2021&#x27;</span>,<span class="hljs-string">&#x27;3/2021&#x27;</span>)<br>ts =  pd.Series(np.random.rand(<span class="hljs-built_in">len</span>(p)),index = p)<br><span class="hljs-built_in">print</span>(ts.head())<br><br><span class="hljs-built_in">print</span>(ts[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(ts[:<span class="hljs-number">2</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br><span class="hljs-built_in">print</span>(ts[<span class="hljs-string">&#x27;2021/2/28&#x27;</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 切片</span><br><br><span class="hljs-built_in">print</span>(ts.head())<br><span class="hljs-comment">#print(ts[::2])</span><br><span class="hljs-built_in">print</span>(ts[<span class="hljs-string">&#x27;20210101&#x27;</span>:<span class="hljs-string">&#x27;20210111&#x27;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(ts[<span class="hljs-string">&#x27;2021/01&#x27;</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#重复索引的时间序列</span><br><br>dates = pd.DatetimeIndex([<span class="hljs-string">&#x27;1/2/2015&#x27;</span>,<span class="hljs-string">&#x27;1/3/2015&#x27;</span>,<span class="hljs-string">&#x27;1/2/2015&#x27;</span>,<span class="hljs-string">&#x27;2/4/2015&#x27;</span>,<span class="hljs-string">&#x27;1/3/2015&#x27;</span>])<br>ts = pd.Series(np.random.rand(<span class="hljs-number">5</span>),index = dates)<br><br><span class="hljs-built_in">print</span>(ts)<br><span class="hljs-built_in">print</span>(ts.is_unique,ts.is_unique)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(ts.groupby(level=<span class="hljs-number">0</span>).mean())   <span class="hljs-comment">#合在一起求平均值</span><br></code></pre></td></tr></table></figure><h3 id="时间序列-重采样"><a href="#时间序列-重采样" class="headerlink" title="时间序列 - 重采样"></a>时间序列 - 重采样</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#重采样：  resample()</span><br><br>p =  pd.date_range(<span class="hljs-string">&#x27;1/2021&#x27;</span>,periods = <span class="hljs-number">12</span>)<br>ts =  pd.Series(np.arange(<span class="hljs-number">12</span>),index = p)<br><span class="hljs-built_in">print</span>(ts)<br><br>ts_re = ts.resample(<span class="hljs-string">&#x27;5D&#x27;</span>)<br>ts_re2 = ts.resample(<span class="hljs-string">&#x27;5D&#x27;</span>).<span class="hljs-built_in">sum</span>()<br><span class="hljs-built_in">print</span>(ts_re,<span class="hljs-built_in">type</span>(ts_re))<br><span class="hljs-built_in">print</span>(ts_re2,<span class="hljs-built_in">type</span>(ts_re2))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;5D&#x27;</span>).mean())   <br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;5D&#x27;</span>).<span class="hljs-built_in">max</span>())<br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;5D&#x27;</span>).<span class="hljs-built_in">min</span>())<br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;5D&#x27;</span>).median())<br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;5D&#x27;</span>).first())<br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;5D&#x27;</span>).last())<br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;5D&#x27;</span>).ohlc())  <span class="hljs-comment">#OHLC重采样</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#降采样   #33#########</span><br><br>p =  pd.date_range(<span class="hljs-string">&#x27;1/21/2021&#x27;</span>,periods = <span class="hljs-number">12</span>)<br>ts =  pd.Series(np.arange(<span class="hljs-number">1</span>,<span class="hljs-number">13</span>),index = p)<br><span class="hljs-built_in">print</span>(ts)<br><br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;5D&#x27;</span>).<span class="hljs-built_in">sum</span>(),<span class="hljs-string">&#x27;→ 默认\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;5D&#x27;</span>,closed = <span class="hljs-string">&#x27;left&#x27;</span>).<span class="hljs-built_in">sum</span>(),<span class="hljs-string">&#x27;→ left\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;5D&#x27;</span>,closed = <span class="hljs-string">&#x27;right&#x27;</span>).<span class="hljs-built_in">sum</span>(),<span class="hljs-string">&#x27;→ right\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;5D&#x27;</span>,label = <span class="hljs-string">&#x27;left&#x27;</span>).<span class="hljs-built_in">sum</span>(),<span class="hljs-string">&#x27;→ leftlabel\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;5D&#x27;</span>,label = <span class="hljs-string">&#x27;right&#x27;</span>).<span class="hljs-built_in">sum</span>(),<span class="hljs-string">&#x27;→ rightlabel\n&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#升采样及插值</span><br><br><span class="hljs-keyword">import</span> pandas  <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy  <span class="hljs-keyword">as</span> np<br>p =  pd.date_range(<span class="hljs-string">&#x27;1/1/2021 0:0:0&#x27;</span>,periods = <span class="hljs-number">5</span>,freq = <span class="hljs-string">&#x27;H&#x27;</span>)<br>ts =  pd.DataFrame(np.arange(<span class="hljs-number">15</span>).reshape(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>),index = p,columns = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>])<br><span class="hljs-built_in">print</span>(ts)<br><br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;15T&#x27;</span>).asfreq())<br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;15T&#x27;</span>).ffill())<br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;15T&#x27;</span>).bfill())<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  时期重采样 - Period</span><br><br>p =  pd.date_range(<span class="hljs-string">&#x27;2021&#x27;</span>,<span class="hljs-string">&#x27;2022&#x27;</span>,freq = <span class="hljs-string">&#x27;M&#x27;</span>)<br>ts =  pd.Series(np.arange(<span class="hljs-built_in">len</span>(p)),index = p)<br><span class="hljs-built_in">print</span>(ts)<br><br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;3M&#x27;</span>).<span class="hljs-built_in">sum</span>())<br><span class="hljs-built_in">print</span>(ts.resample(<span class="hljs-string">&#x27;15D&#x27;</span>).ffill())<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python+机器学习+数据分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据分析常见五种算法</title>
    <link href="/2022/07/15/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%AE%97%E6%B3%95/"/>
    <url>/2022/07/15/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="一、KNN最邻近分类理论概念"><a href="#一、KNN最邻近分类理论概念" class="headerlink" title="一、KNN最邻近分类理论概念"></a>一、KNN最邻近分类理论概念</h3><h5 id="预测属于哪一种类型"><a href="#预测属于哪一种类型" class="headerlink" title="#  预测属于哪一种类型"></a>#  预测属于哪一种类型</h5><h5 id="接近k的邻居，就可以归为这一类"><a href="#接近k的邻居，就可以归为这一类" class="headerlink" title="#  接近k的邻居，就可以归为这一类"></a>#  接近k的邻居，就可以归为这一类</h5><h5 id="更偏向于哪一个"><a href="#更偏向于哪一个" class="headerlink" title="#  更偏向于哪一个"></a>#  更偏向于哪一个</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> stats<br>%matplotlib inline<br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LinearRegression<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> neighbors  <span class="hljs-comment">#  导入KNN分类模块</span><br><span class="hljs-keyword">import</span> warnings<br>warnings.filterwarnings(<span class="hljs-string">&#x27;ignore&#x27;</span>)<br><span class="hljs-comment">#  不发出警告</span><br><br>data = pd.DataFrame(&#123; <span class="hljs-string">&#x27;fight&#x27;</span>:[<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">101</span>,<span class="hljs-number">99</span>,<span class="hljs-number">98</span>],<br>                    <span class="hljs-string">&#x27;kiss&#x27;</span>:[<span class="hljs-number">104</span>,<span class="hljs-number">100</span>,<span class="hljs-number">81</span>,<span class="hljs-number">10</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>],<br>                    <span class="hljs-string">&#x27;type&#x27;</span>:[<span class="hljs-string">&#x27;R&#x27;</span>,<span class="hljs-string">&#x27;R&#x27;</span>,<span class="hljs-string">&#x27;R&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>],<br>                    <span class="hljs-string">&#x27;name&#x27;</span>:[<span class="hljs-string">&#x27;北京遇上西雅图&#x27;</span>,<span class="hljs-string">&#x27;喜欢你&#x27;</span>,<span class="hljs-string">&#x27;疯狂动物城&#x27;</span>,<span class="hljs-string">&#x27;战狼2&#x27;</span>,<span class="hljs-string">&#x27;力王&#x27;</span>,<span class="hljs-string">&#x27;敢死队&#x27;</span>]&#125;)<br><span class="hljs-built_in">print</span>(data)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br><span class="hljs-comment">#  创建数据</span><br><br>plt.scatter(data[data[<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;R&#x27;</span>][<span class="hljs-string">&#x27;fight&#x27;</span>],data[data[<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;R&#x27;</span>][<span class="hljs-string">&#x27;kiss&#x27;</span>],color = <span class="hljs-string">&#x27;r&#x27;</span>,marker = <span class="hljs-string">&#x27;o&#x27;</span>,label = <span class="hljs-string">&#x27;R&#x27;</span>)<br>plt.scatter(data[data[<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;A&#x27;</span>][<span class="hljs-string">&#x27;fight&#x27;</span>],data[data[<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;A&#x27;</span>][<span class="hljs-string">&#x27;kiss&#x27;</span>],color = <span class="hljs-string">&#x27;r&#x27;</span>,marker = <span class="hljs-string">&#x27;o&#x27;</span>,label = <span class="hljs-string">&#x27;A&#x27;</span>)<br>plt.grid()<br>plt.legend()<br><br>knn = neighbors.KNeighborsClassifier()<br>knn.fit(data[[<span class="hljs-string">&#x27;fight&#x27;</span>,<span class="hljs-string">&#x27;kiss&#x27;</span>]],data[<span class="hljs-string">&#x27;type&#x27;</span>])<br><br>knn.predict([<span class="hljs-number">18</span>,<span class="hljs-number">90</span>])<br>plt.scatter(<span class="hljs-number">18</span>,<span class="hljs-number">90</span>,color = <span class="hljs-string">&#x27;r&#x27;</span>,marker=<span class="hljs-string">&#x27;x&#x27;</span>,label = <span class="hljs-string">&#x27;R&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;kiss&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;fight&#x27;</span>)<br>plt.text(<span class="hljs-number">18</span>,<span class="hljs-number">90</span>,<span class="hljs-string">&#x27;《你的名字》&#x27;</span>,color=<span class="hljs-string">&#x27;r&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">data2 = pd.DataFrame(np.random.rand(<span class="hljs-number">100</span>,<span class="hljs-number">2</span>)*<span class="hljs-number">50</span>,columns = [<span class="hljs-string">&#x27;fight&#x27;</span>,<span class="hljs-string">&#x27;kiss&#x27;</span>])<br>data2[<span class="hljs-string">&#x27;typetest&#x27;</span>] = knn.predict(data2)<br><br>plt.scatter(data[data[<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;R&#x27;</span>][<span class="hljs-string">&#x27;fight&#x27;</span>],data[data[<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;R&#x27;</span>][<span class="hljs-string">&#x27;kiss&#x27;</span>],color = <span class="hljs-string">&#x27;r&#x27;</span>,marker = <span class="hljs-string">&#x27;o&#x27;</span>,label = <span class="hljs-string">&#x27;R&#x27;</span>)<br>plt.scatter(data[data[<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;A&#x27;</span>][<span class="hljs-string">&#x27;fight&#x27;</span>],data[data[<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;A&#x27;</span>][<span class="hljs-string">&#x27;kiss&#x27;</span>],color = <span class="hljs-string">&#x27;r&#x27;</span>,marker = <span class="hljs-string">&#x27;o&#x27;</span>,label = <span class="hljs-string">&#x27;A&#x27;</span>)<br>plt.grid()<br>plt.legend()<br>plt.scatter(data2[data2[<span class="hljs-string">&#x27;typetest&#x27;</span>] == <span class="hljs-string">&#x27;R&#x27;</span>][<span class="hljs-string">&#x27;fight&#x27;</span>],data2[data2[<span class="hljs-string">&#x27;typetest&#x27;</span>] == <span class="hljs-string">&#x27;R&#x27;</span>][<span class="hljs-string">&#x27;kiss&#x27;</span>],color = <span class="hljs-string">&#x27;r&#x27;</span>,marker = <span class="hljs-string">&#x27;x&#x27;</span>,label = <span class="hljs-string">&#x27;R&#x27;</span>)<br>plt.scatter(data2[data2[<span class="hljs-string">&#x27;typetest&#x27;</span>] == <span class="hljs-string">&#x27;A&#x27;</span>][<span class="hljs-string">&#x27;fight&#x27;</span>],data2[data2[<span class="hljs-string">&#x27;typetest&#x27;</span>] == <span class="hljs-string">&#x27;A&#x27;</span>][<span class="hljs-string">&#x27;kiss&#x27;</span>],color = <span class="hljs-string">&#x27;g&#x27;</span>,marker = <span class="hljs-string">&#x27;x&#x27;</span>,label = <span class="hljs-string">&#x27;A&#x27;</span>)<br><br>data2.head()<br></code></pre></td></tr></table></figure><h3 id="二、K均值算法逻辑"><a href="#二、K均值算法逻辑" class="headerlink" title="二、K均值算法逻辑"></a>二、K均值算法逻辑</h3><h5 id="1、-随机生k个初始点作为质心"><a href="#1、-随机生k个初始点作为质心" class="headerlink" title="#  1、 随机生k个初始点作为质心"></a>#  1、 随机生k个初始点作为质心</h5><h5 id="2、-将数据集中的数据按照距离质心的远近分到各个簇中"><a href="#2、-将数据集中的数据按照距离质心的远近分到各个簇中" class="headerlink" title="#  2、 将数据集中的数据按照距离质心的远近分到各个簇中"></a>#  2、 将数据集中的数据按照距离质心的远近分到各个簇中</h5><h5 id="3、-将各个簇中的数据求平均值，作为新的质心，重复上一步，直到所有的簇不再改变"><a href="#3、-将各个簇中的数据求平均值，作为新的质心，重复上一步，直到所有的簇不再改变" class="headerlink" title="#  3、 将各个簇中的数据求平均值，作为新的质心，重复上一步，直到所有的簇不再改变"></a>#  3、 将各个簇中的数据求平均值，作为新的质心，重复上一步，直到所有的簇不再改变</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> stats<br>%matplotlib inline<br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LinearRegression<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.datasets.samples_generator <span class="hljs-keyword">import</span> make_blobs<br><span class="hljs-comment">#  make_blobs聚类数据生成器</span><br><br>x,y_true = make_blobs(n_samples =<span class="hljs-number">300</span>,    <span class="hljs-comment">#生成300条数据</span><br>                     centers = <span class="hljs-number">4</span>,         <span class="hljs-comment">#  四类数据</span><br>                     cluster_std = <span class="hljs-number">0.5</span>,    <span class="hljs-comment">#  方差一致</span><br>                     random_state =<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(x[:<span class="hljs-number">5</span>])<br><span class="hljs-built_in">print</span>(y_true[:<span class="hljs-number">5</span>])<br><span class="hljs-comment">#  x（生成数据值）     y（生成数据值对应的类别标签）</span><br><br>plt.scatter(x[:,<span class="hljs-number">0</span>],x[:,<span class="hljs-number">1</span>],s = <span class="hljs-number">10</span>,alpha= <span class="hljs-number">0.8</span>)<br>plt.grid()<br><span class="hljs-comment">#  绘制图表</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.cluster <span class="hljs-keyword">import</span> KMeans<br>kmeans = KMeans(n_clusters=<span class="hljs-number">4</span>)<br>kmeans.fit(x)<br>y_kmeans = kmeans.predict(x)<br>y_kmeans<br><br>plt.scatter(x[:,<span class="hljs-number">0</span>],x[:,<span class="hljs-number">1</span>],c = y_kmeans,cmap = <span class="hljs-string">&quot;Dark2&quot;</span>,s =<span class="hljs-number">50</span>,alpha =<span class="hljs-number">0.5</span>,marker = <span class="hljs-string">&#x27;x&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="三、PCA主要成分分析"><a href="#三、PCA主要成分分析" class="headerlink" title="三、PCA主要成分分析"></a>三、PCA主要成分分析</h3><h5 id="将测量对象的群体按照相似性-和-相异性-进行不同群组的划分，划分后每个群组内部各对象相似度很高，而不同群组对象之间彼此相异度很高"><a href="#将测量对象的群体按照相似性-和-相异性-进行不同群组的划分，划分后每个群组内部各对象相似度很高，而不同群组对象之间彼此相异度很高" class="headerlink" title="将测量对象的群体按照相似性 和 相异性 进行不同群组的划分，划分后每个群组内部各对象相似度很高，而不同群组对象之间彼此相异度很高"></a>将测量对象的群体按照相似性 和 相异性 进行不同群组的划分，划分后每个群组内部各对象相似度很高，而不同群组对象之间彼此相异度很高</h5><h5 id="回归-、-分类-—-用于预测"><a href="#回归-、-分类-—-用于预测" class="headerlink" title="回归 、 分类  —-  用于预测"></a>回归 、 分类  —-  用于预测</h5><h5 id="聚类-—-产生一组集合，可用于降维（在没有因变量的前提下直接对数据进行降维）"><a href="#聚类-—-产生一组集合，可用于降维（在没有因变量的前提下直接对数据进行降维）" class="headerlink" title="聚类 — 产生一组集合，可用于降维（在没有因变量的前提下直接对数据进行降维）"></a>聚类 — 产生一组集合，可用于降维（在没有因变量的前提下直接对数据进行降维）</h5><h5 id="取出保持原有信息的核心数据（效率很高）"><a href="#取出保持原有信息的核心数据（效率很高）" class="headerlink" title="取出保持原有信息的核心数据（效率很高）"></a>取出保持原有信息的核心数据（效率很高）</h5><h5 id="其实是先降维，然后再从新的维度中根据贡献大小来提出主成分"><a href="#其实是先降维，然后再从新的维度中根据贡献大小来提出主成分" class="headerlink" title="其实是先降维，然后再从新的维度中根据贡献大小来提出主成分"></a>其实是先降维，然后再从新的维度中根据贡献大小来提出主成分</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> stats<br>%matplotlib inline<br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LinearRegression<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  二维数组降维</span><br>rng = np.random.RandomState(<span class="hljs-number">8</span>)<br>data = np.dot(rng.rand(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>),rng.randn(<span class="hljs-number">2</span>,<span class="hljs-number">200</span>))   <span class="hljs-comment">#  矩阵相乘的方法</span><br>df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;x1&#x27;</span>:data[:,<span class="hljs-number">0</span>],<br>                  <span class="hljs-string">&#x27;x2&#x27;</span>:data[:,<span class="hljs-number">1</span>]&#125;)<br><span class="hljs-built_in">print</span>(df.head())<br><span class="hljs-built_in">print</span>(df.shape)<br><br>plt.scatter(df[<span class="hljs-string">&#x27;x1&#x27;</span>],df[<span class="hljs-string">&#x27;x2&#x27;</span>],alpha = <span class="hljs-number">0.8</span>,marker =<span class="hljs-string">&#x27;.&#x27;</span>)<br>plt.axis(<span class="hljs-string">&#x27;equal&#x27;</span>)<br>plt.grid()<br><span class="hljs-comment"># 生成图表</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  二维数据降维</span><br><span class="hljs-comment">#  构建模型，分析主成分</span><br><br><span class="hljs-keyword">from</span> sklearn.decomposition <span class="hljs-keyword">import</span> PCA<br><span class="hljs-comment"># 加载主成分分析模块PCA</span><br><br>pca = PCA(n_components =<span class="hljs-number">1</span>)   <span class="hljs-comment">#  降为1维</span><br>pca.fit(df)   <span class="hljs-comment">#  构建模型</span><br><br><span class="hljs-built_in">print</span>(pca.explained_variance_)  <span class="hljs-comment">#  特征值</span><br><span class="hljs-built_in">print</span>(pca.components_)     <span class="hljs-comment"># 特征向量</span><br><span class="hljs-built_in">print</span>(pca.n_components)   <span class="hljs-comment">#  保留成分的个数</span><br><br>x_pca = pca.transform(df)<br><span class="hljs-built_in">print</span>(x_pca)<br><span class="hljs-comment">#  算出最后的结果</span><br><br>x_new = pca.inverse_transform(x_pca)<br>x_new<br><span class="hljs-comment">#  得到原来对的数据</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 多维数据降维</span><br><span class="hljs-comment">#  加载数据</span><br><br><span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> load_digits<br>digits = load_digits()<br><span class="hljs-comment">#print(digits)</span><br><span class="hljs-built_in">print</span>(digits.keys())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;数据长度为:%i条&#x27;</span>% <span class="hljs-built_in">len</span>(digits[<span class="hljs-string">&#x27;data&#x27;</span>]))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;数据形状为:&#x27;</span>,digits.data.shape)<br><span class="hljs-built_in">print</span>(digits.data[:<span class="hljs-number">2</span>])<br><span class="hljs-comment">#  导入数据</span><br><br>pca = PCA(n_components =<span class="hljs-number">2</span>)   <span class="hljs-comment">#  降为2维</span><br>projected = pca.fit_transform(digits.data)<br>projected[:<span class="hljs-number">5</span>]<br><br>plt.scatter(projected[:,<span class="hljs-number">0</span>],projected[:,<span class="hljs-number">1</span>],<br>           c = digits.target,edgecolor = <span class="hljs-string">&#x27;none&#x27;</span>,alpha=<span class="hljs-number">0.8</span>,<br>           cmap = <span class="hljs-string">&#x27;Reds&#x27;</span>,s =<span class="hljs-number">5</span>)<br>plt.axis(<span class="hljs-string">&#x27;equal&#x27;</span>)<br>plt.grid()<br>plt.colorbar()<br><span class="hljs-comment">#  绘制二维数据图</span><br></code></pre></td></tr></table></figure><h3 id="四、线性回归理论概念"><a href="#四、线性回归理论概念" class="headerlink" title="四、线性回归理论概念"></a>四、线性回归理论概念</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> stats<br>%matplotlib inline<br></code></pre></td></tr></table></figure><h5 id="自变量可以是离散的，结果是连续的"><a href="#自变量可以是离散的，结果是连续的" class="headerlink" title="#  自变量可以是离散的，结果是连续的"></a>#  自变量可以是离散的，结果是连续的</h5><h5 id="区分好自变量和因变量"><a href="#区分好自变量和因变量" class="headerlink" title="#  区分好自变量和因变量"></a>#  区分好自变量和因变量</h5><h5 id="拟合数据"><a href="#拟合数据" class="headerlink" title="# 拟合数据"></a># 拟合数据</h5><h5 id="误差项和为0（均值为0），也就是说符合标准差的一个正态分布，但是拟合直线不要求完全服从，但是要求尽量趋近"><a href="#误差项和为0（均值为0），也就是说符合标准差的一个正态分布，但是拟合直线不要求完全服从，但是要求尽量趋近" class="headerlink" title="#  误差项和为0（均值为0），也就是说符合标准差的一个正态分布，但是拟合直线不要求完全服从，但是要求尽量趋近"></a>#  误差项和为0（均值为0），也就是说符合标准差的一个正态分布，但是拟合直线不要求完全服从，但是要求尽量趋近</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  线性回归的python实现方法</span><br><span class="hljs-comment">#  简单线性回归（一元线性回归）</span><br><br><span class="hljs-comment">#  （1）  数据案例</span><br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LinearRegression<br><span class="hljs-comment">#  导入线性回归模块</span><br><br>rang = np.random.RandomState(<span class="hljs-number">1</span>)   <span class="hljs-comment">#  随机数种子，对于一个随机数发生器，只要该种子一样，产生的随机数序列就是相同的</span><br>xtrain = <span class="hljs-number">10</span> * rang.rand(<span class="hljs-number">30</span>)<br>ytrain = <span class="hljs-number">8</span> + <span class="hljs-number">4</span> * xtrain + rang.rand(<span class="hljs-number">30</span>)<br><span class="hljs-comment">#  y  = 8+ 4*x(大概的)</span><br><br>fig = plt.figure(figsize = (<span class="hljs-number">12</span>,<span class="hljs-number">3</span>))<br>ax1 = fig.add_subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br>plt.scatter(xtrain,ytrain,marker = <span class="hljs-string">&#x27;.&#x27;</span>,color = <span class="hljs-string">&#x27;k&#x27;</span>)<br>plt.grid()<br><span class="hljs-comment">#plt.title(&#x27;样本数据散点图&#x27;)</span><br><span class="hljs-comment">#  生成散点图</span><br><br>model = LinearRegression()  <br>model.fit(xtrain[:,np.newaxis],ytrain)      <span class="hljs-comment">#  首先把x变成列形式的值</span><br><br><span class="hljs-built_in">print</span>(model.coef_)<span class="hljs-comment"># 斜率</span><br><span class="hljs-built_in">print</span>(model.intercept_)<br><br>xtest = np.linspace(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">90</span>)<br>ytest = model.predict(xtest[:,np.newaxis])<br><br>ax2 = fig.add_subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br>plt.scatter(xtrain,ytrain,marker = <span class="hljs-string">&#x27;.&#x27;</span>,color = <span class="hljs-string">&#x27;k&#x27;</span>)<br>plt.scatter(xtest,ytest,color = <span class="hljs-string">&#x27;r&#x27;</span>,alpha = <span class="hljs-number">0.2</span>)<br>plt.grid()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">rng  = np.random.RandomState(<span class="hljs-number">5</span>)<br>xtrain = <span class="hljs-number">10</span> * rng.rand(<span class="hljs-number">150</span>,<span class="hljs-number">4</span>)<br>ytrain = <span class="hljs-number">20</span> + np.dot(xtrain,[<span class="hljs-number">1.5</span>,<span class="hljs-number">2</span>,-<span class="hljs-number">4</span>,<span class="hljs-number">3</span>])<br>df = pd.DataFrame(xtrain,columns = [<span class="hljs-string">&#x27;b1&#x27;</span>,<span class="hljs-string">&#x27;b2&#x27;</span>,<span class="hljs-string">&#x27;b3&#x27;</span>,<span class="hljs-string">&#x27;b4&#x27;</span>])<br>df[<span class="hljs-string">&#x27;y&#x27;</span>] = ytrain<br><br>pd.plotting.scatter_matrix(df[[<span class="hljs-string">&#x27;b1&#x27;</span>,<span class="hljs-string">&#x27;b2&#x27;</span>,<span class="hljs-string">&#x27;b3&#x27;</span>,<span class="hljs-string">&#x27;b4&#x27;</span>]],figsize= (<span class="hljs-number">10</span>,<span class="hljs-number">6</span>),<br>                 diagonal = <span class="hljs-string">&#x27;kde&#x27;</span>,<br>                 alpha = <span class="hljs-number">0.5</span>,<br>                 range_padding=<span class="hljs-number">0.1</span>)<br><span class="hljs-built_in">print</span>(df.head())<br><br><span class="hljs-comment">#  四个变量相互独立</span><br><br>model = LinearRegression()  <br>model.fit(df[[<span class="hljs-string">&#x27;b1&#x27;</span>,<span class="hljs-string">&#x27;b2&#x27;</span>,<span class="hljs-string">&#x27;b3&#x27;</span>,<span class="hljs-string">&#x27;b4&#x27;</span>]],df[<span class="hljs-string">&#x27;y&#x27;</span>])  <br><span class="hljs-comment">#  多元回归拟合</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;斜率为:&#x27;</span>,model.coef_)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;截距为:%.4f&#x27;</span>%model.intercept_)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;线性回归函数是：\ny = %.lfx1 + %.lfx2 + %.lfx3 +  %.lfx4 + %.lf&#x27;</span><br>     %(model.coef_[<span class="hljs-number">0</span>],model.coef_[<span class="hljs-number">1</span>],model.coef_[<span class="hljs-number">2</span>],model.coef_[<span class="hljs-number">3</span>],model.intercept_))<br><span class="hljs-comment"># 参数输出</span><br></code></pre></td></tr></table></figure><h3 id="五、线性回归模型的评估"><a href="#五、线性回归模型的评估" class="headerlink" title="五、线性回归模型的评估"></a>五、线性回归模型的评估</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> stats<br>%matplotlib inline<br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LinearRegression<br></code></pre></td></tr></table></figure><p>SSE（和方差） ：  最后拟合数据和原始数据所对应点的误差的平方和,越接近于0，拟合越好，数据预测更准确均方差（SSE/N）  、  均方根(均方根的平方根)</p><p>R- square确定系数：<br>SSR（预测数据和原始数据均值之差的平方和）<br>SST（原始数据和均值之差的平方根）<br>SST = SSE +SSR<br>R- square = 1 - SSE/SST</p><h5 id="越接近1，表明方程的变量对y的解释能力越强，这个模型对数据拟合的也比较好"><a href="#越接近1，表明方程的变量对y的解释能力越强，这个模型对数据拟合的也比较好" class="headerlink" title="越接近1，表明方程的变量对y的解释能力越强，这个模型对数据拟合的也比较好"></a>越接近1，表明方程的变量对y的解释能力越强，这个模型对数据拟合的也比较好</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> metrics<br><br>rang = np.random.RandomState(<span class="hljs-number">1</span>)   <span class="hljs-comment">#  随机数种子，对于一个随机数发生器，只要该种子一样，产生的随机数序列就是相同的</span><br>xtrain = <span class="hljs-number">10</span> * rang.rand(<span class="hljs-number">30</span>)<br>ytrain = <span class="hljs-number">8</span> + <span class="hljs-number">4</span> * xtrain + rang.rand(<span class="hljs-number">30</span>)*<span class="hljs-number">3</span><br><span class="hljs-comment">#  创建数据</span><br><br>model = LinearRegression()  <br>model.fit(xtrain[:,np.newaxis],ytrain) <br><span class="hljs-comment">#  多元回归拟合</span><br><br>ytest = model.predict(xtrain[:,np.newaxis])<br>mse =  metrics.mean_absolute_error(ytrain,ytest)<br>rmse = np.sqrt(mse)<br><span class="hljs-built_in">print</span>(mse)<br><span class="hljs-built_in">print</span>(rmse)<br><br>ssr = ((ytest-ytrain.mean())**<span class="hljs-number">2</span>).<span class="hljs-built_in">sum</span>()<br>sst = ((ytrain-ytrain.mean())**<span class="hljs-number">2</span>).<span class="hljs-built_in">sum</span>()<br>r2 = ssr/sst<br>r2  <br><br>r22 = model.score(xtrain[:,np.newaxis],ytrain)<br><span class="hljs-built_in">print</span>(r22)<br><span class="hljs-built_in">print</span>(r2)<br></code></pre></td></tr></table></figure><h3 id="六、蒙塔卡罗模拟"><a href="#六、蒙塔卡罗模拟" class="headerlink" title="六、蒙塔卡罗模拟"></a>六、蒙塔卡罗模拟</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> stats<br>%matplotlib inline<br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LinearRegression<br></code></pre></td></tr></table></figure><h5 id="随机抽样或统计实验方法"><a href="#随机抽样或统计实验方法" class="headerlink" title="#   随机抽样或统计实验方法"></a>#   随机抽样或统计实验方法</h5><h5 id="1、构造或描述概率过程"><a href="#1、构造或描述概率过程" class="headerlink" title="1、构造或描述概率过程"></a>1、构造或描述概率过程</h5><h5 id="2、实现从已知概率分布抽样"><a href="#2、实现从已知概率分布抽样" class="headerlink" title="2、实现从已知概率分布抽样"></a>2、实现从已知概率分布抽样</h5><h5 id="3、建立各种估量值"><a href="#3、建立各种估量值" class="headerlink" title="3、建立各种估量值"></a>3、建立各种估量值</h5><h5 id="随机采样上计算得到近似值，随着采样的增多，得到对的结果是正确结果的概率逐渐增大"><a href="#随机采样上计算得到近似值，随着采样的增多，得到对的结果是正确结果的概率逐渐增大" class="headerlink" title="随机采样上计算得到近似值，随着采样的增多，得到对的结果是正确结果的概率逐渐增大"></a>随机采样上计算得到近似值，随着采样的增多，得到对的结果是正确结果的概率逐渐增大</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-number">10000</span><br>r = <span class="hljs-number">1.0</span><br>a,b = (<span class="hljs-number">0.0</span>,<span class="hljs-number">0.0</span>)<br><br>xmin,xmax = a-r,a+r<br>ymin,ymax = b-r,b+r<br><br>x = np.random.uniform(xmin,xmax,n)<br>y = np.random.uniform(ymin,ymax,n)<br><br>fig = plt.figure(figsize=(<span class="hljs-number">6</span>,<span class="hljs-number">6</span>))<br>axes = fig.add_subplot(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br>plt.plot(x,y,<span class="hljs-string">&#x27;ro&#x27;</span>,markersize=<span class="hljs-number">1</span>)<br>plt.axis(<span class="hljs-string">&#x27;equal&#x27;</span>)<br><br>d = np.sqrt((x-a)**<span class="hljs-number">2</span> + (y-b)**<span class="hljs-number">2</span>)<br>res = <span class="hljs-built_in">sum</span>(np.where(d&lt;r,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>))<br>pi = <span class="hljs-number">4</span> * res /n<br>pi<br><br><span class="hljs-keyword">from</span> matplotlib.patches <span class="hljs-keyword">import</span> Circle<br>circle = Circle(xy = (a,b),radius =r,alpha =<span class="hljs-number">0.5</span>,color = <span class="hljs-string">&#x27;gray&#x27;</span>)<br>axes.add_patch(circle)<br>plt.grid(<span class="hljs-literal">True</span>,linestyle = <span class="hljs-string">&#x27;--&#x27;</span>,linewidth = <span class="hljs-string">&#x27;0.8&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python+机器学习+数据分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随机森林处理二分类问题</title>
    <link href="/2022/07/15/%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97%E5%A4%84%E7%90%86%E4%BA%8C%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98/"/>
    <url>/2022/07/15/%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97%E5%A4%84%E7%90%86%E4%BA%8C%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="随机森林处理二分类问题"><a href="#随机森林处理二分类问题" class="headerlink" title="随机森林处理二分类问题"></a>随机森林处理二分类问题</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>data=pd.read_table(<span class="hljs-string">&#x27;C:/Users/86155/Desktop/Features.txt&#x27;</span>,engine=<span class="hljs-string">&#x27;python&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># .未调参时模型精确度</span><br><span class="hljs-comment">#导入相应的库</span><br><br><span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> load_breast_cancer<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> GridSearchCV<br><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> RandomForestClassifier<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> cross_val_score<br><span class="hljs-comment">#数据导入</span><br>data = load_breast_cancer()<br>X = data.data<br>y = data.target<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#什么参数也不调整，简单建模，建立base line model</span><br>rfc = RandomForestClassifier(random_state=<span class="hljs-number">90</span>)  <span class="hljs-comment">#基线模型base_line model</span><br>base_score = cross_val_score(rfc, X, y, cv=<span class="hljs-number">10</span>).mean()<br><br>base_score <br></code></pre></td></tr></table></figure><pre><code>0.9648809523809524</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  使用网格搜索对参数一个一个进行调试</span><br><span class="hljs-comment">#  有一些参数是没有参照的，很难说清一个范围，这种情况下我们粗调，看趋势，再细调 </span><br><span class="hljs-comment">#  比如： </span><br>param_grid = &#123;<span class="hljs-string">&#x27;n_estimators&#x27;</span>:np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">200</span>, <span class="hljs-number">10</span>)&#125; <br>param_grid = &#123;<span class="hljs-string">&#x27;max_depth&#x27;</span>:np.arange(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)&#125; <br><span class="hljs-comment">#  有一些参数是可以找到一个范围的，或者说我们知道他们的取值和随着他们的取值，模型的整体准确率会如何变化， </span><br><span class="hljs-comment">#  这样的参数我们就可以直接跑网格搜索 :</span><br>param_grid = &#123;<span class="hljs-string">&#x27;min_samples_split&#x27;</span>:np.arange(<span class="hljs-number">2</span>, <span class="hljs-number">22</span>, <span class="hljs-number">1</span>)&#125; <br>param_grid = &#123;<span class="hljs-string">&#x27;min_samples_leaf&#x27;</span>:np.arange(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>)&#125; <br>param_grid = &#123;<span class="hljs-string">&#x27;max_features&#x27;</span>:np.arange(<span class="hljs-number">5</span>,<span class="hljs-number">30</span>,<span class="hljs-number">1</span>)&#125; <br>param_grid = &#123;<span class="hljs-string">&#x27;criterion&#x27;</span>:[<span class="hljs-string">&#x27;gini&#x27;</span>, <span class="hljs-string">&#x27;entropy&#x27;</span>]&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 先粗调n_estimators</span><br>scorel = []<br>param_grid = &#123;<span class="hljs-string">&#x27;n_estimators&#x27;</span>:np.arange(<span class="hljs-number">1</span>, <span class="hljs-number">200</span>, <span class="hljs-number">10</span>)&#125;<br><br>rfc = RandomForestClassifier(n_jobs=-<span class="hljs-number">1</span>,<br>                            random_state=<span class="hljs-number">90</span><br>                            )<br><br>gridsearch0 = GridSearchCV(rfc, param_grid=param_grid, cv=<span class="hljs-number">10</span>)<br>gridsearch0.fit(X, y)<br>gridsearch0.best_score_, gridsearch0.best_params_  <span class="hljs-comment"># (0.9631265664160402, &#123;&#x27;n_estimators&#x27;: 71&#125;)</span><br><br>best_score = gridsearch0.best_score_<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#细调n_estimators</span><br><br>scorel = []<br>param_grid = &#123;<span class="hljs-string">&#x27;n_estimators&#x27;</span>:np.arange(<span class="hljs-number">60</span>, <span class="hljs-number">80</span>,<span class="hljs-number">1</span>)&#125;<br><br>rfc = RandomForestClassifier(n_jobs=-<span class="hljs-number">1</span>,<br>                            random_state=<span class="hljs-number">90</span><br>                            )<br>gridsearch1 = GridSearchCV(rfc, param_grid=param_grid, cv=<span class="hljs-number">10</span>)<br>gridsearch1.fit(X, y)<br><br>gridsearch1.best_score_, gridsearch1.best_params_, best_score <span class="hljs-comment"># (0.9666353383458647, &#123;&#x27;n_estimators&#x27;: 73&#125;, 0.9631265664160402)</span><br>best_score = gridsearch1.best_score_<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#调整max_depth</span><br>score1 = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>):<br>    rfc = RandomForestClassifier(<br>                          n_estimators=<span class="hljs-number">73</span>,<br>                           n_jobs=-<span class="hljs-number">1</span>,<br>                            random_state=<span class="hljs-number">90</span>,<br>                            max_depth= i<br>                            )<br>    score = cross_val_score(rfc, X, y, cv = <span class="hljs-number">10</span>).mean()<br>    score1.append(score)<br>    <br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(score1), score1.index(<span class="hljs-built_in">max</span>(score1))+<span class="hljs-number">1</span>) <span class="hljs-comment"># 0.9666353383458647 8</span><br><span class="hljs-built_in">print</span>(best_score) <span class="hljs-comment"># 0.9666353383458647</span><br><span class="hljs-comment"># 这次max_depth调整时没有提高精度的</span><br></code></pre></td></tr></table></figure><pre><code>0.9666353383458647 80.9666353383458647</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">在这里，我们注意到，设置max_depth之后，模型的准确率并未改变，这说明： <br><span class="hljs-number">1</span>）剪枝之前的树深depth=<span class="hljs-number">8</span>； <br><span class="hljs-number">2</span>）限制max_depth&lt;<span class="hljs-number">8</span>，表示对模型进行了剪枝，一旦剪枝，就只会使得模型的准确度降低； <br><span class="hljs-number">3</span>）说明模型目前处于欠拟合的状态。位于上述图像的左边； <br>通常来说，随机森林应该在泛化误差最低点的右边，树模型应该倾向于过拟合，而不是拟合不足。<br>但也有可能是我们调整的n_estimators对于数据集来说太大，因此将模型拉到泛化误差最低点去了。 <br>当模型位于图像左边时，我们需要的是增加模型复杂度的选项，因此max_depth应该尽量大，min_samples_leaf和min_samples_split都应该尽量小。<br>这几乎是在说明，除了max_features，我们没有任何参数可以调整了，因为max_depth，min_samples_leaf和min_samples_split是剪枝参数，是减小复杂度的参数。 <br><br><span class="hljs-comment">#  对于min_samples_split和min_samples_leaf,一般是从他们的最小值开始向上增加10或20 </span><br><span class="hljs-comment">#  面对高维度高样本量数据，如果不放心，也可以直接+50，对于大型数据，可能需要200~300的范围 </span><br><span class="hljs-comment">#  调整的时候发现准确无论如何都上不来，那可以放心大胆调一个很大的数据，大力限制模型的复杂度  </span><br>param_grid = &#123;<span class="hljs-string">&#x27;min_samples_leaf&#x27;</span>:np.arange(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>+<span class="hljs-number">20</span>, <span class="hljs-number">1</span>)&#125;<br>rfc = RandomForestClassifier(n_estimators=<span class="hljs-number">73</span>,<br>                                 n_jobs=-<span class="hljs-number">1</span>,<br>                                 random_state= <span class="hljs-number">90</span>,<br>                                )<br><br>gridsearch3 = GridSearchCV(rfc, param_grid=param_grid, cv=<span class="hljs-number">10</span>)<br>gridsearch3.fit(X, y)<br>gridsearch3.best_score_, gridsearch3.best_params_, best_score<br><span class="hljs-comment"># (0.9666353383458647, &#123;&#x27;min_samples_leaf&#x27;: 1&#125;, 0.9666353383458647)</span><br><span class="hljs-comment"># 验证确实是无效的</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  max_features是唯一一个即能够将模型往左推，也能够将模型往右推的参数。我们需要根据调参前，模型所在的位置（在泛化误差最低点的左边还是右边）来决定我们要将max_features往哪边调。</span><br><span class="hljs-comment">#  现在模型位于图像左侧，我们需要的是更高的复杂度，因此我们应该把max_features往更大的方向调整，可用的特征越多，模型才会越复杂。</span><br><span class="hljs-comment">#  max_features的默认最小值是sqrt(n_features)，因此我们使用这个值作为调参范围的最小值。 </span><br>param_grid = &#123;<span class="hljs-string">&#x27;max_features&#x27;</span>:np.arange(<span class="hljs-number">5</span>,<span class="hljs-number">30</span>,<span class="hljs-number">1</span>)&#125; <br><br>rfc = RandomForestClassifier(n_estimators=<span class="hljs-number">73</span>,<br>                                 n_jobs=-<span class="hljs-number">1</span>,<br>                                 random_state=<span class="hljs-number">90</span>,<br>                                )<br><br>gridsearch4 = GridSearchCV(rfc, param_grid=param_grid, cv=<span class="hljs-number">10</span>)<br>gridsearch4.fit(X, y)<br><br>gridsearch4.best_score_, gridsearch4.best_params_, best_score<br><span class="hljs-comment"># (0.9666666666666668, &#123;&#x27;max_features&#x27;: 24&#125;, 0.9666353383458647)</span><br>best_score = gridsearch4.best_score_<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  最后调整Criterion</span><br><br>param_grid = &#123;<span class="hljs-string">&#x27;criterion&#x27;</span>:[<span class="hljs-string">&#x27;gini&#x27;</span>, <span class="hljs-string">&#x27;entropy&#x27;</span>]&#125;<br>rfc = RandomForestClassifier(n_estimators=<span class="hljs-number">73</span>,<br>                                 n_jobs=-<span class="hljs-number">1</span>,<br>                                 random_state= <span class="hljs-number">90</span>,<br>                                 max_features = <span class="hljs-number">24</span><br>                                )<br><br>gridsearch5 = GridSearchCV(rfc, param_grid=param_grid, cv=<span class="hljs-number">10</span>)<br>gridsearch5.fit(X, y)<br><br>gridsearch5.best_score_, gridsearch5.best_params_, best_score<br><span class="hljs-comment"># (0.9666666666666668, &#123;&#x27;criterion&#x27;: &#x27;gini&#x27;&#125;, 0.9666666666666668)</span><br><br><br></code></pre></td></tr></table></figure><pre><code>(0.9666666666666668, &#123;&#39;criterion&#39;: &#39;gini&#39;&#125;, 0.9666666666666668)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  调整完毕，总结出模型的最佳参数</span><br><br>rfc = RandomForestClassifier(n_estimators=<span class="hljs-number">73</span>,random_state=<span class="hljs-number">90</span>, max_features=<span class="hljs-number">24</span>, n_jobs=-<span class="hljs-number">1</span>)<br>score = cross_val_score(rfc,data.data,data.target,cv=<span class="hljs-number">10</span>).mean()<br>score<br></code></pre></td></tr></table></figure><pre><code>0.9666666666666668</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  与基线模型进行比对</span><br><br>base_score, score<br></code></pre></td></tr></table></figure><pre><code>(0.9648809523809524, 0.9666666666666668)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python">n_estimators ：<br>森林中树木的数量，即基评估器(学习器)的数量<br>默认是<span class="hljs-number">100</span>，n_estimators变大，模型更复杂， n_estimators变大，模型更简单；不影响单个模型的复杂度 <br><br>max_depth ：<br>树的最大深度，超过最大深度的树枝都会被剪掉<br>默认最大深度，即最高复杂度，如果减小max_depth，就 <br>会向复杂度降低的方向调整，向图像的左边移动 <br><br>min_samples_leaf ：<br>一个节点在分枝后的每个子节点都必须包含至少min_samples_leaf个训练样本，否则分枝就不会发生<br>默认最小限制<span class="hljs-number">1</span>，即最高复杂度。min_samples_leaf↑，降 低模型复杂度，向图像的左边移动<br><br>min_samples_split ： <br>一个节点必须要包含至少min_samples_split个训练样本，这个节点才允许被分枝， 否则分枝就不会发生<br>默认最小限制<span class="hljs-number">2</span>，即最高复杂度。min_samples_split↑，降 低模型复杂度，向图像的左边移动<br><br>max_features ： <br>max_features限制分枝时考虑的特征个数，超过限制个数的特征都会被舍弃，默认 值为总特征个数开平方取整<br>默认是特征总数的开平方，位于中间复杂度。 既可以向复杂度升高的方向，也可以向复杂度降低的方向调参。 max_features↓，模型更简单；图像左移； max_features↑，模型更复杂，图像右移max_features。 是唯一的既能够让模型更简单，也能够让模型更复杂的参数，所以在 调整这个参数的时候，需要考虑我们调参的方向<br><br>criterion  ：<br>不纯度的衡量指标，有基尼系数和信息熵两种选择<br>一般使用gini<br><br>泛化误差：来衡量模型在未知数据上的准确率的指标，叫做泛化误差 当模型在未知数据（测试集）<br>上表现糟糕时，我们说模型的泛化程度不够，泛化误差大，模型的效果不好。泛化误 差受到模型的结构（复杂度）影响。<br>看下面这张图，它准确地描绘了泛化误差与模型复杂度的关系，当模型太复杂，模型就会过拟合，泛化能力就不够，所以泛化误差大。<br>当模型太简单，模型就会欠拟合，拟合能力就不够，所 以误差也会大。只有当模型的复杂度刚刚好的才能够达到泛化误差最小的目标，我们追求的就是位于中间的平衡点。<br><span class="hljs-number">1</span>）对于随机森林而言，树的深度越深，枝叶越多，模型越复杂 <br><span class="hljs-number">2</span>）随机森林这样的树模型的目标，是减少模型复杂度，把模型往图像的左边移动<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python+机器学习+数据分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python-数据处理</title>
    <link href="/2022/07/15/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    <url>/2022/07/15/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="一、缺失值处理"><a href="#一、缺失值处理" class="headerlink" title="一、缺失值处理"></a>一、缺失值处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br>%matplotlib inline<br></code></pre></td></tr></table></figure><h5 id="删除记录-数据插补-不处理"><a href="#删除记录-数据插补-不处理" class="headerlink" title="删除记录 数据插补 不处理"></a>删除记录 数据插补 不处理</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  判断是否是缺失值</span><br>s = pd.Series([<span class="hljs-number">12</span>,<span class="hljs-number">33</span>,<span class="hljs-number">45</span>,<span class="hljs-number">23</span>,np.nan,<span class="hljs-number">66</span>,<span class="hljs-number">54</span>,np.nan,<span class="hljs-number">99</span>])<br>df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;value1&#x27;</span>:[<span class="hljs-number">12</span>,<span class="hljs-number">33</span>,<span class="hljs-number">45</span>,<span class="hljs-number">23</span>,np.nan,np.nan,<span class="hljs-number">66</span>,<span class="hljs-number">54</span>,np.nan,<span class="hljs-number">99</span>,<span class="hljs-number">100</span>],<br>                  <span class="hljs-string">&#x27;value2&#x27;</span>:[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,np.nan,np.nan,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>,np.nan,<span class="hljs-string">&#x27;g&#x27;</span>]&#125;)<br><span class="hljs-comment">#  创建数据</span><br><span class="hljs-built_in">print</span>(s.isnull())<br><span class="hljs-built_in">print</span>(df.notnull())<br><span class="hljs-built_in">print</span>(df[<span class="hljs-string">&#x27;value1&#x27;</span>].notnull())<br><br><span class="hljs-built_in">print</span>(s[s.isnull() == <span class="hljs-literal">False</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  删除缺失值</span><br><br><span class="hljs-comment">#  判断是否是缺失值</span><br>s = pd.Series([<span class="hljs-number">12</span>,<span class="hljs-number">33</span>,<span class="hljs-number">45</span>,<span class="hljs-number">23</span>,np.nan,<span class="hljs-number">66</span>,<span class="hljs-number">54</span>,np.nan,<span class="hljs-number">99</span>])<br>df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;value1&#x27;</span>:[<span class="hljs-number">12</span>,<span class="hljs-number">33</span>,<span class="hljs-number">45</span>,<span class="hljs-number">23</span>,np.nan,np.nan,<span class="hljs-number">66</span>,<span class="hljs-number">54</span>,np.nan,<span class="hljs-number">99</span>,<span class="hljs-number">100</span>],<br>                  <span class="hljs-string">&#x27;value2&#x27;</span>:[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,np.nan,np.nan,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>,np.nan,<span class="hljs-string">&#x27;g&#x27;</span>]&#125;)<br><span class="hljs-comment">#  创建数据</span><br><br>s.dropna(inplace = <span class="hljs-literal">True</span>)<br>df.dropna(inplace= <span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(s)<br>df<br><span class="hljs-comment">#  注意inplace参数，默认为False - 生成新的值</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  填充/替换缺失值   - fillna\  replace</span><br><br>s = pd.Series([<span class="hljs-number">12</span>,<span class="hljs-number">33</span>,<span class="hljs-number">45</span>,<span class="hljs-number">23</span>,np.nan,<span class="hljs-number">66</span>,<span class="hljs-number">54</span>,np.nan,<span class="hljs-number">99</span>])<br>df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;value1&#x27;</span>:[<span class="hljs-number">12</span>,<span class="hljs-number">33</span>,<span class="hljs-number">45</span>,<span class="hljs-number">23</span>,np.nan,np.nan,<span class="hljs-number">66</span>,<span class="hljs-number">54</span>,np.nan,<span class="hljs-number">99</span>,<span class="hljs-number">100</span>],<br>                  <span class="hljs-string">&#x27;value2&#x27;</span>:[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,np.nan,np.nan,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>,np.nan,<span class="hljs-string">&#x27;g&#x27;</span>]&#125;)<br><span class="hljs-comment">#  创建数据</span><br>s.fillna(<span class="hljs-number">0</span>,inplace = <span class="hljs-literal">True</span>)    <span class="hljs-comment">#  value为填充值</span><br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---&#x27;</span>)<br><br>df[<span class="hljs-string">&#x27;value1&#x27;</span>].fillna(method = <span class="hljs-string">&#x27;pad&#x27;</span>,inplace  =<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(df)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---&#x27;</span>)<br><span class="hljs-comment">#  pad/ffill - 用之前的数据填充</span><br><span class="hljs-comment">#  backfill / bfill  - 用之后的数据填充</span><br><br>s = pd.Series([<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,np.nan,np.nan,<span class="hljs-number">66</span>,<span class="hljs-number">54</span>,np.nan,<span class="hljs-number">99</span>])<br>s.replace(np.nan,<span class="hljs-string">&#x27;缺失数据&#x27;</span>,inplace = <span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br></code></pre></td></tr></table></figure><h5 id="缺失值插补"><a href="#缺失值插补" class="headerlink" title="缺失值插补"></a>缺失值插补</h5><h5 id="几种思路：-均值-中位数-众数插补-临近值插补-插值法"><a href="#几种思路：-均值-中位数-众数插补-临近值插补-插值法" class="headerlink" title="几种思路：  均值  中位数  众数插补  临近值插补  插值法"></a>几种思路：  均值  中位数  众数插补  临近值插补  插值法</h5><h5 id="均值-中位数-众数插补"><a href="#均值-中位数-众数插补" class="headerlink" title="均值  中位数  众数插补"></a>均值  中位数  众数插补</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">s = pd.Series([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,np.nan,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,np.nan,np.nan,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">12</span>,<span class="hljs-number">2</span>,np.nan,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br><span class="hljs-comment">#print(s)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---&#x27;</span>)<br><br>u = s.mean()<br>me = s.median()<br>mod = s.mode()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;均值为：%.2f,中位数为：%.2f&#x27;</span>%(u,me))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;众数为：&#x27;</span>,mod.tolist())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---&#x27;</span>)<br><br>s.fillna(u,inplace=<span class="hljs-literal">True</span>)<br>s<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  (2)  临近值插补</span><br>s = pd.Series([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,np.nan,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,np.nan,np.nan,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">12</span>,<span class="hljs-number">2</span>,np.nan,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br><span class="hljs-comment">#print(s)</span><br>s.fillna(method = <span class="hljs-string">&#x27;ffill&#x27;</span>,inplace = <span class="hljs-literal">True</span>)  <span class="hljs-comment">#  用前值插补</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  （3）   拉格朗日插值法</span><br><br><span class="hljs-keyword">from</span> scipy.interpolate <span class="hljs-keyword">import</span> lagrange<br>x = [<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>]<br>y = [<span class="hljs-number">10</span>,<span class="hljs-number">8</span>,<span class="hljs-number">4</span>]<br>plt.scatter(x,y)<br><span class="hljs-built_in">print</span>(lagrange(x,y))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(lagrange(x,y)))<br><span class="hljs-comment">#  输出值为多项式的n个系数</span><br><span class="hljs-comment">#   这里输出3个值，分别为 a0  a1  a2</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;差值10为：%.2f&#x27;</span>% lagrange(x,y)(<span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---&#x27;</span>)<br><br>df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;x&#x27;</span>:np.arange(<span class="hljs-number">15</span>)&#125;)<br>df[<span class="hljs-string">&#x27;y&#x27;</span>] = lagrange(x,y)(df[<span class="hljs-string">&#x27;x&#x27;</span>])<br>plt.plot(df[<span class="hljs-string">&#x27;x&#x27;</span>],df[<span class="hljs-string">&#x27;y&#x27;</span>],linestyle = <span class="hljs-string">&#x27;--&#x27;</span>,color = <span class="hljs-string">&#x27;k&#x27;</span>)<br></code></pre></td></tr></table></figure><h5 id="拉格朗日插值法的应用步骤："><a href="#拉格朗日插值法的应用步骤：" class="headerlink" title="拉格朗日插值法的应用步骤："></a>拉格朗日插值法的应用步骤：</h5><h5 id="1、-创建数据"><a href="#1、-创建数据" class="headerlink" title="1、  创建数据"></a>1、  创建数据</h5><h5 id="2、-缺失值的数量"><a href="#2、-缺失值的数量" class="headerlink" title="2、  缺失值的数量"></a>2、  缺失值的数量</h5><h5 id="3、-密度图查看确实的情况-（直接生成图会自动删除相应的缺值）"><a href="#3、-密度图查看确实的情况-（直接生成图会自动删除相应的缺值）" class="headerlink" title="3、 密度图查看确实的情况  （直接生成图会自动删除相应的缺值）"></a>3、 密度图查看确实的情况  （直接生成图会自动删除相应的缺值）</h5><h5 id="4、-直接拿缺失值的前5个和后五个数据就可以完成"><a href="#4、-直接拿缺失值的前5个和后五个数据就可以完成" class="headerlink" title="4、  直接拿缺失值的前5个和后五个数据就可以完成"></a>4、  直接拿缺失值的前5个和后五个数据就可以完成</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">// <span class="hljs-number">5</span>、<br>   df f(s,n,k=<span class="hljs-number">5</span>):<br>    y = s[<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(n-k))]<br>    y = y[y.notnull()]<br>        <span class="hljs-keyword">return</span>(lagrange(y.index,<span class="hljs-built_in">list</span>(y))(n)) <br><br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(data)):<br>      <span class="hljs-keyword">if</span> data.isnull()[i]:<br>         data[i] = f(data,i)<br>        <span class="hljs-built_in">print</span>(f(data,i))<br><br><br>// <span class="hljs-number">6</span>、<br> data.dropna(inplace =<span class="hljs-literal">True</span>)<br>    data.plot(kind = <span class="hljs-string">&#x27;kde&#x27;</span>,style = <span class="hljs-string">&#x27;--k&#x27;</span>,ax = axes[<span class="hljs-number">3</span>] ,grid =<span class="hljs-literal">True</span> , title = <span class="hljs-string">&#x27;拉格朗日插值法后&#x27;</span>，xlim = [-<span class="hljs-number">50</span>,<span class="hljs-number">150</span>])<br>     <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Finished&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="二、异常值处理"><a href="#二、异常值处理" class="headerlink" title="二、异常值处理"></a>二、异常值处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> stats<br>%matplotlib inline<br></code></pre></td></tr></table></figure><h5 id="异常值（离群值）"><a href="#异常值（离群值）" class="headerlink" title="#  异常值（离群值）"></a>#  异常值（离群值）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  异常值分析</span><br><span class="hljs-comment">#  （1）  3（西格玛）原则   -  超过它的值为异常值</span><br><br>data = pd.Series(np.random.randn(<span class="hljs-number">10000</span>)*<span class="hljs-number">100</span>)<br>data.head()<br><br>u = data.mean()<br>std = data.std()<br>stats.kstest(data,<span class="hljs-string">&#x27;norm&#x27;</span>,(u,std))<br><br>fig = plt.figure(figsize = (<span class="hljs-number">10</span>,<span class="hljs-number">6</span>))<br>ax1 = fig.add_subplot(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br>data.plot(kind=<span class="hljs-string">&#x27;kde&#x27;</span>,grid = <span class="hljs-literal">True</span>,style = <span class="hljs-string">&#x27;-k&#x27;</span>,title = <span class="hljs-string">&#x27;密度图&#x27;</span>)<br>plt.axvline(<span class="hljs-number">3</span>*std,color=<span class="hljs-string">&#x27;r&#x27;</span>,linestyle=<span class="hljs-string">&#x27;--&#x27;</span>,alpha=<span class="hljs-number">0.8</span>)<br>plt.axvline(-<span class="hljs-number">3</span>*std,color=<span class="hljs-string">&#x27;r&#x27;</span>,linestyle=<span class="hljs-string">&#x27;--&#x27;</span>,alpha=<span class="hljs-number">0.8</span>)<br><span class="hljs-comment"># 绘制密度曲线</span><br><br>error = data[np.<span class="hljs-built_in">abs</span>(data - u) &gt; <span class="hljs-number">3</span>*std]<br>data_c = data[np.<span class="hljs-built_in">abs</span>(data - u) &lt;= <span class="hljs-number">3</span>*std]<br>ax2 = fig.add_subplot(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><br>plt.scatter(data_c.index,data_c,color=<span class="hljs-string">&#x27;k&#x27;</span>,marker=<span class="hljs-string">&#x27;.&#x27;</span>,alpha=<span class="hljs-number">0.3</span>)<br>plt.scatter(error.index,error,color=<span class="hljs-string">&#x27;r&#x27;</span>,marker=<span class="hljs-string">&#x27;.&#x27;</span>,alpha=<span class="hljs-number">0.8</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># (2)  箱型图分析（更加标准，能够筛选出相对多一点的异常值）</span><br><br>fig = plt.figure(figsize=(<span class="hljs-number">10</span>,<span class="hljs-number">6</span>))<br>ax1 = fig.add_subplot(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br>color = <span class="hljs-built_in">dict</span>(boxes=<span class="hljs-string">&#x27;DarkGreen&#x27;</span>,whiskers=<span class="hljs-string">&#x27;DarkOrange&#x27;</span>,medians=<span class="hljs-string">&#x27;DarkBlue&#x27;</span>,caps=<span class="hljs-string">&#x27;Gray&#x27;</span>)<br>data.plot.box(vert = <span class="hljs-literal">False</span>,grid = <span class="hljs-literal">True</span>,color = color,ax = ax1)   <span class="hljs-comment">#  ,label = &#x27;样本数据&#x27;</span><br><span class="hljs-comment"># 以内限为界</span><br><br>s = data.describe()<br>q1 = s[<span class="hljs-string">&#x27;25%&#x27;</span>]<br>q3 = s[<span class="hljs-string">&#x27;75%&#x27;</span>]<br>iqr = q3 - q1<br>q1,q3,iqr<br>mi = q1 - <span class="hljs-number">1.5</span>*iqr<br>ma = q3 + <span class="hljs-number">1.5</span>*iqr<br><br>ax2 = fig.add_subplot(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br>error = data[(data&lt;mi)|(data&gt;ma)]<br>data_c =  data[(data&gt;=mi) &amp; (data&lt;=ma)]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;异常值共%i条&#x27;</span>% <span class="hljs-built_in">len</span>(error))<br><span class="hljs-comment">#  筛选出异常值error， 删除异常值之后的数据data_c</span><br><br>plt.scatter(data_c.index,data_c,color=<span class="hljs-string">&#x27;k&#x27;</span>,marker=<span class="hljs-string">&#x27;.&#x27;</span>,alpha=<span class="hljs-number">0.3</span>)<br>plt.scatter(error.index,error,color=<span class="hljs-string">&#x27;r&#x27;</span>,marker=<span class="hljs-string">&#x27;.&#x27;</span>,alpha=<span class="hljs-number">0.5</span>)<br>plt.xlim([-<span class="hljs-number">10</span>,<span class="hljs-number">10010</span>])<br>plt.grid()<br><span class="hljs-comment"># 图像表达</span><br></code></pre></td></tr></table></figure><h3 id="三、数据归一化处理"><a href="#三、数据归一化处理" class="headerlink" title="三、数据归一化处理"></a>三、数据归一化处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> stats<br>%matplotlib inline<br></code></pre></td></tr></table></figure><h5 id="数据标准化"><a href="#数据标准化" class="headerlink" title="数据标准化"></a>数据标准化</h5><h5 id="0-1-标准化"><a href="#0-1-标准化" class="headerlink" title="0-1 标准化"></a>0-1 标准化</h5><h5 id="将数据的最大值记录下来，并通过max-min作为基数（0-1）进行数据的归一处理"><a href="#将数据的最大值记录下来，并通过max-min作为基数（0-1）进行数据的归一处理" class="headerlink" title="将数据的最大值记录下来，并通过max-min作为基数（0,1）进行数据的归一处理"></a>将数据的最大值记录下来，并通过max-min作为基数（0,1）进行数据的归一处理</h5><h5 id="x-x-min-max-min"><a href="#x-x-min-max-min" class="headerlink" title="x = (x - min) / (max - min)"></a>x = (x - min) / (max - min)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;value1&#x27;</span>:np.random.rand(<span class="hljs-number">10</span>)*<span class="hljs-number">20</span>,<br>                  <span class="hljs-string">&#x27;value2&#x27;</span>:np.random.rand(<span class="hljs-number">10</span>)*<span class="hljs-number">100</span>&#125;)<br><span class="hljs-built_in">print</span>(df.head())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---&#x27;</span>)<br><span class="hljs-comment">#  创建数据</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">df,*cols</span>):</span><br>    df_n = df.copy()<br>    <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> cols:<br>        ma = df_n[col].<span class="hljs-built_in">max</span>()<br>        mi = df_n[col].<span class="hljs-built_in">min</span>()<br>        df_n[col+<span class="hljs-string">&#x27;_n&#x27;</span>]  = (df_n[col] - mi) / (ma - mi)<br>    <span class="hljs-keyword">return</span>(df_n)<br><br>df_n = f(df,<span class="hljs-string">&#x27;value1&#x27;</span>,<span class="hljs-string">&#x27;value2&#x27;</span>)<br>df_n<br></code></pre></td></tr></table></figure><h5 id="数据标准化-变成正态分布"><a href="#数据标准化-变成正态分布" class="headerlink" title="数据标准化(变成正态分布)"></a>数据标准化(变成正态分布)</h5><h5 id="（2）-Z-score标准化"><a href="#（2）-Z-score标准化" class="headerlink" title="（2）  Z-score标准化"></a>（2）  Z-score标准化</h5><h5 id="Z分数是一个分数与平均数的差再除以标准差的过程"><a href="#Z分数是一个分数与平均数的差再除以标准差的过程" class="headerlink" title="Z分数是一个分数与平均数的差再除以标准差的过程"></a>Z分数是一个分数与平均数的差再除以标准差的过程</h5><h5 id="以标准差为计算单位，在原始分数低于平均值Z为负，反之则为正"><a href="#以标准差为计算单位，在原始分数低于平均值Z为负，反之则为正" class="headerlink" title="以标准差为计算单位，在原始分数低于平均值Z为负，反之则为正"></a>以标准差为计算单位，在原始分数低于平均值Z为负，反之则为正</h5><h5 id="一个给定分数距离平均数多少标准差"><a href="#一个给定分数距离平均数多少标准差" class="headerlink" title="一个给定分数距离平均数多少标准差"></a>一个给定分数距离平均数多少标准差</h5><h5 id="什么情况用Z-score标准化："><a href="#什么情况用Z-score标准化：" class="headerlink" title="什么情况用Z-score标准化："></a>什么情况用Z-score标准化：</h5><h5 id="在分类、聚类算法中，需要使用距离来度量相似度的时候，会表现更好"><a href="#在分类、聚类算法中，需要使用距离来度量相似度的时候，会表现更好" class="headerlink" title="在分类、聚类算法中，需要使用距离来度量相似度的时候，会表现更好"></a>在分类、聚类算法中，需要使用距离来度量相似度的时候，会表现更好</h5><h5 id="相似性-平均水平"><a href="#相似性-平均水平" class="headerlink" title="相似性   平均水平"></a>相似性   平均水平</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;value1&#x27;</span>:np.random.rand(<span class="hljs-number">10</span>)*<span class="hljs-number">100</span>,<br>                  <span class="hljs-string">&#x27;value2&#x27;</span>:np.random.rand(<span class="hljs-number">10</span>)*<span class="hljs-number">100</span>&#125;)<br><span class="hljs-built_in">print</span>(df.head())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---&#x27;</span>)<br><span class="hljs-comment">#  创建数据</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f_z</span>(<span class="hljs-params">df,*cols</span>):</span><br>    df_n = df.copy()<br>    <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> cols:<br>        u = df_n[col].mean()<br>        std = df_n[col].std()<br>        df_n[col+<span class="hljs-string">&#x27;_zn&#x27;</span>] = (df_n[col]  -u) / std<br>    <span class="hljs-keyword">return</span>(df_n)<br>df_z = f_z(df,<span class="hljs-string">&#x27;value1&#x27;</span>,<span class="hljs-string">&#x27;value2&#x27;</span>)<br>u_z = df_z[<span class="hljs-string">&#x27;value1_zn&#x27;</span>].mean()<br>std_z = df_z[<span class="hljs-string">&#x27;value2_zn&#x27;</span>].std()<br><span class="hljs-built_in">print</span>(df_z)<br></code></pre></td></tr></table></figure><h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><h5 id="八类产品两个指标value1（权重为0-6），value2（权重为0-4），"><a href="#八类产品两个指标value1（权重为0-6），value2（权重为0-4），" class="headerlink" title="八类产品两个指标value1（权重为0.6），value2（权重为0.4），"></a>八类产品两个指标value1（权重为0.6），value2（权重为0.4），</h5><h5 id="判断哪一个产品指标状况最好"><a href="#判断哪一个产品指标状况最好" class="headerlink" title="判断哪一个产品指标状况最好"></a>判断哪一个产品指标状况最好</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;value1&#x27;</span>:np.random.rand(<span class="hljs-number">10</span>)*<span class="hljs-number">30</span>,<br>                  <span class="hljs-string">&#x27;value2&#x27;</span>:np.random.rand(<span class="hljs-number">10</span>)*<span class="hljs-number">100</span>&#125;,<br>                 index  = <span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;ABCDEFGHIJ&#x27;</span>))<br><span class="hljs-built_in">print</span>(df.head())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---&#x27;</span>)<br><span class="hljs-comment">#  创建数据</span><br><br>df_n = f(df,<span class="hljs-string">&#x27;value1&#x27;</span>,<span class="hljs-string">&#x27;value2&#x27;</span>)<br><span class="hljs-comment"># 进行数据标准化处理</span><br><br>df_n[<span class="hljs-string">&#x27;f&#x27;</span>] = df_n[<span class="hljs-string">&#x27;value1_n&#x27;</span>] *<span class="hljs-number">0.6</span> + df_n[<span class="hljs-string">&#x27;value2_n&#x27;</span>]*<span class="hljs-number">0.4</span><br>df_n.sort_values(by = <span class="hljs-string">&#x27;f&#x27;</span>,inplace =<span class="hljs-literal">True</span>,ascending = <span class="hljs-literal">False</span>)<br>df_n[<span class="hljs-string">&#x27;f&#x27;</span>].plot(kind=<span class="hljs-string">&#x27;line&#x27;</span>,style = <span class="hljs-string">&#x27;--.&#x27;</span>,alpha=<span class="hljs-number">0.8</span>,grid=<span class="hljs-literal">True</span>)<br>df_n<br><span class="hljs-comment"># 查看综合指标状况</span><br></code></pre></td></tr></table></figure><h3 id="四、连续数据离散值处理"><a href="#四、连续数据离散值处理" class="headerlink" title="四、连续数据离散值处理"></a>四、连续数据离散值处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> stats<br>%matplotlib inline<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  等宽法 - 将数据均匀划分为n份，每份的间距相等</span><br><span class="hljs-comment"># cut方法</span><br><br>ages = [<span class="hljs-number">20</span>,<span class="hljs-number">22</span>,<span class="hljs-number">25</span>,<span class="hljs-number">27</span>,<span class="hljs-number">21</span>,<span class="hljs-number">37</span>,<span class="hljs-number">31</span>,<span class="hljs-number">61</span>,<span class="hljs-number">45</span>,<span class="hljs-number">41</span>,<span class="hljs-number">32</span>]<br><span class="hljs-comment">#  有一组年龄数据，将这些数据划分为‘18-25’  ‘26-35’  ‘36-60’  ‘60以上’  几个面元</span><br><br>bins = [<span class="hljs-number">18</span>,<span class="hljs-number">25</span>,<span class="hljs-number">35</span>,<span class="hljs-number">60</span>,<span class="hljs-number">100</span>]<br>cats = pd.cut(ages,bins)<br><span class="hljs-built_in">print</span>(cats,<span class="hljs-built_in">type</span>(cats))<br><br><span class="hljs-built_in">print</span>(cats.codes,<span class="hljs-built_in">type</span>(cats.codes))   <span class="hljs-comment">#  0-3对应分组后的四个区间</span><br><span class="hljs-built_in">print</span>(cats.categories,<span class="hljs-built_in">type</span>(cats.categories))   <span class="hljs-comment">#  四个区间，结果为index</span><br><span class="hljs-built_in">print</span>(pd.value_counts(cats))  <span class="hljs-comment">#  按照区间计数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(pd.cut(ages,bins,right = <span class="hljs-literal">False</span>))  <span class="hljs-comment">#  左闭右开</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;ages&#x27;</span>:ages&#125;)<br>group_names = [<span class="hljs-string">&#x27;Youth&#x27;</span>,<span class="hljs-string">&#x27;YoungAdult&#x27;</span>,<span class="hljs-string">&#x27;MiddleAged&#x27;</span>,<span class="hljs-string">&#x27;Senior&#x27;</span>]<br>s = pd.cut(df[<span class="hljs-string">&#x27;ages&#x27;</span>],bins)<br>df[<span class="hljs-string">&#x27;ages_a&#x27;</span>] = s<br>cut_counts = s.value_counts(sort = <span class="hljs-literal">False</span>)<br>cut_counts<br><br><br><span class="hljs-comment">#  散点图格式化</span><br>plt.scatter(df.index,df[<span class="hljs-string">&#x27;ages&#x27;</span>],cmap = <span class="hljs-string">&#x27;Reds&#x27;</span>,c = cats.codes)<br>plt.grid()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  等频法 - 以相同数量的记录放进每个区间</span><br><span class="hljs-comment"># qcut 方法</span><br><br>data = np.random.rand(<span class="hljs-number">1000</span>)<br>s = pd.Series(data)<br><span class="hljs-built_in">print</span>(s.head())<br>cats = pd.qcut(s,<span class="hljs-number">4</span>)   <span class="hljs-comment">#  按四分位分数进行切割，可以试试pd.qcut(data,10)</span><br><span class="hljs-built_in">print</span>(cats.head())<br><span class="hljs-built_in">print</span>(pd.value_counts(cats))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---&#x27;</span>)<br><span class="hljs-comment">#  不能保证每个面元都有相等的个数</span><br><span class="hljs-comment">#   也可以自定义</span><br><br>plt.scatter(s.index,s,cmap = <span class="hljs-string">&#x27;Greens&#x27;</span>,c = pd.qcut(data,<span class="hljs-number">4</span>).codes)<br>plt.xlim([<span class="hljs-number">0</span>,<span class="hljs-number">1000</span>])<br>plt.grid()<br><span class="hljs-comment">#  颜色按照codes分类</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python+机器学习+数据分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据分析-人的寿命</title>
    <link href="/2022/07/15/%E4%BA%BA%E7%9A%84%E5%AF%BF%E5%91%BD%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    <url>/2022/07/15/%E4%BA%BA%E7%9A%84%E5%AF%BF%E5%91%BD%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> mpl_toolkits.mplot3d <span class="hljs-keyword">import</span> Axes3D<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">life = pd.read_csv(<span class="hljs-string">&#x27;C:/Users/86155/Desktop/Life Expectancy Data.csv&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">life.head()<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Country</th>      <th>Year</th>      <th>Status</th>      <th>Life expectancy</th>      <th>Adult Mortality</th>      <th>infant deaths</th>      <th>Alcohol</th>      <th>percentage expenditure</th>      <th>Hepatitis B</th>      <th>Measles</th>      <th>...</th>      <th>Polio</th>      <th>Total expenditure</th>      <th>Diphtheria</th>      <th>HIV/AIDS</th>      <th>GDP</th>      <th>Population</th>      <th>thinness  1-19 years</th>      <th>thinness 5-9 years</th>      <th>Income composition of resources</th>      <th>Schooling</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Afghanistan</td>      <td>2015</td>      <td>Developing</td>      <td>65.0</td>      <td>263.0</td>      <td>62</td>      <td>0.01</td>      <td>71.279624</td>      <td>65.0</td>      <td>1154</td>      <td>...</td>      <td>6.0</td>      <td>8.16</td>      <td>65.0</td>      <td>0.1</td>      <td>584.259210</td>      <td>33736494.0</td>      <td>17.2</td>      <td>17.3</td>      <td>0.479</td>      <td>10.1</td>    </tr>    <tr>      <th>1</th>      <td>Afghanistan</td>      <td>2014</td>      <td>Developing</td>      <td>59.9</td>      <td>271.0</td>      <td>64</td>      <td>0.01</td>      <td>73.523582</td>      <td>62.0</td>      <td>492</td>      <td>...</td>      <td>58.0</td>      <td>8.18</td>      <td>62.0</td>      <td>0.1</td>      <td>612.696514</td>      <td>327582.0</td>      <td>17.5</td>      <td>17.5</td>      <td>0.476</td>      <td>10.0</td>    </tr>    <tr>      <th>2</th>      <td>Afghanistan</td>      <td>2013</td>      <td>Developing</td>      <td>59.9</td>      <td>268.0</td>      <td>66</td>      <td>0.01</td>      <td>73.219243</td>      <td>64.0</td>      <td>430</td>      <td>...</td>      <td>62.0</td>      <td>8.13</td>      <td>64.0</td>      <td>0.1</td>      <td>631.744976</td>      <td>31731688.0</td>      <td>17.7</td>      <td>17.7</td>      <td>0.470</td>      <td>9.9</td>    </tr>    <tr>      <th>3</th>      <td>Afghanistan</td>      <td>2012</td>      <td>Developing</td>      <td>59.5</td>      <td>272.0</td>      <td>69</td>      <td>0.01</td>      <td>78.184215</td>      <td>67.0</td>      <td>2787</td>      <td>...</td>      <td>67.0</td>      <td>8.52</td>      <td>67.0</td>      <td>0.1</td>      <td>669.959000</td>      <td>3696958.0</td>      <td>17.9</td>      <td>18.0</td>      <td>0.463</td>      <td>9.8</td>    </tr>    <tr>      <th>4</th>      <td>Afghanistan</td>      <td>2011</td>      <td>Developing</td>      <td>59.2</td>      <td>275.0</td>      <td>71</td>      <td>0.01</td>      <td>7.097109</td>      <td>68.0</td>      <td>3013</td>      <td>...</td>      <td>68.0</td>      <td>7.87</td>      <td>68.0</td>      <td>0.1</td>      <td>63.537231</td>      <td>2978599.0</td>      <td>18.2</td>      <td>18.2</td>      <td>0.454</td>      <td>9.5</td>    </tr>  </tbody></table><p>5 rows × 22 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">life.describe()<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Year</th>      <th>Life expectancy</th>      <th>Adult Mortality</th>      <th>infant deaths</th>      <th>Alcohol</th>      <th>percentage expenditure</th>      <th>Hepatitis B</th>      <th>Measles</th>      <th>BMI</th>      <th>under-five deaths</th>      <th>Polio</th>      <th>Total expenditure</th>      <th>Diphtheria</th>      <th>HIV/AIDS</th>      <th>GDP</th>      <th>Population</th>      <th>thinness  1-19 years</th>      <th>thinness 5-9 years</th>      <th>Income composition of resources</th>      <th>Schooling</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>2938.000000</td>      <td>2928.000000</td>      <td>2928.000000</td>      <td>2938.000000</td>      <td>2744.000000</td>      <td>2938.000000</td>      <td>2385.000000</td>      <td>2938.000000</td>      <td>2904.000000</td>      <td>2938.000000</td>      <td>2919.000000</td>      <td>2712.00000</td>      <td>2919.000000</td>      <td>2938.000000</td>      <td>2490.000000</td>      <td>2.286000e+03</td>      <td>2904.000000</td>      <td>2904.000000</td>      <td>2771.000000</td>      <td>2775.000000</td>    </tr>    <tr>      <th>mean</th>      <td>2007.518720</td>      <td>69.224932</td>      <td>164.796448</td>      <td>30.303948</td>      <td>4.602861</td>      <td>738.251295</td>      <td>80.940461</td>      <td>2419.592240</td>      <td>38.321247</td>      <td>42.035739</td>      <td>82.550188</td>      <td>5.93819</td>      <td>82.324084</td>      <td>1.742103</td>      <td>7483.158469</td>      <td>1.275338e+07</td>      <td>4.839704</td>      <td>4.870317</td>      <td>0.627551</td>      <td>11.992793</td>    </tr>    <tr>      <th>std</th>      <td>4.613841</td>      <td>9.523867</td>      <td>124.292079</td>      <td>117.926501</td>      <td>4.052413</td>      <td>1987.914858</td>      <td>25.070016</td>      <td>11467.272489</td>      <td>20.044034</td>      <td>160.445548</td>      <td>23.428046</td>      <td>2.49832</td>      <td>23.716912</td>      <td>5.077785</td>      <td>14270.169342</td>      <td>6.101210e+07</td>      <td>4.420195</td>      <td>4.508882</td>      <td>0.210904</td>      <td>3.358920</td>    </tr>    <tr>      <th>min</th>      <td>2000.000000</td>      <td>36.300000</td>      <td>1.000000</td>      <td>0.000000</td>      <td>0.010000</td>      <td>0.000000</td>      <td>1.000000</td>      <td>0.000000</td>      <td>1.000000</td>      <td>0.000000</td>      <td>3.000000</td>      <td>0.37000</td>      <td>2.000000</td>      <td>0.100000</td>      <td>1.681350</td>      <td>3.400000e+01</td>      <td>0.100000</td>      <td>0.100000</td>      <td>0.000000</td>      <td>0.000000</td>    </tr>    <tr>      <th>25%</th>      <td>2004.000000</td>      <td>63.100000</td>      <td>74.000000</td>      <td>0.000000</td>      <td>0.877500</td>      <td>4.685343</td>      <td>77.000000</td>      <td>0.000000</td>      <td>19.300000</td>      <td>0.000000</td>      <td>78.000000</td>      <td>4.26000</td>      <td>78.000000</td>      <td>0.100000</td>      <td>463.935626</td>      <td>1.957932e+05</td>      <td>1.600000</td>      <td>1.500000</td>      <td>0.493000</td>      <td>10.100000</td>    </tr>    <tr>      <th>50%</th>      <td>2008.000000</td>      <td>72.100000</td>      <td>144.000000</td>      <td>3.000000</td>      <td>3.755000</td>      <td>64.912906</td>      <td>92.000000</td>      <td>17.000000</td>      <td>43.500000</td>      <td>4.000000</td>      <td>93.000000</td>      <td>5.75500</td>      <td>93.000000</td>      <td>0.100000</td>      <td>1766.947595</td>      <td>1.386542e+06</td>      <td>3.300000</td>      <td>3.300000</td>      <td>0.677000</td>      <td>12.300000</td>    </tr>    <tr>      <th>75%</th>      <td>2012.000000</td>      <td>75.700000</td>      <td>228.000000</td>      <td>22.000000</td>      <td>7.702500</td>      <td>441.534144</td>      <td>97.000000</td>      <td>360.250000</td>      <td>56.200000</td>      <td>28.000000</td>      <td>97.000000</td>      <td>7.49250</td>      <td>97.000000</td>      <td>0.800000</td>      <td>5910.806335</td>      <td>7.420359e+06</td>      <td>7.200000</td>      <td>7.200000</td>      <td>0.779000</td>      <td>14.300000</td>    </tr>    <tr>      <th>max</th>      <td>2015.000000</td>      <td>89.000000</td>      <td>723.000000</td>      <td>1800.000000</td>      <td>17.870000</td>      <td>19479.911610</td>      <td>99.000000</td>      <td>212183.000000</td>      <td>87.300000</td>      <td>2500.000000</td>      <td>99.000000</td>      <td>17.60000</td>      <td>99.000000</td>      <td>50.600000</td>      <td>119172.741800</td>      <td>1.293859e+09</td>      <td>27.700000</td>      <td>28.600000</td>      <td>0.948000</td>      <td>20.700000</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">life.info()<br></code></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 2938 entries, 0 to 2937Data columns (total 22 columns): #   Column                           Non-Null Count  Dtype  ---  ------                           --------------  -----   0   Country                          2938 non-null   object  1   Year                             2938 non-null   int64   2   Status                           2938 non-null   object  3   Life expectancy                  2928 non-null   float64 4   Adult Mortality                  2928 non-null   float64 5   infant deaths                    2938 non-null   int64   6   Alcohol                          2744 non-null   float64 7   percentage expenditure           2938 non-null   float64 8   Hepatitis B                      2385 non-null   float64 9   Measles                          2938 non-null   int64   10   BMI                             2904 non-null   float64 11  under-five deaths                2938 non-null   int64   12  Polio                            2919 non-null   float64 13  Total expenditure                2712 non-null   float64 14  Diphtheria                       2919 non-null   float64 15   HIV/AIDS                        2938 non-null   float64 16  GDP                              2490 non-null   float64 17  Population                       2286 non-null   float64 18   thinness  1-19 years            2904 non-null   float64 19   thinness 5-9 years              2904 non-null   float64 20  Income composition of resources  2771 non-null   float64 21  Schooling                        2775 non-null   float64dtypes: float64(16), int64(4), object(2)memory usage: 505.1+ KB</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">life.isnull().<span class="hljs-built_in">sum</span>()<br></code></pre></td></tr></table></figure><pre><code>Country                              0Year                                 0Status                               0Life expectancy                     10Adult Mortality                     10infant deaths                        0Alcohol                            194percentage expenditure               0Hepatitis B                        553Measles                              0 BMI                                34under-five deaths                    0Polio                               19Total expenditure                  226Diphtheria                          19 HIV/AIDS                            0GDP                                448Population                         652 thinness  1-19 years               34 thinness 5-9 years                 34Income composition of resources    167Schooling                          163dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  数据缺失值填补</span><br><br><span class="hljs-keyword">from</span> sklearn.impute <span class="hljs-keyword">import</span> SimpleImputer<br>imputer = SimpleImputer(missing_values=np.nan, strategy=<span class="hljs-string">&#x27;median&#x27;</span>)<br>imputer.fit(life.iloc[:, <span class="hljs-number">3</span>:])<br>life.iloc[:, <span class="hljs-number">3</span>:]=imputer.transform(life.iloc[:, <span class="hljs-number">3</span>:])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  观察数据中的空值的总和</span><br><br>life.isnull().<span class="hljs-built_in">sum</span>()<br></code></pre></td></tr></table></figure><pre><code>Country                             0Year                                0Status                              0Life expectancy                    10Adult Mortality                     0infant deaths                       0Alcohol                             0percentage expenditure              0Hepatitis B                         0Measles                             0 BMI                                0under-five deaths                   0Polio                               0Total expenditure                   0Diphtheria                          0 HIV/AIDS                           0GDP                                 0Population                          0 thinness  1-19 years               0 thinness 5-9 years                 0Income composition of resources     0Schooling                           0dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">life.describe()<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Year</th>      <th>Life expectancy</th>      <th>Adult Mortality</th>      <th>infant deaths</th>      <th>Alcohol</th>      <th>percentage expenditure</th>      <th>Hepatitis B</th>      <th>Measles</th>      <th>BMI</th>      <th>under-five deaths</th>      <th>Polio</th>      <th>Total expenditure</th>      <th>Diphtheria</th>      <th>HIV/AIDS</th>      <th>GDP</th>      <th>Population</th>      <th>thinness  1-19 years</th>      <th>thinness 5-9 years</th>      <th>Income composition of resources</th>      <th>Schooling</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>2938.000000</td>      <td>2938.000000</td>      <td>2938.000000</td>      <td>2938.000000</td>      <td>2938.000000</td>      <td>2938.000000</td>      <td>2938.000000</td>      <td>2938.000000</td>      <td>2938.000000</td>      <td>2938.000000</td>      <td>2938.000000</td>      <td>2938.000000</td>      <td>2938.000000</td>      <td>2938.000000</td>      <td>2938.000000</td>      <td>2.938000e+03</td>      <td>2938.000000</td>      <td>2938.000000</td>      <td>2938.000000</td>      <td>2938.000000</td>    </tr>    <tr>      <th>mean</th>      <td>2007.518720</td>      <td>69.234717</td>      <td>164.725664</td>      <td>30.303948</td>      <td>4.546875</td>      <td>738.251295</td>      <td>83.022124</td>      <td>2419.592240</td>      <td>38.381178</td>      <td>42.035739</td>      <td>82.617767</td>      <td>5.924098</td>      <td>82.393125</td>      <td>1.742103</td>      <td>6611.523863</td>      <td>1.023085e+07</td>      <td>4.821886</td>      <td>4.852144</td>      <td>0.630362</td>      <td>12.009837</td>    </tr>    <tr>      <th>std</th>      <td>4.613841</td>      <td>9.509115</td>      <td>124.086215</td>      <td>117.926501</td>      <td>3.921946</td>      <td>1987.914858</td>      <td>22.996984</td>      <td>11467.272489</td>      <td>19.935375</td>      <td>160.445548</td>      <td>23.367166</td>      <td>2.400770</td>      <td>23.655562</td>      <td>5.077785</td>      <td>13296.603449</td>      <td>5.402242e+07</td>      <td>4.397621</td>      <td>4.485854</td>      <td>0.205140</td>      <td>3.265139</td>    </tr>    <tr>      <th>min</th>      <td>2000.000000</td>      <td>36.300000</td>      <td>1.000000</td>      <td>0.000000</td>      <td>0.010000</td>      <td>0.000000</td>      <td>1.000000</td>      <td>0.000000</td>      <td>1.000000</td>      <td>0.000000</td>      <td>3.000000</td>      <td>0.370000</td>      <td>2.000000</td>      <td>0.100000</td>      <td>1.681350</td>      <td>3.400000e+01</td>      <td>0.100000</td>      <td>0.100000</td>      <td>0.000000</td>      <td>0.000000</td>    </tr>    <tr>      <th>25%</th>      <td>2004.000000</td>      <td>63.200000</td>      <td>74.000000</td>      <td>0.000000</td>      <td>1.092500</td>      <td>4.685343</td>      <td>82.000000</td>      <td>0.000000</td>      <td>19.400000</td>      <td>0.000000</td>      <td>78.000000</td>      <td>4.370000</td>      <td>78.000000</td>      <td>0.100000</td>      <td>580.486996</td>      <td>4.189172e+05</td>      <td>1.600000</td>      <td>1.600000</td>      <td>0.504250</td>      <td>10.300000</td>    </tr>    <tr>      <th>50%</th>      <td>2008.000000</td>      <td>72.100000</td>      <td>144.000000</td>      <td>3.000000</td>      <td>3.755000</td>      <td>64.912906</td>      <td>92.000000</td>      <td>17.000000</td>      <td>43.500000</td>      <td>4.000000</td>      <td>93.000000</td>      <td>5.755000</td>      <td>93.000000</td>      <td>0.100000</td>      <td>1766.947595</td>      <td>1.386542e+06</td>      <td>3.300000</td>      <td>3.300000</td>      <td>0.677000</td>      <td>12.300000</td>    </tr>    <tr>      <th>75%</th>      <td>2012.000000</td>      <td>75.600000</td>      <td>227.000000</td>      <td>22.000000</td>      <td>7.390000</td>      <td>441.534144</td>      <td>96.000000</td>      <td>360.250000</td>      <td>56.100000</td>      <td>28.000000</td>      <td>97.000000</td>      <td>7.330000</td>      <td>97.000000</td>      <td>0.800000</td>      <td>4779.405190</td>      <td>4.584371e+06</td>      <td>7.100000</td>      <td>7.200000</td>      <td>0.772000</td>      <td>14.100000</td>    </tr>    <tr>      <th>max</th>      <td>2015.000000</td>      <td>89.000000</td>      <td>723.000000</td>      <td>1800.000000</td>      <td>17.870000</td>      <td>19479.911610</td>      <td>99.000000</td>      <td>212183.000000</td>      <td>87.300000</td>      <td>2500.000000</td>      <td>99.000000</td>      <td>17.600000</td>      <td>99.000000</td>      <td>50.600000</td>      <td>119172.741800</td>      <td>1.293859e+09</td>      <td>27.700000</td>      <td>28.600000</td>      <td>0.948000</td>      <td>20.700000</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">life.head()<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Country</th>      <th>Year</th>      <th>Status</th>      <th>Life expectancy</th>      <th>Adult Mortality</th>      <th>infant deaths</th>      <th>Alcohol</th>      <th>percentage expenditure</th>      <th>Hepatitis B</th>      <th>Measles</th>      <th>...</th>      <th>Polio</th>      <th>Total expenditure</th>      <th>Diphtheria</th>      <th>HIV/AIDS</th>      <th>GDP</th>      <th>Population</th>      <th>thinness  1-19 years</th>      <th>thinness 5-9 years</th>      <th>Income composition of resources</th>      <th>Schooling</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Afghanistan</td>      <td>2015</td>      <td>Developing</td>      <td>65.0</td>      <td>263.0</td>      <td>62.0</td>      <td>0.01</td>      <td>71.279624</td>      <td>65.0</td>      <td>1154.0</td>      <td>...</td>      <td>6.0</td>      <td>8.16</td>      <td>65.0</td>      <td>0.1</td>      <td>584.259210</td>      <td>33736494.0</td>      <td>17.2</td>      <td>17.3</td>      <td>0.479</td>      <td>10.1</td>    </tr>    <tr>      <th>1</th>      <td>Afghanistan</td>      <td>2014</td>      <td>Developing</td>      <td>59.9</td>      <td>271.0</td>      <td>64.0</td>      <td>0.01</td>      <td>73.523582</td>      <td>62.0</td>      <td>492.0</td>      <td>...</td>      <td>58.0</td>      <td>8.18</td>      <td>62.0</td>      <td>0.1</td>      <td>612.696514</td>      <td>327582.0</td>      <td>17.5</td>      <td>17.5</td>      <td>0.476</td>      <td>10.0</td>    </tr>    <tr>      <th>2</th>      <td>Afghanistan</td>      <td>2013</td>      <td>Developing</td>      <td>59.9</td>      <td>268.0</td>      <td>66.0</td>      <td>0.01</td>      <td>73.219243</td>      <td>64.0</td>      <td>430.0</td>      <td>...</td>      <td>62.0</td>      <td>8.13</td>      <td>64.0</td>      <td>0.1</td>      <td>631.744976</td>      <td>31731688.0</td>      <td>17.7</td>      <td>17.7</td>      <td>0.470</td>      <td>9.9</td>    </tr>    <tr>      <th>3</th>      <td>Afghanistan</td>      <td>2012</td>      <td>Developing</td>      <td>59.5</td>      <td>272.0</td>      <td>69.0</td>      <td>0.01</td>      <td>78.184215</td>      <td>67.0</td>      <td>2787.0</td>      <td>...</td>      <td>67.0</td>      <td>8.52</td>      <td>67.0</td>      <td>0.1</td>      <td>669.959000</td>      <td>3696958.0</td>      <td>17.9</td>      <td>18.0</td>      <td>0.463</td>      <td>9.8</td>    </tr>    <tr>      <th>4</th>      <td>Afghanistan</td>      <td>2011</td>      <td>Developing</td>      <td>59.2</td>      <td>275.0</td>      <td>71.0</td>      <td>0.01</td>      <td>7.097109</td>      <td>68.0</td>      <td>3013.0</td>      <td>...</td>      <td>68.0</td>      <td>7.87</td>      <td>68.0</td>      <td>0.1</td>      <td>63.537231</td>      <td>2978599.0</td>      <td>18.2</td>      <td>18.2</td>      <td>0.454</td>      <td>9.5</td>    </tr>  </tbody></table><p>5 rows × 22 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  去除完全重复的行数据</span><br><br>life.drop_duplicates(inplace = <span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">life.columns<br></code></pre></td></tr></table></figure><pre><code>Index([&#39;Country&#39;, &#39;Year&#39;, &#39;Status&#39;, &#39;Life expectancy &#39;, &#39;Adult Mortality&#39;,       &#39;infant deaths&#39;, &#39;Alcohol&#39;, &#39;percentage expenditure&#39;, &#39;Hepatitis B&#39;,       &#39;Measles &#39;, &#39; BMI &#39;, &#39;under-five deaths &#39;, &#39;Polio&#39;, &#39;Total expenditure&#39;,       &#39;Diphtheria &#39;, &#39; HIV/AIDS&#39;, &#39;GDP&#39;, &#39;Population&#39;,       &#39; thinness  1-19 years&#39;, &#39; thinness 5-9 years&#39;,       &#39;Income composition of resources&#39;, &#39;Schooling&#39;],      dtype=&#39;object&#39;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = life[[<span class="hljs-string">&#x27;Country&#x27;</span>, <span class="hljs-string">&#x27;Year&#x27;</span>, <span class="hljs-string">&#x27;Status&#x27;</span>, <span class="hljs-string">&#x27;Life expectancy &#x27;</span>, <span class="hljs-string">&#x27;Adult Mortality&#x27;</span>,<br>       <span class="hljs-string">&#x27;infant deaths&#x27;</span>]]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sns.pairplot(a)<br></code></pre></td></tr></table></figure><pre><code>&lt;seaborn.axisgrid.PairGrid at 0x1387c388bb0&gt;</code></pre><p><a href="https://postimg.cc/QBNsk10Q"><img src="https://i.postimg.cc/tgWTbz6M/output-14-1.png" alt="output-14-1.png"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">b = life[[<span class="hljs-string">&#x27;Alcohol&#x27;</span>, <span class="hljs-string">&#x27;percentage expenditure&#x27;</span>, <span class="hljs-string">&#x27;Hepatitis B&#x27;</span>,<br>       <span class="hljs-string">&#x27;Measles &#x27;</span>, <span class="hljs-string">&#x27; BMI &#x27;</span>, <span class="hljs-string">&#x27;under-five deaths &#x27;</span>, <span class="hljs-string">&#x27;Life expectancy &#x27;</span>]]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sns.pairplot(b)<br></code></pre></td></tr></table></figure><pre><code>&lt;seaborn.axisgrid.PairGrid at 0x1387d22be80&gt;</code></pre><p><a href="https://postimg.cc/DSnKn1V9"><img src="https://i.postimg.cc/Hk7W0t6k/output-16-1.png" alt="output-16-1.png"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">c = life[[ <span class="hljs-string">&#x27;Polio&#x27;</span>, <span class="hljs-string">&#x27;Total expenditure&#x27;</span>,<span class="hljs-string">&#x27;Diphtheria &#x27;</span>, <span class="hljs-string">&#x27; HIV/AIDS&#x27;</span>, <span class="hljs-string">&#x27;GDP&#x27;</span>, <span class="hljs-string">&#x27;Life expectancy &#x27;</span>]]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sns.pairplot(c)<br></code></pre></td></tr></table></figure><pre><code>&lt;seaborn.axisgrid.PairGrid at 0x1387d305fd0&gt;</code></pre><p><a href="https://postimg.cc/PPngQ1qC"><img src="https://i.postimg.cc/QxFjsbGJ/output-18-1.png" alt="output-18-1.png"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">e = life[[<span class="hljs-string">&#x27;Population&#x27;</span>,<br>       <span class="hljs-string">&#x27; thinness  1-19 years&#x27;</span>, <span class="hljs-string">&#x27; thinness 5-9 years&#x27;</span>,<br>       <span class="hljs-string">&#x27;Income composition of resources&#x27;</span>, <span class="hljs-string">&#x27;Schooling&#x27;</span>,<span class="hljs-string">&#x27;Life expectancy &#x27;</span>]]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sns.pairplot(e)<br></code></pre></td></tr></table></figure><pre><code>&lt;seaborn.axisgrid.PairGrid at 0x13803724460&gt;</code></pre><p><a href="https://postimg.cc/FdJ6jK5b"><img src="https://i.postimg.cc/tTrHG1Bc/output-20-1.png" alt="output-20-1.png"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.figure(figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">16</span>))<br>sns.heatmap(life.corr(), annot= <span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x138076038b0&gt;</code></pre><p><a href="https://postimg.cc/pyfGx42d"><img src="https://i.postimg.cc/rybvG235/output-21-1.png" alt="output-21-1.png"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  成人死亡率对预期寿命的影响大于婴儿死亡率。</span><br><br><span class="hljs-comment"># 婴儿死亡率与预期寿命的相关 =-0.2</span><br><span class="hljs-comment"># 成人死亡率与预期寿命的相关 =-0.7</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 身体质量指数又称体重指数，意思是人们健康的饮食习惯、生活方式、锻炼方式对日常生活有很好的影响。</span><br><span class="hljs-comment"># 另外，bmi 指数与预期寿命呈正相关，酒精与预期寿命呈正相关。对于吸烟，没有给出数据，但根据经验法则，我可以说吸烟与预期寿命呈负相关。</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  学校教育对人类寿命有正向影响，正相关系数为0.71</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  酒精与预期寿命呈正相关，相关系数为0.4</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"> <br><span class="hljs-comment">#  免疫接种与生命期限呈正相关。</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  人口和预期寿命之间存在负相关。随着人口增长，预期寿命减少，因为在那个国家的每个人都不能从政府那里得到医疗福利。</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  实际影响预期寿命的因素</span><br><br><span class="hljs-comment"># 百分比支出的中位数</span><br>life[<span class="hljs-string">&#x27;percentage expenditure&#x27;</span>].median()<br></code></pre></td></tr></table></figure><pre><code>64.912906045</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">o = life.loc[life[<span class="hljs-string">&#x27;Life expectancy &#x27;</span>] &lt;<span class="hljs-number">65</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">o.head()<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Country</th>      <th>Year</th>      <th>Status</th>      <th>Life expectancy</th>      <th>Adult Mortality</th>      <th>infant deaths</th>      <th>Alcohol</th>      <th>percentage expenditure</th>      <th>Hepatitis B</th>      <th>Measles</th>      <th>...</th>      <th>Polio</th>      <th>Total expenditure</th>      <th>Diphtheria</th>      <th>HIV/AIDS</th>      <th>GDP</th>      <th>Population</th>      <th>thinness  1-19 years</th>      <th>thinness 5-9 years</th>      <th>Income composition of resources</th>      <th>Schooling</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>Afghanistan</td>      <td>2014</td>      <td>Developing</td>      <td>59.9</td>      <td>271.0</td>      <td>64</td>      <td>0.01</td>      <td>73.523582</td>      <td>62.0</td>      <td>492</td>      <td>...</td>      <td>58.0</td>      <td>8.18</td>      <td>62.0</td>      <td>0.1</td>      <td>612.696514</td>      <td>327582.0</td>      <td>17.5</td>      <td>17.5</td>      <td>0.476</td>      <td>10.0</td>    </tr>    <tr>      <th>2</th>      <td>Afghanistan</td>      <td>2013</td>      <td>Developing</td>      <td>59.9</td>      <td>268.0</td>      <td>66</td>      <td>0.01</td>      <td>73.219243</td>      <td>64.0</td>      <td>430</td>      <td>...</td>      <td>62.0</td>      <td>8.13</td>      <td>64.0</td>      <td>0.1</td>      <td>631.744976</td>      <td>31731688.0</td>      <td>17.7</td>      <td>17.7</td>      <td>0.470</td>      <td>9.9</td>    </tr>    <tr>      <th>3</th>      <td>Afghanistan</td>      <td>2012</td>      <td>Developing</td>      <td>59.5</td>      <td>272.0</td>      <td>69</td>      <td>0.01</td>      <td>78.184215</td>      <td>67.0</td>      <td>2787</td>      <td>...</td>      <td>67.0</td>      <td>8.52</td>      <td>67.0</td>      <td>0.1</td>      <td>669.959000</td>      <td>3696958.0</td>      <td>17.9</td>      <td>18.0</td>      <td>0.463</td>      <td>9.8</td>    </tr>    <tr>      <th>4</th>      <td>Afghanistan</td>      <td>2011</td>      <td>Developing</td>      <td>59.2</td>      <td>275.0</td>      <td>71</td>      <td>0.01</td>      <td>7.097109</td>      <td>68.0</td>      <td>3013</td>      <td>...</td>      <td>68.0</td>      <td>7.87</td>      <td>68.0</td>      <td>0.1</td>      <td>63.537231</td>      <td>2978599.0</td>      <td>18.2</td>      <td>18.2</td>      <td>0.454</td>      <td>9.5</td>    </tr>    <tr>      <th>5</th>      <td>Afghanistan</td>      <td>2010</td>      <td>Developing</td>      <td>58.8</td>      <td>279.0</td>      <td>74</td>      <td>0.01</td>      <td>79.679367</td>      <td>66.0</td>      <td>1989</td>      <td>...</td>      <td>66.0</td>      <td>9.20</td>      <td>66.0</td>      <td>0.1</td>      <td>553.328940</td>      <td>2883167.0</td>      <td>18.4</td>      <td>18.4</td>      <td>0.448</td>      <td>9.2</td>    </tr>  </tbody></table><p>5 rows × 22 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">o.describe()<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Year</th>      <th>Life expectancy</th>      <th>Adult Mortality</th>      <th>infant deaths</th>      <th>Alcohol</th>      <th>percentage expenditure</th>      <th>Hepatitis B</th>      <th>Measles</th>      <th>BMI</th>      <th>under-five deaths</th>      <th>Polio</th>      <th>Total expenditure</th>      <th>Diphtheria</th>      <th>HIV/AIDS</th>      <th>GDP</th>      <th>Population</th>      <th>thinness  1-19 years</th>      <th>thinness 5-9 years</th>      <th>Income composition of resources</th>      <th>Schooling</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>851.000000</td>      <td>851.000000</td>      <td>851.000000</td>      <td>851.000000</td>      <td>851.000000</td>      <td>851.000000</td>      <td>851.000000</td>      <td>851.000000</td>      <td>851.000000</td>      <td>851.000000</td>      <td>851.000000</td>      <td>851.000000</td>      <td>851.000000</td>      <td>851.000000</td>      <td>851.000000</td>      <td>8.510000e+02</td>      <td>851.000000</td>      <td>851.00000</td>      <td>851.000000</td>      <td>851.000000</td>    </tr>    <tr>      <th>mean</th>      <td>2006.819036</td>      <td>56.717979</td>      <td>282.206816</td>      <td>64.045828</td>      <td>2.732844</td>      <td>72.750935</td>      <td>76.294947</td>      <td>4755.605170</td>      <td>22.198590</td>      <td>94.283196</td>      <td>66.230317</td>      <td>5.382127</td>      <td>65.615746</td>      <td>5.493537</td>      <td>1148.534646</td>      <td>1.212722e+07</td>      <td>7.688484</td>      <td>7.66839</td>      <td>0.438837</td>      <td>8.830787</td>    </tr>    <tr>      <th>std</th>      <td>4.564844</td>      <td>5.618431</td>      <td>150.316652</td>      <td>169.930696</td>      <td>2.727926</td>      <td>168.242431</td>      <td>24.938488</td>      <td>16995.691061</td>      <td>11.521692</td>      <td>235.109718</td>      <td>26.326655</td>      <td>2.129323</td>      <td>27.054876</td>      <td>8.290629</td>      <td>1963.526909</td>      <td>7.028048e+07</td>      <td>4.359019</td>      <td>4.49745</td>      <td>0.160284</td>      <td>2.647701</td>    </tr>    <tr>      <th>min</th>      <td>2000.000000</td>      <td>36.300000</td>      <td>2.000000</td>      <td>0.000000</td>      <td>0.010000</td>      <td>0.000000</td>      <td>1.000000</td>      <td>0.000000</td>      <td>2.100000</td>      <td>0.000000</td>      <td>3.000000</td>      <td>0.650000</td>      <td>2.000000</td>      <td>0.100000</td>      <td>3.685949</td>      <td>1.679000e+03</td>      <td>0.200000</td>      <td>0.20000</td>      <td>0.000000</td>      <td>0.000000</td>    </tr>    <tr>      <th>25%</th>      <td>2003.000000</td>      <td>52.700000</td>      <td>228.500000</td>      <td>7.000000</td>      <td>0.365000</td>      <td>1.792246</td>      <td>71.000000</td>      <td>13.500000</td>      <td>15.900000</td>      <td>10.000000</td>      <td>54.000000</td>      <td>3.970000</td>      <td>51.000000</td>      <td>0.800000</td>      <td>263.129142</td>      <td>7.237965e+05</td>      <td>5.600000</td>      <td>5.50000</td>      <td>0.388000</td>      <td>7.200000</td>    </tr>    <tr>      <th>50%</th>      <td>2006.000000</td>      <td>57.500000</td>      <td>285.000000</td>      <td>27.000000</td>      <td>1.830000</td>      <td>22.097580</td>      <td>88.000000</td>      <td>245.000000</td>      <td>19.500000</td>      <td>42.000000</td>      <td>73.000000</td>      <td>5.300000</td>      <td>74.000000</td>      <td>2.500000</td>      <td>561.997387</td>      <td>1.386542e+06</td>      <td>7.700000</td>      <td>7.50000</td>      <td>0.451000</td>      <td>9.100000</td>    </tr>    <tr>      <th>75%</th>      <td>2011.000000</td>      <td>61.800000</td>      <td>366.000000</td>      <td>56.500000</td>      <td>4.150000</td>      <td>62.523467</td>      <td>92.000000</td>      <td>1902.000000</td>      <td>26.800000</td>      <td>88.000000</td>      <td>86.000000</td>      <td>6.410000</td>      <td>86.000000</td>      <td>5.800000</td>      <td>1766.947595</td>      <td>7.078446e+06</td>      <td>9.300000</td>      <td>9.20000</td>      <td>0.514000</td>      <td>10.600000</td>    </tr>    <tr>      <th>max</th>      <td>2015.000000</td>      <td>64.900000</td>      <td>723.000000</td>      <td>1800.000000</td>      <td>11.890000</td>      <td>1705.678619</td>      <td>99.000000</td>      <td>212183.000000</td>      <td>72.100000</td>      <td>2500.000000</td>      <td>99.000000</td>      <td>14.390000</td>      <td>99.000000</td>      <td>50.600000</td>      <td>22742.381590</td>      <td>1.161978e+09</td>      <td>27.700000</td>      <td>28.60000</td>      <td>0.741000</td>      <td>14.400000</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 预测寿命值低于65的国家是否应该增加其医疗保健支出以及改善其平均寿命</span><br><br>plt.figure(figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">13</span>))<br>sns.heatmap(o.corr(), annot= <span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x209b4a9afa0&gt;</code></pre><p><a href="https://postimg.cc/vgdKtsQp"><img src="https://i.postimg.cc/zBL15z4X/output-32-1.png" alt="output-32-1.png"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#   可以看出支出百分比和寿命之间的相关性只有  0.012</span><br><span class="hljs-comment">#   没有必要增加支出</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.figure(figsize=(<span class="hljs-number">30</span>,<span class="hljs-number">7</span>))<br>sns.countplot(x=<span class="hljs-string">&#x27;Adult Mortality&#x27;</span>,data = o.head(<span class="hljs-number">5</span>), hue = <span class="hljs-string">&#x27;Life expectancy &#x27;</span>,palette=<span class="hljs-string">&#x27;PuBuGn&#x27;</span>,saturation=<span class="hljs-number">0.8</span>)<br>plt.xticks(fontsize=<span class="hljs-number">13</span>)<br>plt.yticks(fontsize=<span class="hljs-number">13</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><a href="https://postimg.cc/8fpnxmf4"><img src="https://i.postimg.cc/j2P0w8sp/output-34-0.png" alt="output-34-0.png"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">x = o[[<span class="hljs-string">&#x27;Adult Mortality&#x27;</span>]]<br>y = o[[<span class="hljs-string">&#x27;Life expectancy &#x27;</span>]]<br>plt.figure(figsize=(<span class="hljs-number">700</span>,<span class="hljs-number">420</span>))<br>plt.plot(x,y)<br>plt.show()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>X=o[<span class="hljs-string">&#x27;Adult Mortality&#x27;</span>].values<br>Y=o[<span class="hljs-string">&#x27;Life expectancy &#x27;</span>].values<br>mean_x =np.mean(X)<br>mean_y =np.mean(Y)<br>l=<span class="hljs-built_in">len</span>(X)<br>n=<span class="hljs-number">0</span><br>d=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>    n+=(X[i]-mean_x)*(Y[i]-mean_y)<br>    d+=(X[i]-mean_x)**<span class="hljs-number">2</span><br>b1=n/d<br>b0=mean_y-(b1*mean_x)<br><span class="hljs-built_in">print</span>(b1,b0)<br></code></pre></td></tr></table></figure><pre><code>-0.013979330333748737 60.66304114487947</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">max_x=np.<span class="hljs-built_in">max</span>(X)+<span class="hljs-number">10</span><br>min_x=np.<span class="hljs-built_in">min</span>(X)<br>x=np.linspace(min_x,max_x)<br>y=b0+b1*x<br><br>sns.lineplot(x,y)<br>sns.scatterplot(x=o[<span class="hljs-string">&quot;Adult Mortality&quot;</span>],y=o[<span class="hljs-string">&quot;Life expectancy &quot;</span>])<br></code></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1380d8a03d0&gt;</code></pre><p><a href="https://postimg.cc/Z04g94sN"><img src="https://i.postimg.cc/v8VdNmW0/output-37-1.png" alt="output-37-1.png"></a></p>]]></content>
    
    
    <categories>
      
      <category>python+机器学习+数据分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo-Fluid博客主题美化</title>
    <link href="/2022/07/14/Hexo-Fluid%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"/>
    <url>/2022/07/14/Hexo-Fluid%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&ensp;&ensp;当安装搭配好Hexo博客后可以根据自己的爱好选择不同的主题对自己的博客进行装修，当然有很多主题供大家使用，在此我给大家推荐的是fluid主题，它是一款 Meterial Design风格的Hexo主题，以简约的设计帮助我们专注于写作。</p><p>fluid主题相较于其它主题的优势：<br>&ensp;&ensp;1.设计遵循简洁至上，同时具有轻快的体验，和优雅的颜值；<br>&ensp;&ensp;2.提供大量定制化配置项，使每个用户使用该主题都能具有独特的样式；<br>&ensp;&ensp;3.响应式页面，适配手机、平板等设备；</p><p>&ensp;&ensp;此文章只介绍fluid主题风格的优化，不涉及fluid的安装及配置，如果你想要安装配置fluid主题，可以<a href="https://fluid-dev.github.io/hexo-fluid-docs/start/">参考此链接</a>进行操作即可，接下来将会给大家介绍两种将优化效果引入主题的方法，大家自行选择喜欢的去使用即可。</p><h3 id="一、使用css-js引入的方法"><a href="#一、使用css-js引入的方法" class="headerlink" title="一、使用css/js引入的方法"></a>一、使用css/js引入的方法</h3><h3 id="1-新建css或者js文件"><a href="#1-新建css或者js文件" class="headerlink" title="1.新建css或者js文件"></a>1.新建css或者js文件</h3><h6 id="在此以js为例，在下载的主题文件夹下找到source-js-，在此文件夹下新建一个txt文件，把喜欢的优化风格代码粘贴进去，然后把文档扩展名修改成-js即可。配置好代码文件后打开主题配置文件-config-yml找到”custom-js”和”custom-css”下面进行引入。在此不细说，在2中会将说明如何新建的js文件引入主题。"><a href="#在此以js为例，在下载的主题文件夹下找到source-js-，在此文件夹下新建一个txt文件，把喜欢的优化风格代码粘贴进去，然后把文档扩展名修改成-js即可。配置好代码文件后打开主题配置文件-config-yml找到”custom-js”和”custom-css”下面进行引入。在此不细说，在2中会将说明如何新建的js文件引入主题。" class="headerlink" title="在此以js为例，在下载的主题文件夹下找到source/js/，在此文件夹下新建一个txt文件，把喜欢的优化风格代码粘贴进去，然后把文档扩展名修改成.js即可。配置好代码文件后打开主题配置文件_config.yml找到”custom_js”和”custom_css”下面进行引入。在此不细说，在2中会将说明如何新建的js文件引入主题。"></a>在此以js为例，在下载的主题文件夹下找到source/js/，在此文件夹下新建一个txt文件，把喜欢的优化风格代码粘贴进去，然后把文档扩展名修改成.js即可。配置好代码文件后打开主题配置文件_config.yml找到”custom_js”和”custom_css”下面进行引入。在此不细说，在2中会将说明如何新建的js文件引入主题。</h6><h3 id="2-把新建的js文件引入主题"><a href="#2-把新建的js文件引入主题" class="headerlink" title="2.把新建的js文件引入主题"></a>2.把新建的js文件引入主题</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">custom_js:<br>  - <span class="hljs-regexp">/js/</span>diy/timeDate.js<br>  - <span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/npm/</span>aplayer<span class="hljs-regexp">/dist/</span>APlayer.min.js  <span class="hljs-comment">#/APlayer#/APlayer依赖</span><br>  - <span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/m</span>etowolf<span class="hljs-regexp">/Metingjs@1.2/</span>dist<span class="hljs-regexp">/Meting.min.js  #/</span>APlayer依赖<br>  <span class="hljs-comment">#指定好.js的路径和安装依赖包</span><br>  <span class="hljs-comment">#引入css文件一样，除后缀和文件位置不同之外，其他操作一样</span><br></code></pre></td></tr></table></figure><h3 id="二、在主题源文件中引入美化特效"><a href="#二、在主题源文件中引入美化特效" class="headerlink" title="二、在主题源文件中引入美化特效"></a>二、在主题源文件中引入美化特效</h3><p>例如：在页脚插入运行时间<br><img src="https://img-blog.csdnimg.cn/img_convert/85798ebe77d01f79d839599456ad0786.png" alt=""><br>但是这样会大动代码量，每当主题修改或者升级后都得对代码修改一遍，太过繁琐，所以我推荐大家使用第一种方式进行美化操作。</p><h3 id="三、美化特效"><a href="#三、美化特效" class="headerlink" title="三、美化特效"></a>三、美化特效</h3><h3 id="JS类特效"><a href="#JS类特效" class="headerlink" title="JS类特效"></a>JS类特效</h3><h4 id="1-上升的气泡"><a href="#1-上升的气泡" class="headerlink" title="1.上升的气泡"></a>1.上升的气泡</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/3555765bffead797731dc552ef79fa83.png" alt=""><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/js/</span>qipao.js <span class="hljs-comment">#上升气泡</span><br></code></pre></td></tr></table></figure></p><h4 id="2-静态彩带-点击改变形状"><a href="#2-静态彩带-点击改变形状" class="headerlink" title="2.静态彩带+点击改变形状"></a>2.静态彩带+点击改变形状</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/f1689dd93e5b81645ef6d37cb6d6e644.png" alt=""><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/js/</span>jingtaisidai.js <span class="hljs-comment"># 静态彩带</span><br></code></pre></td></tr></table></figure></p><h4 id="3-动态黑色线条"><a href="#3-动态黑色线条" class="headerlink" title="3.动态黑色线条"></a>3.动态黑色线条</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/d08bc48555cf2b468a2fa56bd854cf77.png" alt=""><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/js/</span>xiantiao.js <span class="hljs-comment"># 动态黑色线条</span><br></code></pre></td></tr></table></figure></p><h4 id="4-小雪花飘落"><a href="#4-小雪花飘落" class="headerlink" title="4.小雪花飘落"></a>4.小雪花飘落</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/0494c6fdd9fd107dab05b27c263da668.png" alt=""><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/js/</span>xiaoxuehua.js <span class="hljs-comment"># 小雪花飘落</span><br></code></pre></td></tr></table></figure></p><h4 id="5-樱花飘落"><a href="#5-樱花飘落" class="headerlink" title="5.樱花飘落"></a>5.樱花飘落</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/29a4401d0545e738c220d8a8507c4565.png" alt=""><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/js/yi</span>nghua.js <span class="hljs-comment"># 樱花飘落</span><br></code></pre></td></tr></table></figure></p><h4 id="6-鼠标后跟随彩色星星"><a href="#6-鼠标后跟随彩色星星" class="headerlink" title="6.鼠标后跟随彩色星星"></a>6.鼠标后跟随彩色星星</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/081f5d0068dc3af0dc924ff3690c50ee.png" alt=""><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/js/</span>xiaoxingxing.js <span class="hljs-comment"># 鼠标跟随小星星</span><br></code></pre></td></tr></table></figure></p><h4 id="7-大雪花飘落"><a href="#7-大雪花飘落" class="headerlink" title="7.大雪花飘落"></a>7.大雪花飘落</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/c829a13989153cd8263ab0da523b8784.png" alt=""><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/js/</span>daxuehua.js <span class="hljs-comment"># 大雪花飘落</span><br></code></pre></td></tr></table></figure></p><h4 id="8-鼠标点击出小爱心"><a href="#8-鼠标点击出小爱心" class="headerlink" title="8.鼠标点击出小爱心"></a>8.鼠标点击出小爱心</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/f82d09498b2d766ea9917559346fd268.png" alt=""><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/js/</span>love.js <span class="hljs-comment"># 鼠标点击出小爱心❤</span><br></code></pre></td></tr></table></figure></p><h4 id="9-鼠标点击出爆炸效果"><a href="#9-鼠标点击出爆炸效果" class="headerlink" title="9.鼠标点击出爆炸效果"></a>9.鼠标点击出爆炸效果</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/2995d164006f2cd384ac81cc54ec8b6b.png" alt=""><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/js/</span>boom.js <span class="hljs-comment"># 鼠标点击爆炸效果</span><br><span class="hljs-regexp">//</span>cdn.bootcss.com<span class="hljs-regexp">/animejs/</span><span class="hljs-number">2.2</span>.<span class="hljs-number">0</span>/anime.min.js <span class="hljs-comment">#依赖</span><br></code></pre></td></tr></table></figure></p><h3 id="CSS类特效"><a href="#CSS类特效" class="headerlink" title="CSS类特效"></a>CSS类特效</h3><h4 id="1-头部打字机颜色效果渐变"><a href="#1-头部打字机颜色效果渐变" class="headerlink" title="1.头部打字机颜色效果渐变"></a>1.头部打字机颜色效果渐变</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/1357f1d03d5223a9401d4db121f7791c.png" alt=""><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/css/</span>toubudaziji.css <span class="hljs-comment"># 头部打字机颜色效果渐变</span><br></code></pre></td></tr></table></figure></p><h4 id="2-头部打字机颜色"><a href="#2-头部打字机颜色" class="headerlink" title="2.头部打字机颜色"></a>2.头部打字机颜色</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/1357f1d03d5223a9401d4db121f7791c.png" alt=""><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/css/</span>daziyanse.css<span class="hljs-comment"># 头部打字机颜色</span><br></code></pre></td></tr></table></figure></p><h4 id="3-滚动条颜色"><a href="#3-滚动条颜色" class="headerlink" title="3.滚动条颜色"></a>3.滚动条颜色</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/f3bcb50723070099eacb781faf6aef3a.png" alt=""><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/css/gu</span>ndongtiao.css<span class="hljs-comment"># 滚动条颜色</span><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>Hexo文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github的修改和上传</title>
    <link href="/2021/12/07/Github%E7%9A%84%E4%BF%AE%E6%94%B9%E5%92%8C%E4%B8%8A%E4%BC%A0/"/>
    <url>/2021/12/07/Github%E7%9A%84%E4%BF%AE%E6%94%B9%E5%92%8C%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="【vscode】-【github】-【GithubDesktop】"><a href="#【vscode】-【github】-【GithubDesktop】" class="headerlink" title="【vscode】+【github】+【GithubDesktop】"></a>【vscode】+【github】+【GithubDesktop】</h1><ul><li>相关工具下载链接<br><a href="https://desktop.github.com/">Github Desktop</a><br><a href="https://code.visualstudio.com/">Vs Code</a><br><a href="https://github.com/chentao320/vscode-github-github-desktop">github界面</a></li><li>首先准备一个github账号</li><li>点开github主界面的右上角的 “+”后点击 New repository（新建一个仓库）</li><li>输入自己的仓库名字和描述，直接创建仓库即可</li><li>打开的GitHub Desktop,点击左上角file中的clone repository。<br><img src="https://note.youdao.com/yws/api/personal/file/WEBa0e93433bc7324eb7e9518cc91f2c55a?method=download&amp;shareKey=7d270568c24d7a2e2edb2fba4e11f5b8" alt=""></li><li>选择要编辑的仓库位置<br><img src="https://note.youdao.com/yws/api/personal/file/WEBbb72e523a3a2fae0f37ca601e91c2696?method=download&amp;shareKey=356ade6bcad7bb1310567731c63942f5" alt=""></li><li>第一次需要clone进去，从第二次开始直接open就行</li><li>clone之后，会出现如下界面，点击箭头所指的位置即可<br><img src="https://note.youdao.com/yws/api/personal/file/WEBe477ce88d6b9dd041fa39e21b3a34c0b?method=download&amp;shareKey=3d87bcd12bd18044947c57d8a19083c7" alt=""></li><li>点击之后就会跳转到Vs Code编辑器中</li><li>首先安装最基本的markdown语法编译<br><img src="https://note.youdao.com/yws/api/personal/file/WEBce0eafd62283107f6514d9c6e41c4e28?method=download&amp;shareKey=e869a27bcfea7ba84fc3e63a1f341409" alt=""></li><li>右击代码界面，会出现对应的运行结果界面，而且还是实时的<br><img src="https://note.youdao.com/yws/api/personal/file/WEB7e7c42c8f451bd385258ee890e391ab9?method=download&amp;shareKey=52edb6fab55cf1fbdefb1f32b9562842" alt=""></li><li>从上面那个图上可以看到左上角有个1，代表没有上传和保存</li><li>更改完之后直接保存，然后点开GitHub Desktop</li><li>可以看到有一些变绿的代码，代码更新改变的。</li><li>点击左下角的Commit to main，和github里面一样。<br><img src="https://note.youdao.com/yws/api/personal/file/WEBdcbb23e569b09b25d8903d3be5026e43?method=download&amp;shareKey=4073297cc090e1cd5cf49d9d82964728" alt=""></li><li>最终把更改后的推送到github仓库中即可<br><img src="https://note.youdao.com/yws/api/personal/file/WEB6ea033c92dedb434fe74c7a903488dd3?method=download&amp;shareKey=4469b857e55f4057b7007fa4739e170d" alt=""></li></ul><h3 id="最后补充一下，当我们要上传一个文件的时候，我们可能会遇到下面几个问题"><a href="#最后补充一下，当我们要上传一个文件的时候，我们可能会遇到下面几个问题" class="headerlink" title="最后补充一下，当我们要上传一个文件的时候，我们可能会遇到下面几个问题"></a>最后补充一下，当我们要上传一个文件的时候，我们可能会遇到下面几个问题</h3><ul><li>1、首先你需要把压缩包解压，这样不会在Vscode中左上角的资源管理器中看到你的文件信息，但是只读文件。</li><li>出现上述问题自主解决，因为解决方法很多。</li><li>2、在Github Desktop中你会看到如下界面，无法进行commit：<br><img src="https://note.youdao.com/yws/api/personal/file/WEB66c2683cd12d4187c3d2eed4d6c63486?method=download&amp;shareKey=5613d53765b9decc4072759b47e94edc" alt=""></li><li>此时你会发现左下角的Description没有写任何东西。</li><li>需要记住上传文件的时候Description部分必须写。随便写点就行。</li></ul>]]></content>
    
    
    <categories>
      
      <category>github的修改与上传</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github的修改与上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>控制台运行py文件问题</title>
    <link href="/2021/12/07/python%E6%96%87%E4%BB%B6%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E9%97%AE%E9%A2%98/"/>
    <url>/2021/12/07/python%E6%96%87%E4%BB%B6%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="cmd命令控制台输出py文件问题"><a href="#cmd命令控制台输出py文件问题" class="headerlink" title="cmd命令控制台输出py文件问题"></a>cmd命令控制台输出py文件问题</h1><h1 id="1、通过python命令运行py文件"><a href="#1、通过python命令运行py文件" class="headerlink" title="1、通过python命令运行py文件"></a>1、通过python命令运行py文件</h1><ul><li>问题：仅仅一个简单的print输出在控制台中没有输出结果，解决方法如下<h1 id="2、检查是否是使用的sublime编写的py文件"><a href="#2、检查是否是使用的sublime编写的py文件" class="headerlink" title="2、检查是否是使用的sublime编写的py文件"></a>2、检查是否是使用的sublime编写的py文件</h1></li><li>sublime编写的py文件运行需要配置python环境，所以检查是否只是在初学python时只是安装了anaconda，没有单独安装python<h1 id="3、检查python是否安装"><a href="#3、检查python是否安装" class="headerlink" title="3、检查python是否安装"></a>3、检查python是否安装</h1></li><li>在环境变量中输入python看是否有输出，无输出则代表python环境变量没有配好，需要把python安装路径加到Path中<h1 id="4、查看anaconda"><a href="#4、查看anaconda" class="headerlink" title="4、查看anaconda"></a>4、查看anaconda</h1></li><li>查看自己安装的anaconda中知否有内置的IPython环境，这样也可以正常运行</li></ul>]]></content>
    
    
    <categories>
      
      <category>python问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python基础学习</title>
    <link href="/2021/12/07/python%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/12/07/python%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="一、python函数"><a href="#一、python函数" class="headerlink" title="一、python函数"></a>一、python函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#自定义函数</span><br>var = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入一个数字：&#x27;</span>))<br><span class="hljs-keyword">if</span> var &gt;<span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;正数&#x27;</span>)<br><span class="hljs-keyword">elif</span> var == <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;为零&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;负数&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">var = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入一个数字&#x27;</span>))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">x</span>):</span><br>   <span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;正数&#x27;</span>)<br>   <span class="hljs-keyword">elif</span> x == <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;为零&#x27;</span>)<br>   <span class="hljs-keyword">else</span>:<br>    <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;负数&quot;</span>)<br>f(var)<br>var2 = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输第二个数字&#x27;</span>))<br>f(var2)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#    关于return</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f1</span>(<span class="hljs-params">x</span>):</span><br>    y = <span class="hljs-number">2</span>**x<br>    <span class="hljs-keyword">return</span> y    <br><span class="hljs-built_in">print</span>(f1(<span class="hljs-number">5</span>))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">lst1,lst2 = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]</span>):</span><br>    m = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(lst1)):<br>        m.append([lst1[i],lst2[i]])<br>    <span class="hljs-keyword">return</span>(m)<br>a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(f(a))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#可变参数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">*x</span>):</span><br>    <span class="hljs-keyword">return</span>(x)<br><span class="hljs-built_in">print</span>(f(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(f(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>)))    <span class="hljs-comment">#元祖类型</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#拆分字符串</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">*x</span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> x:<br>        <span class="hljs-built_in">print</span>(i)<br>x_input = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入一个字符串：&quot;</span>)<br>f(x_input)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  求平均值  #</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">*x</span>):</span><br>    s = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> x:<br>        s= s+ i<br>    <span class="hljs-keyword">return</span>(s/<span class="hljs-built_in">len</span>(x))<br><span class="hljs-built_in">print</span>(f(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#和下方相关</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">m</span>):</span><br>    m = <span class="hljs-string">&#x27;呵呵&#x27;</span><br>    <span class="hljs-built_in">print</span>(m)<br>    <span class="hljs-keyword">return</span>(m)<br>a = <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(a,f(a))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#global语句   --  把局部变量变成全局变量</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>():</span><br>    <span class="hljs-keyword">global</span> a<br>    a = <span class="hljs-string">&#x27;haha&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;函数内转变为全局变量：%s&quot;</span>%a)<br>        <br>a = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入一个数字：&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;输入变量值：%s&quot;</span>%a)<br>f()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#匿名函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun</span>(<span class="hljs-params">a,b,c</span>):</span><br>    <span class="hljs-keyword">return</span> a+b+c<br><span class="hljs-built_in">print</span>(fun(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><br>f = <span class="hljs-keyword">lambda</span> a,b,c:a+b+c<br><span class="hljs-built_in">print</span>(f(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  lamda 求元素个数</span><br>count = <span class="hljs-keyword">lambda</span> lst:<span class="hljs-built_in">len</span>(lst)<br><span class="hljs-built_in">print</span>(count([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">*var</span>):</span><br>    lst = <span class="hljs-built_in">list</span>(var)<br>    lst_re = <span class="hljs-built_in">sorted</span>(lst,reverse = <span class="hljs-literal">True</span>)   <span class="hljs-comment">#从大到小排列</span><br>    <span class="hljs-keyword">return</span> lst_re<br><span class="hljs-built_in">print</span>(f(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">33</span>,<span class="hljs-number">345</span>,<span class="hljs-number">55</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">*scores</span>):</span><br>    s = <span class="hljs-number">0</span><br>    m = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> scores:<br>        <span class="hljs-keyword">if</span> i&gt;<span class="hljs-number">90</span>:<br>            m.append(<span class="hljs-string">&#x27;A&#x27;</span>)<br>        <span class="hljs-keyword">elif</span> i&gt;<span class="hljs-number">60</span> <span class="hljs-keyword">and</span> i&lt;<span class="hljs-number">90</span>:<br>            m.append(<span class="hljs-string">&#x27;B&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            m.append(<span class="hljs-string">&#x27;C&#x27;</span>)<br>        s = s +i<br>    mean = s/<span class="hljs-built_in">len</span>(scores)<br>    <span class="hljs-keyword">return</span>([m,mean])<br>result = f(<span class="hljs-number">89</span>,<span class="hljs-number">92</span>,<span class="hljs-number">100</span>,<span class="hljs-number">62</span>,<span class="hljs-number">88</span>)<br><span class="hljs-built_in">print</span>(result[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(result[<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#   判断是不是特定类型的</span><br><span class="hljs-comment">#st = ....</span><br><span class="hljs-comment">#st.isalpha()     字母</span><br><span class="hljs-comment">#st.isspace()     空格</span><br><span class="hljs-comment">#st.isdigit()     数字</span><br></code></pre></td></tr></table></figure><h3 id="二、python数据读写"><a href="#二、python数据读写" class="headerlink" title="二、python数据读写"></a>二、python数据读写</h3><h4 id="1-txt文本数据读取"><a href="#1-txt文本数据读取" class="headerlink" title="1. txt文本数据读取"></a>1. txt文本数据读取</h4><h6 id="pandas可以使用函数read-table-读取txt文件"><a href="#pandas可以使用函数read-table-读取txt文件" class="headerlink" title="pandas可以使用函数read_table()读取txt文件"></a>pandas可以使用函数read_table()读取txt文件</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br>    <span class="hljs-comment"># 根据正则解析来辨识间隔符号</span><br>    txtframe = pd.read_table(<span class="hljs-string">&#x27;./Data/tmp_4.txt&#x27;</span>,sep=<span class="hljs-string">r&#x27;\s+&#x27;</span>) <br>    <span class="hljs-built_in">print</span>(txtframe, <span class="hljs-string">&quot;\n-----*-----&quot;</span>)<br>    txtframe = pd.read_table(<span class="hljs-string">&#x27;./Data/tmp_4.txt&#x27;</span>,sep=<span class="hljs-string">r&#x27;\s+&#x27;</span>,header=<span class="hljs-literal">None</span>,engine=<span class="hljs-string">&#x27;python&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(txtframe, <span class="hljs-string">&quot;\n-----*-----&quot;</span>)<br>    <span class="hljs-comment"># 使用skiprows选项，可以排除多余的行。把要排除的行的行号放到数组中，赋给该选项即可。</span><br>    txtframe = pd.read_table(<span class="hljs-string">&#x27;./Data/tmp_4.txt&#x27;</span>,sep=<span class="hljs-string">r&#x27;\s+&#x27;</span>,skiprows=[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br>    txtframe = txtframe.reset_index(drop=<span class="hljs-literal">True</span>)<br>    <span class="hljs-built_in">print</span>(txtframe) <br></code></pre></td></tr></table></figure><h6 id="由于没找到pandas对txt文件的写入，但是想想应该和写入csv文件大同小异。这里补充一下numpy对txt文件的处理。"><a href="#由于没找到pandas对txt文件的写入，但是想想应该和写入csv文件大同小异。这里补充一下numpy对txt文件的处理。" class="headerlink" title="由于没找到pandas对txt文件的写入，但是想想应该和写入csv文件大同小异。这里补充一下numpy对txt文件的处理。"></a>由于没找到pandas对txt文件的写入，但是想想应该和写入csv文件大同小异。这里补充一下numpy对txt文件的处理。</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>data = np.loadtxt(<span class="hljs-string">&#x27;./Data/tmp_2.csv&#x27;</span>,delimiter=<span class="hljs-string">&#x27;,&#x27;</span>)<br><span class="hljs-built_in">print</span>(data)<br>np.savetxt(<span class="hljs-string">&#x27;./Data/tmp_7.txt&#x27;</span>,data,fmt=<span class="hljs-string">&#x27;%d&#x27;</span>,delimiter=<span class="hljs-string">&#x27;,&#x27;</span>,newline=<span class="hljs-string">&#x27;\n&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="2-csv文本数据读写"><a href="#2-csv文本数据读写" class="headerlink" title="2. csv文本数据读写"></a>2. csv文本数据读写</h4><h6 id="pandas支持多种数据读写方法，这里列举一些方法。"><a href="#pandas支持多种数据读写方法，这里列举一些方法。" class="headerlink" title="pandas支持多种数据读写方法，这里列举一些方法。"></a>pandas支持多种数据读写方法，这里列举一些方法。</h6><p><img src="https://i.postimg.cc/B6P7VpvY/0-C-J8-H2-SXF-RTMSXYLYY8-D.png" alt=""></p><h6 id="pandas中read-csv-和to-csv-可以处理csv文件"><a href="#pandas中read-csv-和to-csv-可以处理csv文件" class="headerlink" title="pandas中read_csv()和to_csv()可以处理csv文件"></a>pandas中read_csv()和to_csv()可以处理csv文件</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br>a = np.arange(<span class="hljs-number">1</span>,<span class="hljs-number">26</span>,<span class="hljs-number">1</span>)<br>a = a.reshape((<span class="hljs-number">5</span>,<span class="hljs-number">5</span>))<br><br>b = pd.DataFrame(a,columns=[<span class="hljs-string">&#x27;i1&#x27;</span>,<span class="hljs-string">&#x27;i2&#x27;</span>,<span class="hljs-string">&#x27;i3&#x27;</span>,<span class="hljs-string">&#x27;i4&#x27;</span>,<span class="hljs-string">&#x27;i5&#x27;</span>])<br><span class="hljs-comment">#！！！写入文件</span><br><br>b.to_csv(<span class="hljs-string">&#x27;./Data/tmp_1.csv&#x27;</span>)<br><br><span class="hljs-comment"># 使用index和 header选项，把它们的值设置为False,可取消默认写入index和header</span><br>b.to_csv(<span class="hljs-string">&#x27;./Data/tmp_2.csv&#x27;</span>,index =<span class="hljs-literal">False</span>,header=<span class="hljs-literal">False</span>)<br><br><span class="hljs-comment"># 可以用to_csv()函数的na_rep选项把空字段替换为你需要的值。常用值有NULL、0和NaN</span><br>b.to_csv(<span class="hljs-string">&#x27;./Data/tmp_3.csv&#x27;</span>,na_rep=<span class="hljs-string">&quot;空&quot;</span>)<br><br><span class="hljs-comment">#！！！读取文件</span><br><br>csvframe = pd.read_csv(<span class="hljs-string">&#x27;./Data/tmp_1.csv&#x27;</span>)<br><span class="hljs-built_in">print</span>(csvframe, <span class="hljs-string">&quot;\n-----*-----&quot;</span>)<br>csvframe = pd.read_table(<span class="hljs-string">&#x27;./Data/tmp_1.csv&#x27;</span>,sep=<span class="hljs-string">&#x27;,&#x27;</span>)<br><span class="hljs-built_in">print</span>(csvframe, <span class="hljs-string">&quot;\n-----*-----&quot;</span>)<br><span class="hljs-comment"># 设置header为None，表示文件没有表头，第一行为数据，添加默认表头</span><br>csvframe = pd.read_csv(<span class="hljs-string">&#x27;./Data/tmp_2.csv&#x27;</span>,header=<span class="hljs-literal">None</span>) <br><span class="hljs-built_in">print</span>(csvframe, <span class="hljs-string">&quot;\n-----*-----&quot;</span>)<br><span class="hljs-comment"># 指定表头。我们假设文件中有m列数据，设定的names有n个列名。</span><br><span class="hljs-comment"># 如果m&gt;n，默认从最后一列（右侧）开始匹配，多余的右侧第一列作为index，其余数据舍弃</span><br><span class="hljs-comment"># 如果m==n，正常匹配</span><br><span class="hljs-comment"># 如果m&lt;n，默认从第一列（左侧）开始匹配，多余的列名全部赋值Nan</span><br>csvframe = pd.read_csv(<span class="hljs-string">&#x27;./Data/tmp_2.csv&#x27;</span>,names=[<span class="hljs-string">&#x27;d1&#x27;</span>,<span class="hljs-string">&#x27;d2&#x27;</span>,<span class="hljs-string">&#x27;d3&#x27;</span>,<span class="hljs-string">&#x27;d4&#x27;</span>,<span class="hljs-string">&#x27;d5&#x27;</span>,<span class="hljs-string">&#x27;d6&#x27;</span>]) <br><span class="hljs-built_in">print</span>(csvframe, <span class="hljs-string">&quot;\n-----*-----&quot;</span>)<br><span class="hljs-comment">#等级索引,可以指定以某一列为索引，支持多列索引。</span><br>csvframe = pd.read_csv(<span class="hljs-string">&#x27;./Data/tmp_3.csv&#x27;</span>,index_col=[<span class="hljs-string">&#x27;i1&#x27;</span>,<span class="hljs-string">&#x27;i2&#x27;</span>]) <br><span class="hljs-built_in">print</span>(csvframe, <span class="hljs-string">&quot;\n-----*-----&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="3-excel文本数据读写"><a href="#3-excel文本数据读写" class="headerlink" title="3. excel文本数据读写"></a>3. excel文本数据读写</h4><h6 id="使用xlrd读取excel读取数据"><a href="#使用xlrd读取excel读取数据" class="headerlink" title="使用xlrd读取excel读取数据"></a>使用xlrd读取excel读取数据</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> xlrd<br><br><span class="hljs-comment"># 设置路径</span><br>path = <span class="hljs-string">&#x27;./Data/1.xlsx&#x27;</span><br><span class="hljs-comment"># 打开execl</span><br>workbook = xlrd.open_workbook(path)<br><br><span class="hljs-comment"># 输出Excel文件中所有sheet的名字</span><br><span class="hljs-built_in">print</span>(workbook.sheet_names())<br><br><span class="hljs-comment"># 根据sheet索引或者名称获取sheet内容</span><br>Data_sheet = workbook.sheets()[<span class="hljs-number">0</span>]  <span class="hljs-comment"># 通过索引获取</span><br><span class="hljs-comment"># Data_sheet = workbook.sheet_by_index(0)  # 通过索引获取</span><br><span class="hljs-comment"># Data_sheet = workbook.sheet_by_name(u&#x27;名称&#x27;)  # 通过名称获取</span><br><br><br><span class="hljs-built_in">print</span>(Data_sheet.name)  <span class="hljs-comment"># 获取sheet名称</span><br>rowNum = Data_sheet.nrows  <span class="hljs-comment"># sheet行数</span><br>colNum = Data_sheet.ncols  <span class="hljs-comment"># sheet列数</span><br><br><span class="hljs-comment"># 获取所有单元格的内容</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(rowNum):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(colNum):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0&#125; &#x27;</span>.<span class="hljs-built_in">format</span>(Data_sheet.cell_value(i, j)))<br><br><span class="hljs-comment"># 获取整行和整列的值（列表）</span><br>rows = Data_sheet.row_values(<span class="hljs-number">0</span>)  <span class="hljs-comment"># 获取第一行内容</span><br>cols = Data_sheet.col_values(<span class="hljs-number">1</span>)  <span class="hljs-comment"># 获取第二列内容</span><br><span class="hljs-built_in">print</span> (rows)<br><span class="hljs-built_in">print</span> (cols)<br><br><span class="hljs-comment"># 获取单元格内容</span><br>cell_A1 = Data_sheet.cell(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>).value<br>cell_B1 = Data_sheet.row(<span class="hljs-number">0</span>)[<span class="hljs-number">1</span>].value  <span class="hljs-comment"># 使用行索引</span><br>cell_A2 = Data_sheet.col(<span class="hljs-number">0</span>)[<span class="hljs-number">1</span>].value  <span class="hljs-comment"># 使用列索引</span><br><span class="hljs-built_in">print</span>(cell_A1, cell_B1, cell_A2)<br><br><span class="hljs-comment"># 获取单元格内容的数据类型</span><br><span class="hljs-comment"># ctype:0 empty,1 string, 2 number, 3 date, 4 boolean, 5 error</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;cell(0,0)数据类型:&#x27;</span>, Data_sheet.cell(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>).ctype)<br><br><span class="hljs-comment"># 获取单元格内容为日期的数据</span><br>date_value = xlrd.xldate_as_tuple(Data_sheet.cell_value(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>),workbook.datemode)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(date_value), date_value)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d:%d:%d&#x27;</span> % (date_value[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]))<br></code></pre></td></tr></table></figure><h3 id="三、Python条件及判断循环语句"><a href="#三、Python条件及判断循环语句" class="headerlink" title="三、Python条件及判断循环语句"></a>三、Python条件及判断循环语句</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#基础的条件判断</span><br>age = <span class="hljs-number">16</span><br><span class="hljs-keyword">if</span> age &lt; <span class="hljs-number">18</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;小于18周岁&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#输入函数Input（）</span><br>score = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入成绩：\n&quot;</span>)<br><span class="hljs-built_in">print</span>(score,<span class="hljs-built_in">type</span>(score))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;该学生的成绩为：%s&#x27;</span>%score)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#if-else(可以是多个if-else)</span><br>age = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;年龄为：&quot;</span>))<br><span class="hljs-keyword">if</span> age &lt; <span class="hljs-number">18</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;小于18周岁&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;成年了&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;finished!&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#单语句多条件判断：  and or</span><br>num = <span class="hljs-number">5</span><br><span class="hljs-keyword">if</span> num &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> num &lt;= <span class="hljs-number">10</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>) <br>    <br>num = <span class="hljs-number">10</span><br><span class="hljs-keyword">if</span> num &lt;=<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> num &gt;=<span class="hljs-number">10</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#for循环语句</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br> <br>lst = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> lst[:<span class="hljs-number">5</span>]:<br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#嵌套循环(不要用太多的循环)</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        <span class="hljs-built_in">print</span>(i,j)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">######   等差数列   #####</span><br>a = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入首相：&quot;</span>))<br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入项数：&quot;</span>))<br>d = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入公差&quot;</span>))<br>s = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    An = a + d*i<br>    s = s + An<br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">###  形成字典   ###</span><br>lst1 = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]<br>lst2 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><br>m = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    lsti = [lst1[i],lst2[i]]<br>    <span class="hljs-built_in">print</span>(lsti)<br>    m.append(lsti)<br><span class="hljs-built_in">print</span>(m)<br>dic = <span class="hljs-built_in">dict</span>(m)<br><span class="hljs-built_in">print</span>(dic)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#while循环</span><br>count = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> count &lt;<span class="hljs-number">9</span>:<br>    <span class="hljs-built_in">print</span>(count)<br>    count = count+<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># while -  else语句</span><br>count = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> count &lt; <span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">print</span>(count,<span class="hljs-string">&quot;小于5&quot;</span>)<br>    count = count + <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(count,<span class="hljs-string">&quot;大于5&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#循环控制语句</span><br><span class="hljs-comment">#break语句（跳出整个循环）</span><br>s = <span class="hljs-number">0</span><br>n = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> n&gt;<span class="hljs-number">0</span>:<br>    s = s + n<br>    n = n+<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> n ==<span class="hljs-number">20</span>:<br>      <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#continue语句(跳出本次循环，继续下一次循环)</span><br>s = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">if</span> i%<span class="hljs-number">2</span> ==<span class="hljs-number">0</span>:<br>        s = s + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-built_in">print</span>(i)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;第%i次循环&quot;</span>%(i/<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;结果为;%i&quot;</span> %s)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#pass语句(不中断也不跳过)</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;python&#x27;</span>:<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-string">&#x27;h&#x27;</span>:<br>       <span class="hljs-keyword">pass</span><br>       <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;当前字母是 : h，但是我pass了&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;当前字母是 :&#x27;</span>,i)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python+机器学习+数据分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决hexo报错spwan failed</title>
    <link href="/2021/12/07/%E8%A7%A3%E5%86%B3hexo%E6%8A%A5%E9%94%99spwan%20failed/"/>
    <url>/2021/12/07/%E8%A7%A3%E5%86%B3hexo%E6%8A%A5%E9%94%99spwan%20failed/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="解决hexo报错spwan-failed"><a href="#解决hexo报错spwan-failed" class="headerlink" title="解决hexo报错spwan failed"></a>解决hexo报错spwan failed</h1><h4 id="报错1："><a href="#报错1：" class="headerlink" title="报错1："></a>报错1：</h4><p><img src="https://s2.loli.net/2022/03/15/sZkxnzA6Vv3jSce.png" alt="_66NF~4~____DWH4W__399W.png"></p><h4 id="解决方法如下："><a href="#解决方法如下：" class="headerlink" title="解决方法如下："></a>解决方法如下：</h4><ul><li>按照如下图操作：<br><img src="https://s2.loli.net/2022/03/15/5nF2LVqmNzctEoD.png" alt="O9C_TI_50U9ZE_N2V8PQ~@I.png"><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 进入hexo根目录下</span><br>rm -rf <span class="hljs-string">.deploy_git/</span><br>git config <span class="hljs-params">--global</span> core.autocrlf <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></li><li>最后重新生成提交<figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">hexo clean <span class="hljs-variable">&amp;&amp;</span> hexo g <span class="hljs-variable">&amp;&amp;</span> hexo d<br></code></pre></td></tr></table></figure>在提交的时候有可能会出现下面的错误：<h4 id="报错2："><a href="#报错2：" class="headerlink" title="报错2："></a>报错2：</h4><img src="https://s2.loli.net/2022/03/15/FHb3nr2m7AtyJvs.png" alt="`_E7AGK7O7JYYJ__@_HUFQ1.png"><h4 id="解决方法如下：-1"><a href="#解决方法如下：-1" class="headerlink" title="解决方法如下："></a>解决方法如下：</h4></li><li>这是因为你的github设置出了问题</li><li>浏览器进入github.com</li><li>登陆github -&gt; “+” -&gt;settings</li><li>后续操作如下图：<br><img src="https://s2.loli.net/2022/03/15/rcsGHuLNnVWSly6.png" alt="888.png"></li><li>再把下面图中的两个设置取消勾选<br><img src="https://s2.loli.net/2022/03/15/5c1SRyixemqB24D.png" alt="999.png"><br><img src="https://s2.loli.net/2022/03/15/1VstJCeSovcOy3a.png" alt="000.png"><br>通过上面的操作，在重新运行下面代码就大功告成了，再刷新页面应该就显示提交的内容了<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 重新生成提交</span><br>hexo clean <span class="hljs-meta">&amp;&amp; hexo g &amp;&amp; hexo d</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Hexo文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>colab</title>
    <link href="/2021/12/06/colab/"/>
    <url>/2021/12/06/colab/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="colab"><a href="#colab" class="headerlink" title="colab"></a>colab</h1><h3 id="1-首先需要一个谷歌账号"><a href="#1-首先需要一个谷歌账号" class="headerlink" title="1.首先需要一个谷歌账号"></a>1.首先需要一个谷歌账号</h3><ul><li>注册的时候可能会遇到号码无法进行验证的情况<br><img src="https://note.youdao.com/yws/api/personal/file/WEBa0668ffc1ca2c15b97f9f9ca83bb29d1?method=download&amp;shareKey=8059a359abd1456eb147a7ce3ca3da7e" alt=""></li><li>因为Google现在不怎么支持中文，所以我们需要把谷歌的英文上移，同时使用英文并且删除中文，只保留英文语言。</li></ul><h3 id="2-查看基本配置"><a href="#2-查看基本配置" class="headerlink" title="2.查看基本配置"></a>2.查看基本配置</h3><ul><li>查看pytorch的版本、cuda是否可用</li><li>查看需要的工具版本<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import torch<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(torch.__version__)</span></span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(torch.cuda.is_available)</span></span><br></code></pre></td></tr></table></figure></li></ul><h3 id="3-挂载"><a href="#3-挂载" class="headerlink" title="3.挂载"></a>3.挂载</h3><h5 id="因为colab只是一个远程的、可以无偿给我们提供GPU支持的主机，而不是本地的存储支持。所以我们需要把我们要运行的代码（谷歌云盘）挂载到远程主机上。"><a href="#因为colab只是一个远程的、可以无偿给我们提供GPU支持的主机，而不是本地的存储支持。所以我们需要把我们要运行的代码（谷歌云盘）挂载到远程主机上。" class="headerlink" title="因为colab只是一个远程的、可以无偿给我们提供GPU支持的主机，而不是本地的存储支持。所以我们需要把我们要运行的代码（谷歌云盘）挂载到远程主机上。"></a>因为colab只是一个远程的、可以无偿给我们提供GPU支持的主机，而不是本地的存储支持。所以我们需要把我们要运行的代码（谷歌云盘）挂载到远程主机上。</h5><ul><li>挂载远程主机<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">from</span> google.colab <span class="hljs-keyword">import</span> drive<br>drive.mount(<span class="hljs-string">&quot;/content/drive)</span><br></code></pre></td></tr></table></figure></li><li>这一步我们需要登录谷歌账号复制链接<br><img src="https://note.youdao.com/yws/api/personal/file/WEB298e801d0a3acba2667fe7ba8c3e6b8c?method=download&amp;shareKey=49b1dbf0ab5675af3b63016127b1f7db" alt=""></li><li>更改运行目录</li><li>因为程序的运行需要在相同的目录下才能相互使用和运行，所以需要把要运行的程序放到同一个目录下。在这一步最好都运行一次，有时候看着是在一个目录下，但事实上在不同的地方。<br><img src="https://note.youdao.com/yws/api/personal/file/WEB4769a1f4d67bdd6fa62e8c71a896ccab?method=download&amp;shareKey=adfef04bbd9d574cc7ac43aadc1674c7" alt=""><h3 id="4-同级文件调用"><a href="#4-同级文件调用" class="headerlink" title="4.同级文件调用"></a>4.同级文件调用</h3><h5 id="当我们在运行一个程序时，有时候需要调用模型模块儿来进行训练，我们只在谷歌云盘上更改后缀，单纯地把-ipynb文件更改成-py文件，从表面上看确实已经成为python文件了。但是事实上colab只能更改-ipynb文件的内容，所以更改后的文件仍然是-ipynb文件。"><a href="#当我们在运行一个程序时，有时候需要调用模型模块儿来进行训练，我们只在谷歌云盘上更改后缀，单纯地把-ipynb文件更改成-py文件，从表面上看确实已经成为python文件了。但是事实上colab只能更改-ipynb文件的内容，所以更改后的文件仍然是-ipynb文件。" class="headerlink" title="当我们在运行一个程序时，有时候需要调用模型模块儿来进行训练，我们只在谷歌云盘上更改后缀，单纯地把.ipynb文件更改成.py文件，从表面上看确实已经成为python文件了。但是事实上colab只能更改.ipynb文件的内容，所以更改后的文件仍然是.ipynb文件。"></a>当我们在运行一个程序时，有时候需要调用模型模块儿来进行训练，我们只在谷歌云盘上更改后缀，单纯地把.ipynb文件更改成.py文件，从表面上看确实已经成为python文件了。但是事实上colab只能更改.ipynb文件的内容，所以更改后的文件仍然是.ipynb文件。</h5><h5 id="要想把-ipynb文件真正变成-py文件，可以先把文件下载到本地，在本地上更改后缀，然后在挂到谷歌云盘当中，这样就可以调用了。"><a href="#要想把-ipynb文件真正变成-py文件，可以先把文件下载到本地，在本地上更改后缀，然后在挂到谷歌云盘当中，这样就可以调用了。" class="headerlink" title="要想把.ipynb文件真正变成.py文件，可以先把文件下载到本地，在本地上更改后缀，然后在挂到谷歌云盘当中，这样就可以调用了。"></a>要想把.ipynb文件真正变成.py文件，可以先把文件下载到本地，在本地上更改后缀，然后在挂到谷歌云盘当中，这样就可以调用了。</h5><h3 id="5-将kaggle的数据集下载到colab上使用"><a href="#5-将kaggle的数据集下载到colab上使用" class="headerlink" title="5.将kaggle的数据集下载到colab上使用"></a>5.将kaggle的数据集下载到colab上使用</h3><h5 id="kaggle上有很多竞赛数据集，但是kaggle的GPU使用时间是有限的，但是colab没有时间限制。如果从本地上传就很慢，所以我们可以把kaggle上的数据集传到（下载）到colab上去使用。"><a href="#kaggle上有很多竞赛数据集，但是kaggle的GPU使用时间是有限的，但是colab没有时间限制。如果从本地上传就很慢，所以我们可以把kaggle上的数据集传到（下载）到colab上去使用。" class="headerlink" title="kaggle上有很多竞赛数据集，但是kaggle的GPU使用时间是有限的，但是colab没有时间限制。如果从本地上传就很慢，所以我们可以把kaggle上的数据集传到（下载）到colab上去使用。"></a>kaggle上有很多竞赛数据集，但是kaggle的GPU使用时间是有限的，但是colab没有时间限制。如果从本地上传就很慢，所以我们可以把kaggle上的数据集传到（下载）到colab上去使用。</h5></li><li>首先需要一个kaggle账号</li><li>下载并更新kaggle <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">!pip <span class="hljs-keyword">install</span> kaggle<br></code></pre></td></tr></table></figure><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">!pip</span> <span class="hljs-comment">install</span> --<span class="hljs-comment">upgrade</span> --<span class="hljs-comment">force</span><span class="hljs-literal">-</span><span class="hljs-comment">reinstall</span> --<span class="hljs-comment">no</span><span class="hljs-literal">-</span><span class="hljs-comment">deps</span> <span class="hljs-comment">kaggle</span><br></code></pre></td></tr></table></figure></li><li>进入kaggle，进入你的账号信息</li><li>往下拖，在API的位置有个Create New API Token，点击后会自动下载一个json文件，打开会出现username和key信息。<br><img src="https://img-blog.csdnimg.cn/20200419131732836.png" alt=""><br><img src="https://note.youdao.com/yws/api/personal/file/WEBfb25bde78e6f9c3aef09e8e2a7d0fc9c?method=download&amp;shareKey=e9d444d9a3d9d5829e7aa62b41b2a767" alt=""></li><li>输入以下代码,把对应的username和key填入即可<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">import</span> json<br>token = &#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;xxxxx&quot;</span>,<span class="hljs-string">&quot;key&quot;</span>:<span class="hljs-string">&quot;xxxxx&quot;</span>&#125;<br>with open(<span class="hljs-string">&#x27;/content/kaggle.json&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) as <span class="hljs-keyword">file</span>:<br>  json.<span class="hljs-keyword">dump</span>(token, <span class="hljs-keyword">file</span>)<br></code></pre></td></tr></table></figure>*然后再依次输入一下代码<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">!mkdir -p ~/.kaggle<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">!cp <span class="hljs-regexp">/content/</span>kaggle.json ~<span class="hljs-regexp">/.kaggle/</span><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">!chmod <span class="hljs-number">600</span> ~<span class="hljs-regexp">/.kaggle/</span>kaggle.json<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">!kaggle<span class="hljs-built_in"> config </span><span class="hljs-builtin-name">set</span> -n path -v /content<br></code></pre></td></tr></table></figure></li><li>最后从kaggle上找出自己的数据集,点击Copy API command后进入colab下载即可。<br><img src="https://note.youdao.com/yws/api/personal/file/WEBf34a4d51c6fa1e40b34b6ae821752509?method=download&amp;shareKey=8100dc1c387dc1500f436a85f7c9a479" alt=""></li><li>我这里找了个比较小的数据集，下载速度还可以。我还测试过一个大的数据集，下载速度差不多可以达到90MB/s<br><img src="https://note.youdao.com/yws/api/personal/file/WEBb6313496d36d2da249e897fc00588881?method=download&amp;shareKey=7c07a70f4b8cb8d1c6a30bee58324f97" alt=""><h3 id="6-模型测试【resnet101】-【CIFAR10】"><a href="#6-模型测试【resnet101】-【CIFAR10】" class="headerlink" title="6.模型测试【resnet101】+【CIFAR10】"></a>6.模型测试【resnet101】+【CIFAR10】</h3></li><li>使用GPU<br><img src="https://note.youdao.com/yws/api/personal/file/WEB513ff4229077d747bf3e605c1fdd00b4?method=download&amp;shareKey=41de0a54704bde7e2a37a9000ce1a3ea" alt=""><br><img src="https://note.youdao.com/yws/api/personal/file/WEBec1bab9cceb85c16ce76ae81931b2465?method=download&amp;shareKey=6eec973d892c8cece45aab04a4f77fe7" alt=""><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-keyword">import</span> <span class="hljs-built_in">os</span><br><span class="hljs-built_in">os</span>.environ[<span class="hljs-string">&#x27;CUDA_VISIBLE_DEVICES&#x27;</span>] = <span class="hljs-string">&#x27;0&#x27;</span><br></code></pre></td></tr></table></figure></li><li>模型测试<br><img src="https://note.youdao.com/yws/api/personal/file/WEB60e4930efc965989d27d6dfa8ff18e67?method=download&amp;shareKey=445ee61c848f3768e95af7744229c230" alt=""><br><img src="https://note.youdao.com/yws/api/personal/file/WEBbb8925e46e1f00dd8a38c4c164545f29?method=download&amp;shareKey=519bf7b1faef901fde7ba2d78ab7d4a1" alt=""><br><img src="https://note.youdao.com/yws/api/personal/file/WEB2403f1cc4b962d761189f3f225a6686c?method=download&amp;shareKey=0d6aa4fd22927bd36b165f086d3af7f5" alt=""><br><img src="https://note.youdao.com/yws/api/personal/file/WEB1c5a74ca03d7eb939a18719674aa31e3?method=download&amp;shareKey=c779c67e4ef52a1e9eae10065bcd1cc1" alt=""></li></ul>]]></content>
    
    
    <categories>
      
      <category>colab学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>colab的配置与使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gitlab的使用</title>
    <link href="/2021/12/06/gitlab%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/12/06/gitlab%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="gitlab的基本应用"><a href="#gitlab的基本应用" class="headerlink" title="gitlab的基本应用"></a>gitlab的基本应用</h1><h3 id="1-创建gitlab账号，并设置自己的SSH"><a href="#1-创建gitlab账号，并设置自己的SSH" class="headerlink" title="1.创建gitlab账号，并设置自己的SSH"></a>1.创建gitlab账号，并设置自己的SSH</h3><ul><li><em><a href="https://www.cnblogs.com/qianqiu-1026/p/8543588.html">gitlab注册</a></em></li><li>SSH的生成及使用上面链接中内含教程链接，此处不多说</li></ul><h3 id="2-创建仓库"><a href="#2-创建仓库" class="headerlink" title="2.创建仓库"></a>2.创建仓库</h3><ul><li>在自己的项目组里面创建自己的仓库（new project）<br><img src="https://s2.loli.net/2022/04/04/gAfHaJSn4KqbDdL.png" alt="K_K4_8IP41SEII_RLMZ4@BG.png"></li><li>此处举例创建名为demo（只有一个readme文件）</li><li>打开git bash命令窗口进行如下操作：<br>(1) 从gitlab仓库中克隆到本地（此处克隆到桌面）<br><img src="https://s2.loli.net/2022/04/04/uXyC7mwYAczNnei.png" alt="JBNTJKP2_B_RG62J23372WR.png"><br><img src="https://s2.loli.net/2022/04/04/AxO2YV9XyhvSqcp.png" alt="W7SF_L`2VJ6232_1SKVXG09.png"><br>注：此处的地址就是clone的HTTPS<br>(2) clone后会在桌面上显示你的远程仓库文件<br>(3) 把你的项目文件放到桌面的demo文件中<br>(4) 可以通过以下命令看一下demo文件的状态<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">cd <span class="hljs-built_in">demo</span><br>git <span class="hljs-built_in">status</span><br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/04/04/5Kupj1nxhgG23Ok.png" alt="@O1CXNN__VU1~_HFMY_2L_R.png"><br>注：此时项目文件中的README.md文件替换了demo中的README.md文件，此时已经在本地的暂存区了<br>而下面的一些文件在demo文件中没有，只是存在于本地目录下<br>(5) 把在本地目录下新加的文件add到暂存区<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-builtin-name">add</span> .<br>注：.代表全部文件<br></code></pre></td></tr></table></figure>(6) 把暂存区的文件commit到仓库中<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">commit</span> -m &quot;第一次提交微信小程序代码&quot;<br>注： &quot;&quot;里面的东西一定要写清楚，这代表着你这次干的什么事，可以看<span class="hljs-keyword">commit</span>记录<br></code></pre></td></tr></table></figure>(7) 最后push到gitlab远程仓库<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git push origin <span class="hljs-keyword">master</span><br><span class="hljs-title">注：origin</span>代表远程，<span class="hljs-literal">master</span>代表push的仓库名<br></code></pre></td></tr></table></figure>(8) 最后你就可以在gitlab界面中刷新看到你的项目文件了，如下图所示：<br><img src="https://s2.loli.net/2022/04/04/Glkja8VysJARFiP.png" alt="W18QH__7_15L@B092OWYK~O.png"></li></ul><h3 id="3-创建分支"><a href="#3-创建分支" class="headerlink" title="3.创建分支"></a>3.创建分支</h3><ul><li>因为一个项目工程不是一个人完成的，需要一个团队进行不同的工作，所以团队成员需要创建一个自己的分支来更新自己的项目进度<br>创建方法如下：<br>(1) 打开你的gitbash命令窗口（在主仓库文件下）<br>(2) 创建分支（名字自定义）<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch chen</span><br></code></pre></td></tr></table></figure>(3) 转换到分支下<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git checkout chen</span><br></code></pre></td></tr></table></figure>(4)最后push到你的gitlab远程仓库中即可<br>注：在本地通过命令行创建分支后会同步到远程仓库中<br>可以创建合并请求，如下图所示：<br><img src="https://s2.loli.net/2022/04/04/i1ICVk6wtAsSNzQ.png" alt="G_5NG1FCSKXSULB_RK_K6`F.png"></li></ul>]]></content>
    
    
    <categories>
      
      <category>gitlab</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gitlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>标题</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
    
  </entry>
  
  
  
</search>
